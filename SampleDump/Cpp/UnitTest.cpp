#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class UBP_AudioSettings_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_AudioSettings__BP_AudioSettings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, ApplyAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, ApplyButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, AudioQualityDropdownhidden, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, EffectsVolumeSlider, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, HoveredSetting, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, Image_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, Image_40, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, InstrumentVolumeSlider, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, MasterVolumeSlider, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, MusicVolumeSlider, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, ResetButton, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, VideoVolumeSlider, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, VoiceVolumeSlider, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, MusicAudioVolume, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, UnknownData_4KS3, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, MasterAudioVolume, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettings_C, EffectAudioVolume, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AudioSettings_C, 0x02B4);
		}

		// class UWebBrowser : public UWidget
		TEST_METHOD(Class__WebBrowserWidget__WebBrowser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowser, OnUrlChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowser, OnBeforePopup, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowser, InitialURL, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowser, bSupportsTransparency, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowser, UnknownData_4D7S, 0x0139);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebBrowser, 0x0150);
		}

		// class UWebBrowserAssetManager : public UObject
		TEST_METHOD(Class__WebBrowserWidget__WebBrowserAssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowserAssetManager, DefaultMaterial, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowserAssetManager, UnknownData_Z5HH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebBrowserAssetManager, 0x0078);
		}

		// class UBP_ScoreboardTeamfightEntry_C : public UBP_ScoreboardEntryParent_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ScoreboardTeamfightEntry__BP_ScoreboardTeamfightEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, UnknownData_K3K0, 0x037F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, BP_PlayerWidget, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Button_1, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Image_2, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Image_3, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Image_4, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Image_5, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Image_6, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Image_7, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Image_8, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Image_9, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Image_11, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Image_14, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, Overlay_10, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, SizeBox_8, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, SizeBox_10, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, SizeBox_11, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, TextBlock_788, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, TextBlock_789, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, TextBlock_790, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, TextBlock_791, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, TextBlock_792, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, BackgroundColor, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, HighlightedBackgroundColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, DeadNameColor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, AliveNameColor, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamfightEntry_C, RankInt, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScoreboardTeamfightEntry_C, 0x04A4);
		}

		// class UBP_Plate_Boots_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Plate_Boots__BP_Plate_Boots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Plate_Boots_C, 0x01A0);
		}

		// class UBP_GothicLegs_C : public UBP_Tier3LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GothicLegs__BP_GothicLegs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GothicLegs_C, 0x01B8);
		}

		// class UNiagaraDataInterface : public UNiagaraDataInterfaceBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface, UnknownData_0GLL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface, 0x0030);
		}

		// class UMovieSceneNiagaraTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraTrack, 0x0068);
		}

		// class UMovieSceneNiagaraParameterTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraParameterTrack, Parameter, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraBoolParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraBoolParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraBoolParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraColorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraColorParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraColorParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraFloatParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraFloatParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraFloatParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraIntegerParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraIntegerParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraIntegerParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraSystemSpawnSection : public UMovieSceneSection
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionStartBehavior, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_9WXV, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEvaluateBehavior, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_RQ9O, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEndBehavior, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_9FG8, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, AgeUpdateMode, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_00YI, 0x00ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemSpawnSection, 0x00F0);
		}

		// class UMovieSceneNiagaraSystemTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemTrack, 0x0068);
		}

		// class UMovieSceneNiagaraVectorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraVectorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, ChannelsUsed, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_NFPH, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraVectorParameterTrack, 0x0098);
		}

		// class ANiagaraActor : public AActor
		TEST_METHOD(Class__Niagara__NiagaraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, NiagaraComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, UnknownData_PKA6, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraActor, 0x0230);
		}

		// class UNiagaraComponent : public UFXSystemComponent
		TEST_METHOD(Class__Niagara__NiagaraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, Asset, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, TickBehavior, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_79YI, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OverrideParameters, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_IJ1R, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_JWHP, 0x0535);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, MaxTimeBeforeForceUpdateTransform, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_EETZ, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OnSystemFinished, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachParent, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachSocketName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachLocationRule, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachRotationRule, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachScaleRule, 0x0562);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_OVGJ, 0x0563);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponent, 0x05A0);
		}

		// class UNiagaraComponentPool : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, WorldParticleSystemPools, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, UnknownData_AB1W, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentPool, 0x0080);
		}

		// class UNiagaraConvertInPlaceUtilityBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraConvertInPlaceUtilityBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraConvertInPlaceUtilityBase, 0x0028);
		}

		// class UNiagaraDataInterfaceAudioSubmix : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSubmix, Submix, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSubmix, 0x0038);
		}

		// class UNiagaraDataInterfaceAudioOscilloscope : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioOscilloscope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Submix, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Resolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, ScopeInMilliseconds, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioOscilloscope, 0x0040);
		}

		// class UNiagaraDataInterfaceAudioSpectrum : public UNiagaraDataInterfaceAudioSubmix
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSpectrum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, Resolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MinimumFrequency, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MaximumFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, NoiseFloorDb, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSpectrum, 0x0048);
		}

		// class UNiagaraDataInterfaceCamera : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, PlayerControllerIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, UnknownData_8QQX, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCamera, 0x0038);
		}

		// class UNiagaraDataInterfaceCollisionQuery : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCollisionQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCollisionQuery, UnknownData_PUW7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCollisionQuery, 0x0040);
		}

		// class UNiagaraDataInterfaceCurveBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ShaderLUT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMaxTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTInvTimeRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTNumSamplesMinusOne, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_XD0K, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurveBase, 0x0058);
		}

		// class UNiagaraDataInterfaceColorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceColorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, RedCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, GreenCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, BlueCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, AlphaCurve, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceColorCurve, 0x0258);
		}

		// class UNiagaraDataInterfaceCurlNoise : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, Seed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, UnknownData_ETY2, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurlNoise, 0x0040);
		}

		// class UNiagaraDataInterfaceCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurve, Curve, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurve, 0x00D8);
		}

		// class UNiagaraParticleCallbackHandler : public UInterface
		TEST_METHOD(Class__Niagara__NiagaraParticleCallbackHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParticleCallbackHandler, 0x0028);
		}

		// class UNiagaraDataInterfaceExport : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, CallbackHandlerParameter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceExport, 0x0058);
		}

		// class UNiagaraDataInterfaceRWBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRWBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, OutputShaderStages, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, IterationShaderStages, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRWBase, 0x00D0);
		}

		// class UNiagaraDataInterfaceGrid2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsY, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsMaxAxis, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumAttributes, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, SetGridFromMaxAxis, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_47VY, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, WorldBBoxSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_QR0K, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2D, 0x00F0);
		}

		// class UNiagaraDataInterfaceGrid2DCollection : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, UnknownData_M02X, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollection, 0x0140);
		}

		// class UNiagaraDataInterfaceGrid3D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumVoxels, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, VoxelSize, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, SetGridFromVoxelSize, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_YVX7, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, WorldBBoxSize, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3D, 0x00F0);
		}

		// class UNiagaraDataInterfaceNeighborGrid3D : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceNeighborGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, MaxNeighborsPerVoxel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, UnknownData_91WM, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceNeighborGrid3D, 0x00F8);
		}

		// class UNiagaraDataInterfaceOcclusion : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceOcclusion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceOcclusion, 0x0030);
		}

		// class UNiagaraDataInterfaceParticleRead : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceParticleRead)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceParticleRead, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceParticleRead, 0x0040);
		}

		// class UNiagaraDataInterfaceSimpleCounter : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSimpleCounter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSimpleCounter, 0x0030);
		}

		// class UNiagaraDataInterfaceSkeletalMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, Source, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, MeshUserParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceComponent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SkinningMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_RS72, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SamplingRegions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, WholeMeshLOD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_U8E9, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredBones, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredSockets, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, ExcludeBoneName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_11ZY, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSkeletalMesh, 0x00B8);
		}

		// class UNiagaraDataInterfaceSpline : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSpline, Source, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSpline, 0x0038);
		}

		// class UNiagaraDataInterfaceStaticMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, DefaultMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, Source, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceComponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SectionFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_UERJ, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceStaticMesh, 0x0060);
		}

		// class UNiagaraDataInterfaceTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceTexture, Texture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceTexture, 0x0038);
		}

		// class UNiagaraDataInterfaceVector2DCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector2DCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, XCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, YCurve, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector2DCurve, 0x0158);
		}

		// class UNiagaraDataInterfaceVector4Curve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector4Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, XCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, YCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, ZCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, WCurve, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector4Curve, 0x0258);
		}

		// class UNiagaraDataInterfaceVectorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, XCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, YCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, ZCurve, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorCurve, 0x01D8);
		}

		// class UNiagaraDataInterfaceVectorField : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, Field, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileY, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileZ, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, UnknownData_6K32, 0x003B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorField, 0x0040);
		}

		// class UNiagaraDataInterfaceVolumeTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVolumeTexture, Texture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVolumeTexture, 0x0038);
		}

		// class UNiagaraEditorDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEditorDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEditorDataBase, 0x0028);
		}

		// class UNiagaraEffectType : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEffectType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UpdateFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_7XTW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, CullReaction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_05KD, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, DetailLevelScalabilitySettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SystemScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, EmitterScalabilitySettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_800V, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEffectType, 0x0100);
		}

		// class UNiagaraEmitter : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bLocalSpace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bDeterminism, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_TLVY, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RandomSeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, AllocationMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_YU94, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, PreAllocationCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UpdateScriptProps, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnScriptProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EmitterSpawnScriptProps, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EmitterUpdateScriptProps, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimTarget, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_IK27, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, FixedBounds, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MinDetailLevel, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDetailLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GlobalSpawnCountScaleOverrides, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_MO8S, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, Platforms, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, ScalabilityOverrides, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_MZ05, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDeltaTimePerTick, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, DefaultShaderStageIndex, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxUpdateIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnStages, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_ZP0K, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UniqueEmitterName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RendererProperties, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EventHandlerScriptProps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimulationStages, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GPUComputeScript, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SharedEventGeneratorIds, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_MD52, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEmitter, 0x02B0);
		}

		// class UNiagaraEventReceiverEmitterAction : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction, 0x0028);
		}

		// class UNiagaraEventReceiverEmitterAction_SpawnParticles : public UNiagaraEventReceiverEmitterAction
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction_SpawnParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, NumParticles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, UnknownData_S1JU, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, 0x0030);
		}

		// class UNiagaraFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraFunctionLibrary, 0x0028);
		}

		// class UNiagaraRendererProperties : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, SortOrderHint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bIsEnabled, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bMotionBlurEnabled, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, UnknownData_X51K, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRendererProperties, 0x0050);
		}

		// class UNiagaraLightRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraLightRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_JSHV, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorAdd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_76GO, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightRenderingEnabledBinding, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightExponentBinding, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, PositionBinding, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorBinding, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, VolumetricScatteringBinding, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraLightRendererProperties, 0x0338);
		}

		// class UNiagaraMeshRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraMeshRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ParticleMesh, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SortMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_GLYO, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_B3TL, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, OverrideMaterials, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_99ZJ, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, FacingMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_CB9N, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_3YRR, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxis, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxisSpace, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_SOWN, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PositionBinding, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ColorBinding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, VelocityBinding, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MeshOrientationBinding, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ScaleBinding, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageIndexBinding, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterialBinding, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial1Binding, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial2Binding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial3Binding, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaterialRandomBinding, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CustomSortingBinding, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, NormalizedAgeBinding, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CameraOffsetBinding, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMeshRendererProperties, 0x0728);
		}

		// class UNiagaraParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, Collection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, OverridenParameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, ParameterStorage, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollectionInstance, 0x00F8);
		}

		// class UNiagaraParameterCollection : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Namespace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Parameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, DefaultInstance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, CompileId, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollection, 0x0058);
		}

		// class UNiagaraPrecompileContainer : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPrecompileContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, Scripts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, System, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPrecompileContainer, 0x0040);
		}

		// class ANiagaraPreviewBase : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewBase, 0x0220);
		}

		// class UNiagaraPreviewAxis : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis, 0x0028);
		}

		// class UNiagaraPreviewAxis_InterpParamBase : public UNiagaraPreviewAxis
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Param, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Count, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, UnknownData_B2K0, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamBase, 0x0038);
		}

		// class UNiagaraPreviewAxis_InterpParamInt32 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamInt32, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamFloat : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamFloat, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamVector2D : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Max, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector2D, 0x0048);
		}

		// class UNiagaraPreviewAxis_InterpParamVector : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector, 0x0050);
		}

		// class UNiagaraPreviewAxis_InterpParamVector4 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, UnknownData_NRZX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Max, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector4, 0x0060);
		}

		// class UNiagaraPreviewAxis_InterpParamLinearColor : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Max, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamLinearColor, 0x0058);
		}

		// class ANiagaraPreviewGrid : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, System, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, ResetMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_KOJ0, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisY, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingX, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingY, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumY, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewComponents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_7C7V, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewGrid, 0x0270);
		}

		// class UNiagaraRibbonRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraRibbonRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, Material, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialUserParamBinding, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, FacingMode, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_F9RG, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0TilingDistance, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Scale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Offset, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0AgeOffsetMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_PNFA, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1TilingDistance, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Scale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Offset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1AgeOffsetMode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DrawDirection, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_15MP, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, CurveTension, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_0T96, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationFactor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bUseConstantFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_MZZE, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationAngle, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bScreenSpaceTessellation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_YI1E, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, PositionBinding, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, ColorBinding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, VelocityBinding, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, NormalizedAgeBinding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonTwistBinding, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonWidthBinding, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonFacingBinding, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonIdBinding, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonLinkOrderBinding, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialRandomBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterialBinding, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial1Binding, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial2Binding, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial3Binding, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRibbonRendererProperties, 0x0760);
		}

		// class UNiagaraScript : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, Usage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_TS5K, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, RapidIterationParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionParamStore, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionBoundParameters, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVMId, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_QU6C, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVM, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedParameterCollectionReferences, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedDefaultDataInterfaces, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScript, 0x0520);
		}

		// class UNiagaraScriptSourceBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScriptSourceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScriptSourceBase, UnknownData_34Q6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptSourceBase, 0x0048);
		}

		// class UNiagaraSettings : public UDeveloperSettings
		TEST_METHOD(Class__Niagara__NiagaraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalParameterTypes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalPayloadTypes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalParameterEnums, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, QualityLevels, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectTypePtr, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSettings, 0x0098);
		}

		// class UNiagaraSimulationStageBase : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, Script, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, SimulationStageName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageBase, 0x0038);
		}

		// class UNiagaraSimulationStageGeneric : public UNiagaraSimulationStageBase
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, IterationSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_1TEA, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, Iterations, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_KQFW, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, DataInterface, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageGeneric, 0x0070);
		}

		// class UNiagaraSpriteRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraSpriteRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Material, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialUserParamBinding, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Alignment, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, FacingMode, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_H8NU, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PivotInUVSpace, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SortMode, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_8N1U, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_8FT5, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinFacingCameraBlendDistance, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxFacingCameraBlendDistance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_1U8L, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PositionBinding, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, ColorBinding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteRotationBinding, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteSizeBinding, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteFacingBinding, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteAlignmentBinding, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageIndexBinding, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterialBinding, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial1Binding, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial2Binding, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial3Binding, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CameraOffsetBinding, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UVScaleBinding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialRandomBinding, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CustomSortingBinding, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, NormalizedAgeBinding, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_N4RK, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSpriteRendererProperties, 0x08B0);
		}

		// class UNiagaraSystem : public UFXSystemAsset
		TEST_METHOD(Class__Niagara__NiagaraSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_QCRR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugSystemInfo, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugEmitterInfo, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_MEOF, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_XZV2, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bOverrideScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_M9H3, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ScalabilityOverrides, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemScalabilityOverrides, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EmitterHandles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ParameterCollectionOverrides, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemSpawnScript, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemUpdateScript, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_TI9P, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemCompiledData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ExposedParameters, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, FixedBounds, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bAutoDeactivate, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_FVTC, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTime, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickCount, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickDelta, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bHasSystemScriptDIsWithPerInstanceData, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_NDET, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UserDINamesReadInSystemScripts, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_HR4P, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSystem, 0x0478);
		}

		// class UMagicLeapLightingTrackingComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightingTrackingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseGlobalAmbience, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseColorTemp, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UnknownData_EMH6, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightingTrackingComponent, 0x00C0);
		}

		// class UMagicLeapLightEstimationFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightEstimationFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightEstimationFunctionLibrary, 0x0028);
		}

		// class ABP_ThrowingKnife_C : public ABP_ThrowableEquipment_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrowingKnife__BP_ThrowingKnife_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrowingKnife_C, 0x0CD8);
		}

		// class UBP_maulBohemian_MercenaryNail_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maulBohemian_MercenaryNail__BP_maulBohemian_MercenaryNail_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maulBohemian_MercenaryNail_C, 0x0078);
		}

		// class UBP_Estoc_TubularGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Estoc_TubularGuard__BP_Estoc_TubularGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Estoc_TubularGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Estoc_TubularGuard_C, 0x0080);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// class UMockDataMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MRMesh__MockDataMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, OnMeshTrackerUpdated, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, ScanWorld, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestNormals, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestVertexConfidence, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorMode, 0x0203);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_RITV, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, BlockVertexColors, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UpdateInterval, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_AUGZ, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, MRMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_JIQ8, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockDataMeshTrackerComponent, 0x0260);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_DFFE, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bNeverCreateCollisionMesh, 0x0402);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_XTE5, 0x0403);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, CachedBodySetup, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, WireframeMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_M56B, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x0470);
		}

		// class UBP_waraxe_double_CorrodingHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_waraxe_double_CorrodingHead__BP_waraxe_double_CorrodingHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_waraxe_double_CorrodingHead_C, 0x0078);
		}

		// class ABP_WarAxe_C : public ABP_TwoHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WarAxe__BP_WarAxe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WarAxe_C, 0x1C28);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_7CII, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_I9H5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_QKN5, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_BCRJ, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0210);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_93P4, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, InvalidTagCharacters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B8);
		}

		// class UGameplayTagsDeveloperSettings : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0038);
		}

		// class ABP_RockThrowableProper_C : public ABP_ThrowableEquipment_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RockThrowableProper__BP_RockThrowableProper_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RockThrowableProper_C, 0x0CD8);
		}

		// class UBP_ShortPollax_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortPollax__BP_ShortPollax_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortPollax_C, 0x0078);
		}

		// class ABP_2HStick_C : public ABP_BattleAxe_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2HStick__BP_2HStick_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_2HStick_C, 0x1C28);
		}

		// class UBP_RoundShieldParryMotion_C : public UBP_ParryMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RoundShieldParryMotion__BP_RoundShieldParryMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RoundShieldParryMotion_C, 0x0570);
		}

		// class UBP_RoundShield_LeftStrikeMotion_C : public UBP_Shield_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RoundShield_LeftStrikeMotion__BP_RoundShield_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RoundShield_LeftStrikeMotion_C, 0x1160);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_4I6D, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x0078);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_3X2P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0420);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03E8);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0820);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0248);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_AMS5, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x0298);
		}

		// class UToolMenuBase : public UObject
		TEST_METHOD(Class__Slate__ToolMenuBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolMenuBase, 0x0028);
		}

		// class UNiagaraDataInterfaceChaosDestruction : public UNiagaraDataInterface
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceChaosDestruction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosSolverActorSet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSourceType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_YPQM, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataProcessFrequency, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxNumberOfDataEntriesToSpawn, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpawn, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_LNIY, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnMultiplierMinMax, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnChance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ImpulseToSpawnMinMax, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpeedToSpawnMinMax, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MassToSpawnMinMax, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMinToSpawnMinMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMaxToSpawnMinMax, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VolumeToSpawnMinMax, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTimeToSpawnMinMax, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SurfaceTypeToSpawn, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationFilteringMode, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawn, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_V18I, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawnMinMax, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawn, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_5XA7, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawnMinMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawn, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_OENJ, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawnMinMax, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSortingType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalCollisionData, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpatialHash, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_2J6I, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMin, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMax, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeCellSize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxDataPerCell, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bApplyMaterialsFilter, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_LKSU, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosBreakingMaterialSet, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalBreakingData, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalTrailingData, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_OPZ9, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomPositionMagnitudeMinMax, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, InheritedVelocityMultiplier, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityGenerationType, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_UWP9, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityMagnitudeMinMax, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpreadAngleMax, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMin, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMax, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, FinalVelocityMagnitudeMinMax, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxLatency, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DebugType, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_INBP, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnedPointID, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnTime, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_M4Q7, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTime, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, TimeStampOfLastProcessedData, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_KEYJ, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceChaosDestruction, 0x0230);
		}

		// class UNiagaraMergeable : public UObject
		TEST_METHOD(Class__NiagaraCore__NiagaraMergeable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMergeable, 0x0028);
		}

		// class UNiagaraDataInterfaceBase : public UNiagaraMergeable
		TEST_METHOD(Class__NiagaraCore__NiagaraDataInterfaceBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceBase, 0x0028);
		}

		// class UMagicLeapImageTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, TargetImageTexture, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, Name, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, LongerDimension, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bIsStationary, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bUseUnreliablePose, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_B9CE, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetSucceeded, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetFailed, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetFound, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetLost, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetUnreliableTracking, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_AJI5, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerComponent, 0x0270);
		}

		// class UMagicLeapImageTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerFunctionLibrary, 0x0028);
		}

		// class UMultiUserClientStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MultiUserClientLibrary__MultiUserClientStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiUserClientStatics, 0x0028);
		}

		// class UPlayFabAuthenticationContext : public UObject
		TEST_METHOD(Class__PlayFabCommon__PlayFabAuthenticationContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationContext, ClientSessionTicket, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationContext, EntityToken, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationContext, DeveloperSecretKey, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationContext, PlayFabId, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabAuthenticationContext, 0x0068);
		}

		// class UPlayFabRuntimeSettings : public UObject
		TEST_METHOD(Class__PlayFabCommon__PlayFabRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabRuntimeSettings, ProductionEnvironmentURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabRuntimeSettings, TitleId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabRuntimeSettings, DeveloperSecretKey, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabRuntimeSettings, 0x0058);
		}

		// class UBP_Flower01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Flower01__BP_Flower01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Flower01_C, 0x0060);
		}

		// class UBP_Banner01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Banner01__BP_Banner01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Banner01_C, 0x0060);
		}

		// class UBP_WoodColor3_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor3__BP_WoodColor3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor3_C, 0x0078);
		}

		// class UBP_WoodColor15_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor15__BP_WoodColor15_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor15_C, 0x0078);
		}

		// class UBP_WoodColor14_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor14__BP_WoodColor14_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor14_C, 0x0078);
		}

		// class UBP_PlateColor3_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor3__BP_PlateColor3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor3_C, 0x0078);
		}

		// class UBP_PlateColor25_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor25__BP_PlateColor25_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor25_C, 0x0078);
		}

		// class UBP_PlateColor1_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor1__BP_PlateColor1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor1_C, 0x0078);
		}

		// class UBOT_Eliz_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Eliz__BOT_Eliz_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Eliz_C, 0x0108);
		}

		// class UBOT_Seymour_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Seymour__BOT_Seymour_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Seymour_C, 0x0108);
		}

		// class UBOT_ArcherLongbow_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_ArcherLongbow__BOT_ArcherLongbow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_ArcherLongbow_C, 0x0108);
		}

		// class UBOT_ArcherCrossbow_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_ArcherCrossbow__BOT_ArcherCrossbow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_ArcherCrossbow_C, 0x0108);
		}

		// class UBP_Duke_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Duke__BP_Duke_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Duke_C, 0x0060);
		}

		// class UBP_Mordhau2_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Mordhau2__BP_Mordhau2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mordhau2_C, 0x0060);
		}

		// class UBP_HornedHelmet1_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_HornedHelmet1_Banner__BP_HornedHelmet1_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HornedHelmet1_Banner_C, 0x0060);
		}

		// class UBP_Feast_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Feast_Banner__BP_Feast_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Feast_Banner_C, 0x0060);
		}

		// class UBP_Bonfire_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Bonfire_Banner__BP_Bonfire_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bonfire_Banner_C, 0x0060);
		}

		// class UBP_LongBackSweptMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_LongBackSweptMale02__BP_LongBackSweptMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongBackSweptMale02_C, 0x0078);
		}

		// class UBP_ThreePointMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_ThreePointMale02__BP_ThreePointMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ThreePointMale02_C, 0x0078);
		}

		// class UBP_SoulPatch_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_SoulPatch__BP_SoulPatch_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SoulPatch_C, 0x0078);
		}

		// class UBP_LadderAnimationProfile_Fist_C : public UBP_LadderAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LadderAnimationProfile_Fist__BP_LadderAnimationProfile_Fist_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LadderAnimationProfile_Fist_C, 0x00C0);
		}

		// class UBP_ContextPopupInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BP_ContextPopupInterface__BP_ContextPopupInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ContextPopupInterface_C, 0x0028);
		}

		// class UBP_ContextPopup_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ContextPopup__BP_ContextPopup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopup_C, Image_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopup_C, VerticalBox_2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopup_C, Wrapper, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ContextPopup_C, 0x0248);
		}

		// class UBP_ButtonPrompt_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ButtonPrompt__BP_ButtonPrompt_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, HorizontalBox_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Icon, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, IconSizeBox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Overlay_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, PromptText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, TextBlock_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, TextBlock_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, TextSizeBox_Left, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, TextSizeBox_Right, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, DisplayedIcon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Action_Name, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Left_Text, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Right_Text, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Prompt_Icon_Text, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Icon_Size, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Use_Forced_Key_, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, UnknownData_MJOH, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Forced_Key, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Forced_Key_Gamepad, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonPrompt_C, Constantly_Update, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ButtonPrompt_C, 0x03A1);
		}

		// class UBP_BaseDialog_C : public UMordhauDialog
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BaseDialog__BP_BaseDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseDialog_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseDialog_C, BaseButtons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseDialog_C, BaseContent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseDialog_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseDialog_C, TitleTextBlock, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseDialog_C, Session, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseDialog_C, TitleText, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BaseDialog_C, 0x0378);
		}

		// class ABP_DestroyableDeployCover_C : public ABP_DestroyableActor_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DestroyableDeployCover__BP_DestroyableDeployCover_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DestroyableDeployCover_C, 0x0460);
		}

		// class ABP_ToolboxPreventionBox_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_ToolboxPreventionBox__BP_ToolboxPreventionBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolboxPreventionBox_C, Box, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ToolboxPreventionBox_C, 0x0228);
		}

		// class ABP_2HThrowableBase_C : public AMordhauEquipment
		TEST_METHOD(BlueprintGeneratedClass__BP_2HThrowableBase__BP_2HThrowableBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_2HThrowableBase_C, UnknownData_EZIK, 0x0CC8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_2HThrowableBase_C, 0x0CD0);
		}

		// class ABP_FireArrowPit_C : public ABP_DestroyableActor_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FireArrowPit__BP_FireArrowPit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireArrowPit_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireArrowPit_C, Audio, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireArrowPit_C, Area, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireArrowPit_C, P_Fire_Torch, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireArrowPit_C, OverlappingInternal, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireArrowPit_C, LifetimeDuration, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FireArrowPit_C, 0x0494);
		}

		// class ABP_FireSubField_C : public ABP_SubField_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FireSubField__BP_FireSubField_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireSubField_C, UberGraphFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireSubField_C, Decal, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireSubField_C, FadedOutDecal, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FireSubField_C, 0x0269);
		}

		// class UBP_ScoreFeed_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ScoreFeed__BP_ScoreFeed_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, NegativeAnim_917, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, PositiveAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, NegativeAnim, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, Anim, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, FadeAnim, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, Border_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, CollectedPointText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, Line, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, ScrollBox_55, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, VerticalBox_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, CurrentPoints, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, UnknownData_2JS2, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, RandomSuicideTextList, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, RandomKillTextList, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, Entries, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, CurrentPointsText, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreFeed_C, NewPoints, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScoreFeed_C, 0x02DC);
		}

		// class UBP_OneTeamScoreboard_C : public UBP_Scoreboard_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_OneTeamScoreboard__BP_OneTeamScoreboard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, UnknownData_5GFA, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, FadeOut, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, FadeIn, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, Image_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, Image_4, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, Image_6, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, Image_8, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, t1Deaths_Text, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, t1Score_Text, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, Team1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, TextBlock_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, TextBlock_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, TextBlock_3, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, TextBlock_5, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, TextBlock_7, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamScoreboard_C, TextBlock_9, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_OneTeamScoreboard_C, 0x0300);
		}

		// class UBP_Objectives_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Objectives__BP_Objectives_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, FadeIn, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, Goal, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, IconImage, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, Image_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, ObjectiveBorder, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, TeamImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, TextBlock_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, GoalText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, Header_Text, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, Icon, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, Displayed_Team_Image, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, Team_0_Image, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Objectives_C, Team_1_Image, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Objectives_C, 0x0448);
		}

		// class ABP_MordhauVehicle_C : public AMordhauVehicle
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauVehicle__BP_MordhauVehicle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauVehicle_C, 0x0C30);
		}

		// class UAB_BallistaFix_C : public UAdvancedCharacterAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_BallistaFix__AB_BallistaFix_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_Root, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_TransitionResult_5, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_TransitionResult_4, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_TransitionResult_3, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_TransitionResult_2, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_TransitionResult, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_SequencePlayer_2, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_StateResult_3, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_SequencePlayer, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_StateResult_2, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_SequenceEvaluator, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_StateResult, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_StateMachine, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_LocalToComponentSpace, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_ModifyBone_3, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_ComponentToLocalSpace, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_ModifyBone_2, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, AnimGraphNode_ModifyBone, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, State, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, LookUp, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, Turn, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, SpawnTurnValue, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, HasDriverFloat, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_BallistaFix_C, ReloadTime, 0x0A14);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_BallistaFix_C, 0x0A18);
		}

		// class UBP_GameSettings_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GameSettings__BP_GameSettings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, ApplyAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, AmmoCheckbox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, AnnouncementsCheckbox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, ApplyButton, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, ChatBoxCheckbox, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, CombatHintsEntry, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, CrosshairDropdown, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, DrawTracersCheckbox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, EmotesMenuCheckbox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, EquipmentCheckbox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, ForceFeedbackCheckbox, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, FriendlyMarkersDropdown, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, GoreDropdown, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, HeadbobSlider, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, HideHudCheckboxHIDDEN, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, HideWatermarkCheckbox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, HitMarkerCheckbox, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, HoveredSetting, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, Image_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, Image_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, Image_3, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, Image_40, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, KilledByCheckbox, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, KillFeedCheckbox, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, LanguageDropdown, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, MouseSmoothingSlider, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, NoTeamColorsOnGear, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, ObjectivesCheckbox, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, Overlay_2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, QuickSpawnCheckbox, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, RagdollLimitSlider, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, RagdollStayTimeSlider, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, ResetButton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, ScoreFeedCheckbox, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, ShowObservedDelayCheckbox, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, ShowServerOnScoreboard, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, SpawnInfoCheckbox, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, StatusBarCheckbox, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, TargetInfoCheckbox, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, ThirdPersonDeathCameraCheckbox, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, TipsCheckbox, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameSettings_C, TracersStayTimeSlider, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GameSettings_C, 0x0390);
		}

		// class UBP_GameModeEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GameModeEntry__BP_GameModeEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, DeselectAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, SelectAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, InfoHoverAnim, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, HoverAnim, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, BP_Checkbox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, BP_RadialGradient, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, EntryButton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, Image_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, Image_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, Image_4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, Image_5, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, Image_6, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, Image_7, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, InfoButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, ModeName, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, Overlay_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, Overlay_6, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, Overlay_7, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, SizeBox_7, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, TextBlock_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, TextBlock_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, Thumbnail, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, VerticalBox_2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, SelectedStyle, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, DeselectedStyle, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, SelectionChanged, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, bIsSelected, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, UnknownData_RVS3, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, GameModeName, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, ThumbImage, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, InfoText, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, GameModeMetadata, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, ThumbnailOffset, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, ThumbnailScale, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, RibbonText, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, Checkboxes, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, OnHover, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeEntry_C, OverrideGameModeName, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GameModeEntry_C, 0x04B8);
		}

		// class UBP_EquipmentSlotCustomization_C : public UBP_CustomizationTab_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EquipmentSlotCustomization__BP_EquipmentSlotCustomization_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, UnknownData_YW37, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, AdvancedButton, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, AdvancedStats, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, AttackTypeButtons, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, AttackTypeText, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, BackButton, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, BackButton2, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, BasicStats, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Border_1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, BP_AltModeCheckbox, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Button_1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Button_2, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Button_3, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Button_4, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Button_5, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Button_6, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Button_7, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Button_8, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r0c0_bg, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r0c0_text, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r0c1_bg, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r0c1_text, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r0c2_bg, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r0c2_text, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r0c3_bg, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r0c3_text, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r1c0_bg, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r1c0_text, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r1c1_bg, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r1c1_text, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r1c2_bg, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r1c2_text, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r1c3_bg, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r1c3_text, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r2c0_bg, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r2c0_text, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r2c1_bg, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r2c1_text, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r2c2_bg, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r2c2_text, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r2c3_bg, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, cell_r2c3_text, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, CostText, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, DamageBar, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, DamageBarText, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, EntriesTitle, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, EquipmentColorPicker1, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, EquipmentColorPicker2, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, EquipmentColorPicker3, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, GravityScaleText, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, ic_head, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, ic_legs, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, ic_strike, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, ic_thrust, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, ic_torso, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Image_19, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, ItemEntriesBox, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, LengthText, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, lvl0, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, lvl1, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, lvl2, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, lvl3, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, MainWidgetSwitcher, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Overlay_3, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Part1, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Part1Button, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Part1Type, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Part2, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Part2Button, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Part2Type, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Part3, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Part3Button, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Part3Type, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Pattern, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, PickEquipmentButton, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, ProjectileSpeedText, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, ReachBar, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, ReachBarText, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, ScrollBox_4, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Skin, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, SkinButton, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, SpeedBar, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, SpeedBarText, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatControls, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_CanCombo, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_DamageTable, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_FeintCost, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_HeldBlock, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_HitKnockback, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_HitStop, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_Length, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_MaxAmmo, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_MeleeSpeed, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_MissCost, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_MorphCost, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_MovementRestriction, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_ParryNegation, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_ProjectileGravityScale, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_ProjectileSpeed, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_RangedSpeed, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_ShouldFlinch, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_StamDrain, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_StoneDamage, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_TurnCap, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatEntry_WoodDamage, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatsHeaderText, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatsPanel, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StatsWidgetSwitcher, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, StrikeButton, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_1, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_5, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_7, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_8, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_9, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_11, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_14, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_20, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_24, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_26, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_28, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_30, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_33, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_35, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_36, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_37, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_38, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_42, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_44, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_48, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_66, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_74, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_76, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_78, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TextBlock_80, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, ThrustButton, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, TierIconBackground, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, EquipmentIndex, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, HasSkins, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, HasPart1, 0x0775);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, HasPart2, 0x0776);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, HasPart3, 0x0777);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, HasColor1, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, HasColor2, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, HasColor3, 0x077A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, HasPatterns, 0x077B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, UnknownData_VW34, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, EquipmentName, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, Cost, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, IsStrikeButtonActive, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, UnknownData_I02D, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, AdvancedButtonPressed, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, BasicButtonPressed, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, isAltMode, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, UnknownData_7JH1, 0x0C91);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSlotCustomization_C, CurrentlySelectingPartType, 0x0C94);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EquipmentSlotCustomization_C, 0x0C98);
		}

		// class UBP_LoadoutEntry_C : public UBP_CustomizationItemEntry_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LoadoutEntry__BP_LoadoutEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, MovedAnim, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, BannedIndicator, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, ButtonEntry, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, CurrentPoints, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, DownArrow, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, DownButton, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, EquipmentPoints, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, Image_30, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, Index, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, NameText, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, Overlay_8, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, UpArrow, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, UpButton, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, EquipmentClass, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, NotEnoughPoints, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, UnknownData_V8YQ, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, Cost, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, CharacterPointsLeft, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, PointsCost, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, Profile, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, LoadoutPicker, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, UpButtonPosition, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, EditButtonSelectedStyle, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, EditButtonNormalStyle, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, BannedTooltipText, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, HasBannedEquipment, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutEntry_C, HasBannedPerks, 0x08E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LoadoutEntry_C, 0x08EA);
		}

		// class UBP_Plate_Chest2Low_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Plate_Chest2Low__BP_Plate_Chest2Low_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Plate_Chest2Low_C, 0x01A0);
		}

		// class UBP_CoatOfPlatesChestPlate_C : public UBP_Tier2UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CoatOfPlatesChestPlate__BP_CoatOfPlatesChestPlate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CoatOfPlatesChestPlate_C, 0x01E8);
		}

		// class ABP_SmokeField_C : public ABP_MasterField_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmokeField__BP_SmokeField_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SmokeField_C, UberGraphFrame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SmokeField_C, Audio, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SmokeField_C, FieldSpawn4, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SmokeField_C, FieldSpawn3, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SmokeField_C, FieldSpawn2, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SmokeField_C, FieldSpawn1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SmokeField_C, FieldSpawn, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SmokeField_C, ShouldHideEffects, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SmokeField_C, Deactivate, 0x0389);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmokeField_C, 0x038A);
		}

		// class ABP_MordhauPlayerController_C : public AMordhauPlayerController
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauPlayerController__BP_MordhauPlayerController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UberGraphFrame, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, PostProcess, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, BloodOverlayMI, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, HUD, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, FadeToBlackCounter, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_Z38O, 0x0BAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, FadeToBlackCurve, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, OutlineMI, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, DeathMI, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, WantsFadeToBlack, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_DPKG, 0x0BC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, BloodOverlayTarget, 0x0BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, LastAnnouncement, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, LowStaminaVignetteExtra, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, StaminaOverlayTarget, 0x0BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, BaseVignetteAmount, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, StaminaOverlay, 0x0BEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, LowStaminaOverlayCurve, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, LowStaminaGrainExtra, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, SaturationTarget, 0x0BFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, Saturation, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, QueueShowTeamSelect, 0x0C04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_I1VP, 0x0C05);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, ChoiceMenuStack, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, SmokeOverlay, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_TXAC, 0x0C1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, SmokeOverlayMI, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, SmokeOverlayTarget, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_8RKA, 0x0C2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, OnFireOverlayMI, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, OnFireTarget, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, NearFireTarget, 0x0C3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, OnFire, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, NearFire, 0x0C44);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, SpawnedWithToolbox, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_JHR1, 0x0C49);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, QueuedKiller, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, QueuedKillerTime, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_2I8V, 0x0C5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, Ammoboxes, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, ReplicatedAmmoBoxCooldown, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, AmmoBoxesOnCooldown, 0x0C71);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_CFKW, 0x0C72);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, NextAmmoBoxAvailableTime, 0x0C74);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, DisableTeamSelection, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_UI9K, 0x0C79);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, LastForgiveCandidate, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, LastForgiveWasFilteredKill, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_AYX9, 0x0C89);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, LastForgiveDamage, 0x0C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, IsOnMainMenuMap, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_8ZOH, 0x0C91);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, PlaceableArrays, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, BloodOverlaySineTime, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, UnknownData_1GVT, 0x0CEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, PlaceablesMap, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerController_C, EventOnPlaceablesUpdate, 0x0D40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauPlayerController_C, 0x0D50);
		}

		// class ABP_Tier2LegsPickup_C : public ABP_LegsPickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier2LegsPickup__BP_Tier2LegsPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tier2LegsPickup_C, 0x0408);
		}

		// class ABP_KickWeapon_C : public AKickWeapon
		TEST_METHOD(BlueprintGeneratedClass__BP_KickWeapon__BP_KickWeapon_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_KickWeapon_C, 0x1C20);
		}

		// class ABP_SeparatedBodyPart_C : public ASeparatedBodyPart
		TEST_METHOD(BlueprintGeneratedClass__BP_SeparatedBodyPart__BP_SeparatedBodyPart_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SeparatedBodyPart_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SeparatedBodyPart_C, Thudder, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SeparatedBodyPart_C, 0x0348);
		}

		// class UBP_EyeColor3_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor3__BP_EyeColor3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor3_C, 0x0078);
		}

		// class UBP_EyeColor15_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor15__BP_EyeColor15_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor15_C, 0x0078);
		}

		// class UBP_Cloth47_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth47__BP_Cloth47_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth47_C, 0x0078);
		}

		// class UBP_Cloth30_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth30__BP_Cloth30_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth30_C, 0x0078);
		}

		// class UBP_Cloth22_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth22__BP_Cloth22_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth22_C, 0x0078);
		}

		// class UBP_Cloth18_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth18__BP_Cloth18_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth18_C, 0x0078);
		}

		// class UBP_ChoiceDialog_C : public UMordhauDialog
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ChoiceDialog__BP_ChoiceDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceDialog_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceDialog_C, BP_TwoButtonDialog, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceDialog_C, Loading, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceDialog_C, TextBlock_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceDialog_C, WidgetSwitcher_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceDialog_C, LeftButtonClicked, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceDialog_C, RightButtonClicked, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceDialog_C, ChoiceText, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChoiceDialog_C, 0x0290);
		}

		// class UBP_GermanSalletPlumeRaisedRR_C : public UBP_GermanSalletBuffet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletPlumeRaisedRR__BP_GermanSalletPlumeRaisedRR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletPlumeRaisedRR_C, 0x01C8);
		}

		// class UBP_GermanSalletRaisedBevorPlumeRR_C : public UBP_GermanSalletBuffet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletRaisedBevorPlumeRR__BP_GermanSalletRaisedBevorPlumeRR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletRaisedBevorPlumeRR_C, 0x01C8);
		}

		// class UBP_GermanSalletRaisedBevorRR_C : public UBP_GermanSalletBuffet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletRaisedBevorRR__BP_GermanSalletRaisedBevorRR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletRaisedBevorRR_C, 0x01C8);
		}

		// class UBP_GermanSalletMod_C : public UBP_ArmorSkinMod_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletMod__BP_GermanSalletMod_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletMod_C, 0x0038);
		}

		// class UBP_GermanSalletBuffetPlume_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletBuffetPlume__BP_GermanSalletBuffetPlume_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletBuffetPlume_C, 0x01C8);
		}

		// class UBP_GermanSalletBuffet_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletBuffet__BP_GermanSalletBuffet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletBuffet_C, 0x01C8);
		}

		// class UBP_VanguardsKettleOrle_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VanguardsKettleOrle__BP_VanguardsKettleOrle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VanguardsKettleOrle_C, 0x01C8);
		}

		// class UBP_BurgonetNoBuffet_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BurgonetNoBuffet__BP_BurgonetNoBuffet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BurgonetNoBuffet_C, 0x01C8);
		}

		// class UBP_KlappvisierItalianUp_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KlappvisierItalianUp__BP_KlappvisierItalianUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KlappvisierItalianUp_C, 0x01C8);
		}

		// class UBP_ItalianRapier_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ItalianRapier__BP_ItalianRapier_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ItalianRapier_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItalianRapier_C, 0x0080);
		}

		// class UBP_Rapier_StockBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rapier_StockBlade__BP_Rapier_StockBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rapier_StockBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rapier_StockBlade_C, 0x0080);
		}

		// class ABP_Bardiche_C : public ABP_Polearm_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bardiche__BP_Bardiche_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bardiche_C, 0x1C28);
		}

		// class UBP_Bardiche_brute_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bardiche_brute__BP_Bardiche_brute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bardiche_brute_C, 0x0078);
		}

		// class UBP_claymore_HighlanderBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_claymore_HighlanderBlade__BP_claymore_HighlanderBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_claymore_HighlanderBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_claymore_HighlanderBlade_C, 0x0080);
		}

		// class UBP_claymore_TenantsBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_claymore_TenantsBlade__BP_claymore_TenantsBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_claymore_TenantsBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_claymore_TenantsBlade_C, 0x0080);
		}

		// class UBP_Greatsword_AcolyteHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_AcolyteHandle__BP_Greatsword_AcolyteHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Greatsword_AcolyteHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_AcolyteHandle_C, 0x0080);
		}

		// class UBP_Shield_LeftStabMotion_C : public UBP_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shield_LeftStabMotion__BP_Shield_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shield_LeftStabMotion_C, 0x1108);
		}

		// class UBP_Battleaxe_guardian_head01_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Battleaxe_guardian_head01__BP_Battleaxe_guardian_head01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Battleaxe_guardian_head01_C, 0x0078);
		}

		// class UBP_BattleAxe_LongShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BattleAxe_LongShaft__BP_BattleAxe_LongShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BattleAxe_LongShaft_C, 0x0078);
		}

		// class UBP_DukesPoleaxe_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DukesPoleaxe__BP_DukesPoleaxe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DukesPoleaxe_C, 0x0078);
		}

		// class UBP_Poleaxe_SewingSpike_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_SewingSpike__BP_Poleaxe_SewingSpike_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_SewingSpike_C, 0x0078);
		}

		// class UBP_Poleaxe_SnapperHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_SnapperHead__BP_Poleaxe_SnapperHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_SnapperHead_C, 0x0078);
		}

		// class UBP_ArmingSword_CrusaderHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_CrusaderHandle__BP_ArmingSword_CrusaderHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_CrusaderHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_CrusaderHandle_C, 0x0080);
		}

		// class UBP_ArmingSword_StraightGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_StraightGuard__BP_ArmingSword_StraightGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_StraightGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_StraightGuard_C, 0x0080);
		}

		// class UBP_ArmingSword_StraightRainguard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_StraightRainguard__BP_ArmingSword_StraightRainguard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_StraightRainguard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_StraightRainguard_C, 0x0080);
		}

		// class UBP_Zweihander_CoilGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Zweihander_CoilGuard__BP_Zweihander_CoilGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Zweihander_CoilGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Zweihander_CoilGuard_C, 0x0080);
		}

		// class UBP_ZweihanderCommander_EasternBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ZweihanderCommander_EasternBlade__BP_ZweihanderCommander_EasternBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ZweihanderCommander_EasternBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ZweihanderCommander_EasternBlade_C, 0x0080);
		}

		// class ABP_ThrownSpinningProjectile_C : public ABP_ThrownWeaponProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownSpinningProjectile__BP_ThrownSpinningProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownSpinningProjectile_C, 0x07D0);
		}

		// class UBP_Castello64Override_C : public UMapMetadataOverride
		TEST_METHOD(BlueprintGeneratedClass__BP_Castello64Override__BP_Castello64Override_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Castello64Override_C, 0x0098);
		}

		// class UBP_2HSword_RightStrikeMotion_C : public UBP_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2HSword_RightStrikeMotion__BP_2HSword_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2HSword_RightStrikeMotion_C, 0x1160);
		}

		// class UBP_Emblem_Clocktower_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Clocktower__BP_Emblem_Clocktower_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Clocktower_C, 0x0060);
		}

		// class UBP_Emblem_Wingedskull_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Wingedskull__BP_Emblem_Wingedskull_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Wingedskull_C, 0x0060);
		}

		// class UBP_LeatherColor29_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor29__BP_LeatherColor29_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor29_C, 0x0078);
		}

		// class UBP_LeatherColor28_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor28__BP_LeatherColor28_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor28_C, 0x0078);
		}

		// class UBP_LeatherColor26_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor26__BP_LeatherColor26_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor26_C, 0x0078);
		}

		// class UBOT_SpearInfantry_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_SpearInfantry__BOT_SpearInfantry_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_SpearInfantry_C, 0x0108);
		}

		// class UBOT_Halbedier_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Halbedier__BOT_Halbedier_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Halbedier_C, 0x0108);
		}

		// class ABP_BloodSplash_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_BloodSplash__BP_BloodSplash_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodSplash_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodSplash_C, ParticleSystem, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BloodSplash_C, 0x0230);
		}

		// class UBTTask_FindUnstuckSpot_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_FindUnstuckSpot__BTTask_FindUnstuckSpot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindUnstuckSpot_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindUnstuckSpot_C, TargetLocation, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FindUnstuckSpot_C, 0x00D8);
		}

		// class UBTTask_FindRandomLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_FindRandomLocation__BTTask_FindRandomLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindRandomLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindRandomLocation_C, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindRandomLocation_C, EnemyPositions, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FindRandomLocation_C, 0x00E8);
		}

		// class UBTService_DMPerceptionUpdate_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTService_DMPerceptionUpdate__BTService_DMPerceptionUpdate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DMPerceptionUpdate_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DMPerceptionUpdate_C, bPerceivesEnemy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DMPerceptionUpdate_C, ClosestEnemyDistance, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DMPerceptionUpdate_C, 0x00F0);
		}

		// class UBP_ServerBrowserEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ServerBrowserEntry__BP_ServerBrowserEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, CurrentPlayers, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, FavoriteButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, GameMode, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, ic_locked, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, IC_triternion, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, ic_wrench, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, Map, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, MaxPlayers, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, Ping, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, Row, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, ServerName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, Slash, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, Session, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, DeselectedStyle, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, SelectedStyle, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowserEntry_C, LastClick, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ServerBrowserEntry_C, 0x04C0);
		}

		// class ABP_MissileEquipment_C : public AMordhauEquipment
		TEST_METHOD(BlueprintGeneratedClass__BP_MissileEquipment__BP_MissileEquipment_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MissileEquipment_C, UnknownData_WFK6, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MissileEquipment_C, Missile, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MissileEquipment_C, 0x0CD8);
		}

		// class ABP_1411Gun_C : public ABP_MissileEquipment_C
		TEST_METHOD(BlueprintGeneratedClass__BP_1411Gun__BP_1411Gun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_1411Gun_C, 0x0CD8);
		}

		// class ABP_DeployableBallista_C : public ABP_MordhauVehicle_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DeployableBallista__BP_DeployableBallista_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallista_C, UberGraphFrame, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallista_C, MoveSound, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallista_C, ProjectileTurretShooter, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallista_C, Bolt, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallista_C, LoadingSound, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallista_C, LastTurnSound, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallista_C, InitialRegeneration, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallista_C, UnknownData_894B, 0x0C61);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallista_C, FireEffectParticleComponent, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallista_C, FireEffectAudioComponent, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallista_C, Builder, 0x0C78);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DeployableBallista_C, 0x0C80);
		}

		// class UBP_MordhauEquipmentPart_C : public UMordhauEquipmentPart
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauEquipmentPart__BP_MordhauEquipmentPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MordhauEquipmentPart_C, 0x0078);
		}

		// class UBP_DemoUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_DemoUI__BP_DemoUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DemoUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DemoUI_C, Button_4, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DemoUI_C, LessSpeed, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DemoUI_C, MoreSpeed, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DemoUI_C, Slider_34, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DemoUI_C, TextBlock_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DemoUI_C, TextBlock_4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DemoUI_C, HoldingTimeline, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DemoUI_C, UnknownData_DR1R, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DemoUI_C, CurrentTimeDilation, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DemoUI_C, 0x0270);
		}

		// class UBP_Chops_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Chops__BP_Chops_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Chops_C, 0x0078);
		}

		// class UBP_BigMoustache_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_BigMoustache__BP_BigMoustache_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BigMoustache_C, 0x0078);
		}

		// class UBP_NavArea_Team1Only_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__BP_NavArea_Team1Only__BP_NavArea_Team1Only_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavArea_Team1Only_C, 0x0048);
		}

		// class UBP_VisoredFlatTop_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VisoredFlatTop__BP_VisoredFlatTop_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VisoredFlatTop_C, 0x01C8);
		}

		// class UBP_VeteransHelm_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransHelm__BP_VeteransHelm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransHelm_C, 0x01C8);
		}

		// class UBP_ChainCoifHead_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainCoifHead__BP_ChainCoifHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainCoifHead_C, 0x01C8);
		}

		// class UBP_ArmingSword_CommonHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_CommonHandle__BP_ArmingSword_CommonHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_CommonHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_CommonHandle_C, 0x0080);
		}

		// class UBP_VikingSword_SerpentBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingSword_SerpentBlade__BP_VikingSword_SerpentBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VikingSword_SerpentBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingSword_SerpentBlade_C, 0x0080);
		}

		// class UBP_BastardSword_WiredHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword_WiredHandle__BP_BastardSword_WiredHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BastardSword_WiredHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BastardSword_WiredHandle_C, 0x0080);
		}

		// class UBP_SkirmishGameModeMetadata_C : public UGameModeMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_SkirmishGameModeMetadata__BP_SkirmishGameModeMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SkirmishGameModeMetadata_C, 0x00D0);
		}

		// class UAnimNotify_PlayNiagaraEffect : public UAnimNotify
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotify_PlayNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Template, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_KIU6, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_SBJS, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_14SS, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayNiagaraEffect, 0x0090);
		}

		// class UAnimNotifyState_TimedNiagaraEffect : public UAnimNotifyState
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotifyState_TimedNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, Template, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, UnknownData_AVO5, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedNiagaraEffect, 0x0060);
		}

		// class UMagicLeapPlanesComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryFlags, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SearchVolume, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MaxResults, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinHolePerimeter, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinPlaneArea, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryType, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_OH9G, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SimilarityThreshold, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_A33Z, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPlanesQueryResult, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPersistentPlanesQueryResult, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_H1R1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesComponent, 0x0260);
		}

		// class UMagicLeapPlanesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesFunctionLibrary, 0x0028);
		}

		// class UBP_CuirassierLegs_C : public UBP_Tier2LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CuirassierLegs__BP_CuirassierLegs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CuirassierLegs_C, 0x01B8);
		}

		// class ABP_ThrownMaceProjectile_PickAxe_C : public ABP_ThrownSpinningProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownMaceProjectile_PickAxe__BP_ThrownMaceProjectile_PickAxe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownMaceProjectile_PickAxe_C, 0x07D0);
		}

		// class ABP_PaviseShield_C : public ABP_MordhauShield_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PaviseShield__BP_PaviseShield_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, UberGraphFrame, 0x1C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, BuildingSystem, 0x1C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, MovementBlocker, 0x1C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, PlanterController, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, ReceivedDamage, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, DamageToDestroy, 0x1C6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, ParryMaskUnplanted, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, ParryMaskPlanted, 0x1C74);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, PlanterCharacter, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, DestroySound, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, PlaceableArrayName, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PaviseShield_C, MaxPlaceables, 0x1C90);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PaviseShield_C, 0x1C94);
		}

		// class ABP_Polehammer_C : public ABP_Polearm_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer__BP_Polehammer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Polehammer_C, 0x1C28);
		}

		// class ABP_Corseca_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Corseca__BP_Corseca_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Corseca_C, 0x1C28);
		}

		// class UBP_Polehammer_Spike1_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Spike1__BP_Polehammer_Spike1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Spike1_C, 0x0078);
		}

		// class UBP_Polehammer_Shaft1_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Shaft1__BP_Polehammer_Shaft1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Shaft1_C, 0x0078);
		}

		// class UBP_Polehammer_Head3_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Head3__BP_Polehammer_Head3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Head3_C, 0x0078);
		}

		// class UStaticMeshDescription : public UMeshDescriptionBase
		TEST_METHOD(Class__StaticMeshDescription__StaticMeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescription, 0x0390);
		}

		// class UBP_HairColor11_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor11__BP_HairColor11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor11_C, 0x0078);
		}

		// class UBP_HairColor10_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor10__BP_HairColor10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor10_C, 0x0078);
		}

		// class UBP_HairColor1_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor1__BP_HairColor1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor1_C, 0x0078);
		}

		// class UBP_EyeColor8_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor8__BP_EyeColor8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor8_C, 0x0078);
		}

		// class UBP_Yield2_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Yield2__BP_Yield2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Yield2_C, 0x0130);
		}

		// class UBP_ThumbsUp_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_ThumbsUp__BP_ThumbsUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ThumbsUp_C, 0x0130);
		}

		// class UBP_InformalBow_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_InformalBow__BP_InformalBow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InformalBow_C, 0x0130);
		}

		// class UBP_EmoteComeAtMe_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_EmoteComeAtMe__BP_EmoteComeAtMe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EmoteComeAtMe_C, 0x0130);
		}

		// class UBP_Fists_RightStrikeMotion_C : public UBP_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Fists_RightStrikeMotion__BP_Fists_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Fists_RightStrikeMotion_C, 0x1160);
		}

		// class ABP_FireBombProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FireBombProjectile__BP_FireBombProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireBombProjectile_C, UnknownData_94NJ, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireBombProjectile_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FireBombProjectile_C, 0x07D0);
		}

		// class UBP_CircleTimer_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CircleTimer__BP_CircleTimer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircleTimer_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircleTimer_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircleTimer_C, Dynamic_Material_Instance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircleTimer_C, Duration, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircleTimer_C, Timer_Active, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircleTimer_C, UnknownData_M0LF, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircleTimer_C, Time, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircleTimer_C, Percentage, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircleTimer_C, Brush, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CircleTimer_C, 0x02E0);
		}

		// class UBP_ChainPads_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainPads__BP_ChainPads_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainPads_C, 0x01A0);
		}

		// class ABP_DestroyableActor_C : public ABP_MordhauActor_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DestroyableActor__BP_DestroyableActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, Damageable, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DamageAudioOrigin, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DamageParticleTransform, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, StaticMesh, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, Health, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, MaxHealth, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DamageFactor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, ReplicatedHealth, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, UnknownData_176Y, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DamageMeshes, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DamageMeshesHealth, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DeleteWhenDestroyed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DisableCollisionWhenDestroyed, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, UnknownData_HLDK, 0x03DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DamageMeshChangeParticle, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, SpawnHealth, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, LastReplicatedHealth, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, Regenerating, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, UnknownData_IQRW, 0x03EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, RegenTick, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, RegenPerTick, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, CurrentRegeneratingSound, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, RegenStartDelay, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, UnknownData_UH5U, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, RegeneratingSoundCue, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, StopRegeneratingOnDamage, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, MaxHealthRepairableTo, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, AutoResumeRegenerating, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, Repairable, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, RepairableHealthSegments, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, UnknownData_ASWK, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DamageStateChangeSound, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, RepairStateChangeSound, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, OwningTeam, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, UnknownData_JJTB, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, RepairScoreMax, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DamageScoreMax, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DestroysOtherWhenUpgrading, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, UnknownData_OGP6, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, RepairFactor, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, PerformsUnstuckProcess, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, UnknownData_9R1S, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, LastHealthChangeInstigator, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableActor_C, DisplayName, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DestroyableActor_C, 0x0460);
		}

		// class ABP_Door_C : public ABP_DestroyableActor_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Door__BP_Door_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, Audio, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, DoorState, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, UnknownData_1G3S, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, SmoothedDoorRotation, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, SmoothedDoorRotationTarget, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, SmoothedDoorRotationSpeed, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, DoorYawOpenForward, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, DoorYawOpenBackward, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, DoorYawClosed, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, DoorOpenSpeed, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, DoorCloseSpeed, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, DoorOpenSpeedFast, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, LastCompletedDoorState, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, StartingState, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, CanBeKickedOpen, 0x049A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, UnknownData_TXA8, 0x049B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, FastOpenStart, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, ObjectsThatPreventMovement, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, UseSound, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, CloseSound, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, HasBegunPlay, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, UnknownData_Q25G, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, FastOpenStopSound, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, CanOpenForwards, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, CanOpenBackwards, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, UnknownData_45MH, 0x04D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, Kicker, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, LastAIInteractTime, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Door_C, WillRagdoll, 0x04E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Door_C, 0x04E5);
		}

		// class UBOTBEHAVIOR_Ranged_C : public UBP_BotBehaviorProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOTBEHAVIOR_Ranged__BOTBEHAVIOR_Ranged_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOTBEHAVIOR_Ranged_C, 0x00E0);
		}

		// class UBP_HussarArms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarArms__BP_HussarArms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarArms_C, 0x01B8);
		}

		// class UBP_SegmentedGauntletsFanned_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SegmentedGauntletsFanned__BP_SegmentedGauntletsFanned_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SegmentedGauntletsFanned_C, 0x01A0);
		}

		// class UBP_SegmentedGauntletsBasic_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SegmentedGauntletsBasic__BP_SegmentedGauntletsBasic_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SegmentedGauntletsBasic_C, 0x01A0);
		}

		// class UBP_NordicSkirt_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NordicSkirt__BP_NordicSkirt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NordicSkirt_C, 0x01A0);
		}

		// class ABP_SmokeSubField_C : public ABP_SubField_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmokeSubField__BP_SmokeSubField_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmokeSubField_C, 0x0258);
		}

		// class UBP_HussarHelmet_full_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarHelmet_full__BP_HussarHelmet_full_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarHelmet_full_C, 0x01C8);
		}

		// class UBP_Vaalsgarde_ear_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Vaalsgarde_ear__BP_Vaalsgarde_ear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Vaalsgarde_ear_C, 0x01C8);
		}

		// class UBP_ArchersHatFeathered_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArchersHatFeathered__BP_ArchersHatFeathered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArchersHatFeathered_C, 0x01C8);
		}

		// class UBP_PointyTemplar_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PointyTemplar__BP_PointyTemplar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PointyTemplar_C, 0x01C8);
		}

		// class UBP_FlatTop_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlatTop__BP_FlatTop_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlatTop_C, 0x01C8);
		}

		// class UBP_Mace_MorningStarHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Mace_MorningStarHead__BP_Mace_MorningStarHead_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Mace_MorningStarHead_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mace_MorningStarHead_C, 0x0080);
		}

		// class ABP_ThrownMaceProjectile_C : public ABP_ThrownSpinningProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownMaceProjectile__BP_ThrownMaceProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownMaceProjectile_C, 0x07D0);
		}

		// class UBP_ContextPopupWrapper_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ContextPopupWrapper__BP_ContextPopupWrapper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_C, Button_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_C, CanvasPanel_Wrapper, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_C, MenuAnchor_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_C, Context_Popup, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_C, Options, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_C, ContextButtonClicked, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_C, Context_Button_Option_Map, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ContextPopupWrapper_C, 0x02C8);
		}

		// class UBP_Greatsword_IronRodGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_IronRodGuard__BP_Greatsword_IronRodGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Greatsword_IronRodGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_IronRodGuard_C, 0x0080);
		}

		// class UBP_Greatsword_SeasidesteelBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_SeasidesteelBlade__BP_Greatsword_SeasidesteelBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Greatsword_SeasidesteelBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_SeasidesteelBlade_C, 0x0080);
		}

		// class UBP_BastardSword_EerieHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword_EerieHandle__BP_BastardSword_EerieHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BastardSword_EerieHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BastardSword_EerieHandle_C, 0x0080);
		}

		// class ABP_BastardSword_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword__BP_BastardSword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BastardSword_C, 0x1C28);
		}

		// class UBP_KastenBurstChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KastenBurstChest__BP_KastenBurstChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KastenBurstChest_C, 0x01E8);
		}

		// class UBP_CrudeChausses_C : public UBP_Tier3LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CrudeChausses__BP_CrudeChausses_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CrudeChausses_C, 0x01B8);
		}

		// class UBP_CalfGuardHosen_C : public UBP_Tier2LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CalfGuardHosen__BP_CalfGuardHosen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CalfGuardHosen_C, 0x01B8);
		}

		// class UBP_mjolnir_maul_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_mjolnir_maul__BP_mjolnir_maul_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_mjolnir_maul_C, 0x0078);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// class UBP_PavisePart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PavisePart__BP_PavisePart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PavisePart_C, 0x0078);
		}

		// class UBP_cleaverHunter_grip1_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_cleaverHunter_grip1__BP_cleaverHunter_grip1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_cleaverHunter_grip1_C, 0x0078);
		}

		// class UBP_cleaver_KleinesMesser_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_cleaver_KleinesMesser__BP_cleaver_KleinesMesser_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_cleaver_KleinesMesser_C, 0x0078);
		}

		// class UBP_MedicBagPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MedicBagPart__BP_MedicBagPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MedicBagPart_C, 0x0078);
		}

		// class UMagicLeapIdentity : public UObject
		TEST_METHOD(Class__MagicLeapIdentity__MagicLeapIdentity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapIdentity, UnknownData_GC8B, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapIdentity, 0x0038);
		}

		// class UBP_Reginald_C : public UCharacterVoice
		TEST_METHOD(BlueprintGeneratedClass__BP_Reginald__BP_Reginald_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Reginald_C, 0x00A0);
		}

		// class UBP_StunPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_StunPerk__BP_StunPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StunPerk_C, 0x0068);
		}

		// class UBP_MulePerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MulePerk__BP_MulePerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MulePerk_C, 0x0068);
		}

		// class UBP_FuryPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FuryPerk__BP_FuryPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FuryPerk_C, 0x0068);
		}

		// class UBP_ButcherPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ButcherPerk__BP_ButcherPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ButcherPerk_C, 0x0068);
		}

		// class UBP_Emblem_Masks_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Masks__BP_Emblem_Masks_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Masks_C, 0x0060);
		}

		// class UBP_Battle3_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Battle3_Banner__BP_Battle3_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Battle3_Banner_C, 0x0060);
		}

		// class UBP_MetalDetailColor8_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor8__BP_MetalDetailColor8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor8_C, 0x0078);
		}

		// class UBP_MetalDetailColor11_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor11__BP_MetalDetailColor11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor11_C, 0x0078);
		}

		// class UBP_MetalDetailColor10_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor10__BP_MetalDetailColor10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor10_C, 0x0078);
		}

		// class UBP_Short1Male01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Short1Male01__BP_Short1Male01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Short1Male01_C, 0x0078);
		}

		// class UBP_MonkCutMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_MonkCutMale01__BP_MonkCutMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MonkCutMale01_C, 0x0078);
		}

		// class UBP_ThreePointMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_ThreePointMale01__BP_ThreePointMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ThreePointMale01_C, 0x0078);
		}

		// class UBP_Stubble4Male01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Stubble4Male01__BP_Stubble4Male01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Stubble4Male01_C, 0x0078);
		}

		// class UBP_FistsParryMotion_C : public UBP_ParryMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FistsParryMotion__BP_FistsParryMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FistsParryMotion_C, 0x0570);
		}

		// class UBP_LadderFists_RightStrikeMotion_C : public UBP_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LadderFists_RightStrikeMotion__BP_LadderFists_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LadderFists_RightStrikeMotion_C, 0x1160);
		}

		// class UDefault1411_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__Default1411__Default1411_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefault1411_C, 0x0078);
		}

		// class UBP_Italian_pauldrons1x1_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Italian_pauldrons1x1__BP_Italian_pauldrons1x1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Italian_pauldrons1x1_C, 0x01A0);
		}

		// class ABP_MissileProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MissileProjectile__BP_MissileProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MissileProjectile_C, 0x07C4);
		}

		// class UBP_2HSwordParryMotion_C : public UBP_ParryMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2HSwordParryMotion__BP_2HSwordParryMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2HSwordParryMotion_C, 0x0570);
		}

		// class UBP_VeteransArmoredGloves_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransArmoredGloves__BP_VeteransArmoredGloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransArmoredGloves_C, 0x01A0);
		}

		// class UBP_KettleSallet_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KettleSallet__BP_KettleSallet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KettleSallet_C, 0x01C8);
		}

		// class UBP_BlackSalletCovered_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BlackSalletCovered__BP_BlackSalletCovered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlackSalletCovered_C, 0x01C8);
		}

		// class UBP_ClothCoif_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ClothCoif__BP_ClothCoif_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ClothCoif_C, 0x01A0);
		}

		// class UBP_ShortSwordTaperedBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortSwordTaperedBlade__BP_ShortSwordTaperedBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortSwordTaperedBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortSwordTaperedBlade_C, 0x0080);
		}

		// class UBP_ShortSwordTownsmansHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortSwordTownsmansHandle__BP_ShortSwordTownsmansHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortSwordTownsmansHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortSwordTownsmansHandle_C, 0x0080);
		}

		// class UBP_ShortSwordWrappedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortSwordWrappedHandle__BP_ShortSwordWrappedHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortSwordWrappedHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortSwordWrappedHandle_C, 0x0080);
		}

		// class UBP_SunRaySpear_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SunRaySpear__BP_SunRaySpear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SunRaySpear_C, 0x0078);
		}

		// class UBP_SwordStaff_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SwordStaff__BP_SwordStaff_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SwordStaff_C, 0x0078);
		}

		// class UBP_CrudeCuirass_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CrudeCuirass__BP_CrudeCuirass_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CrudeCuirass_C, 0x01E8);
		}

		// class UBP_ElizabethianLegs_C : public UBP_Tier3LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ElizabethianLegs__BP_ElizabethianLegs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ElizabethianLegs_C, 0x01B8);
		}

		// class UBP_VeteransCuisses_C : public UBP_Tier3LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransCuisses__BP_VeteransCuisses_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransCuisses_C, 0x01B8);
		}

		// class UBP_Falx_basic_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Falx_basic__BP_Falx_basic_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Falx_basic_C, 0x0078);
		}

		// class UBP_HoodLowered_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HoodLowered__BP_HoodLowered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HoodLowered_C, 0x01A0);
		}

		// class UBP_VeteransBasicGorget_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransBasicGorget__BP_VeteransBasicGorget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransBasicGorget_C, 0x01A0);
		}

		// class UBP_MailleHoodSpikedLoweredCoif_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MailleHoodSpikedLoweredCoif__BP_MailleHoodSpikedLoweredCoif_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MailleHoodSpikedLoweredCoif_C, 0x01A0);
		}

		// class UBP_LinedAventailBascinets_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LinedAventailBascinets__BP_LinedAventailBascinets_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LinedAventailBascinets_C, 0x01A0);
		}

		// class UBP_ColorPickerElement_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ColorPickerElement__BP_ColorPickerElement_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, Border, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, ImageButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, lock, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, Overlay_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, RankText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, SizeBox_13659, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, Parent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, Index, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, HoverBorderColor, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, NormalBorderColor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, SelectedBorderColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, UnknownData_DSS4, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, Color_Name, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, Locked, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, UnknownData_41K6, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerElement_C, Tooltip, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ColorPickerElement_C, 0x02E0);
		}

		// class UBP_Emblem_Chimera_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Chimera__BP_Emblem_Chimera_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Chimera_C, 0x0060);
		}

		// class UBP_Triskel02_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Triskel02__BP_Triskel02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Triskel02_C, 0x0060);
		}

		// class UBP_Triskel01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Triskel01__BP_Triskel01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Triskel01_C, 0x0060);
		}

		// class UBP_Templar02_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Templar02__BP_Templar02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Templar02_C, 0x0060);
		}

		// class ABP_PushModeInfo_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_PushModeInfo__BP_PushModeInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PushModeInfo_C, DefaultSceneRoot, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PushModeInfo_C, AttackingTeam, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PushModeInfo_C, UnknownData_AV1A, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PushModeInfo_C, InitialTime, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PushModeInfo_C, 0x0230);
		}

		// class UBP_messer_SwissSaber_grip3_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_SwissSaber_grip3__BP_messer_SwissSaber_grip3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_SwissSaber_grip3_C, 0x0078);
		}

		// class UBP_2hmace_BruteHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2hmace_BruteHead__BP_2hmace_BruteHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2hmace_BruteHead_C, 0x0078);
		}

		// class UBP_Billhook_ArmyHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Billhook_ArmyHead__BP_Billhook_ArmyHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Billhook_ArmyHead_C, 0x0078);
		}

		// class ABP_ThrownTargeProjectile_C : public ABP_ThrownSpinningProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownTargeProjectile__BP_ThrownTargeProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownTargeProjectile_C, 0x07D0);
		}

		// class UBP_TargeShieldPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TargeShieldPart__BP_TargeShieldPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TargeShieldPart_C, 0x0078);
		}

		// class ABP_ThrownBucklerProjectile_C : public ABP_ThrownSpinningProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownBucklerProjectile__BP_ThrownBucklerProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownBucklerProjectile_C, 0x07D0);
		}

		// class UBP_ShieldAnimationProfile_C : public UBP_MeleeWeaponAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShieldAnimationProfile__BP_ShieldAnimationProfile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShieldAnimationProfile_C, 0x00C0);
		}

		// class UBP_maul_RobustHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maul_RobustHandle__BP_maul_RobustHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maul_RobustHandle_C, 0x0078);
		}

		// class UDefaultRecurve_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__DefaultRecurve__DefaultRecurve_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultRecurve_C, 0x0078);
		}

		// class UBP_Emblem_OT_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_OT__BP_Emblem_OT_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_OT_C, 0x0060);
		}

		// class UBP_Emblem_Monarchs_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Monarchs__BP_Emblem_Monarchs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Monarchs_C, 0x0060);
		}

		// class UBP_LamellarShoulders_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LamellarShoulders__BP_LamellarShoulders_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LamellarShoulders_C, 0x01A0);
		}

		// class UBP_ArmetPoint_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmetPoint__BP_ArmetPoint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmetPoint_C, 0x01C8);
		}

		// class UBP_crucifixDagger_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_crucifixDagger__BP_crucifixDagger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_crucifixDagger_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_crucifixDagger_C, 0x0080);
		}

		// class UBP_CampAltOverride_C : public UMapMetadataOverride
		TEST_METHOD(BlueprintGeneratedClass__BP_CampAltOverride__BP_CampAltOverride_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CampAltOverride_C, 0x0098);
		}

		// class UBP_ChainCoat_C : public UBP_Tier2UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainCoat__BP_ChainCoat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainCoat_C, 0x01E8);
		}

		// class UBP_CheckeredGambeson_C : public UBP_Tier1UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CheckeredGambeson__BP_CheckeredGambeson_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CheckeredGambeson_C, 0x01E8);
		}

		// class UBP_CorsescaRaphaeliteBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CorsescaRaphaeliteBlade__BP_CorsescaRaphaeliteBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CorsescaRaphaeliteBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CorsescaRaphaeliteBlade_C, 0x0080);
		}

		// class UBP_CorsescaLanguetsHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CorsescaLanguetsHandle__BP_CorsescaLanguetsHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CorsescaLanguetsHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CorsescaLanguetsHandle_C, 0x0080);
		}

		// class UBP_CorsescaIronWrappedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CorsescaIronWrappedHandle__BP_CorsescaIronWrappedHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CorsescaIronWrappedHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CorsescaIronWrappedHandle_C, 0x0080);
		}

		// class ABP_ThrownSpearProjectile_Corseca_C : public ABP_ThrownSpearProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownSpearProjectile_Corseca__BP_ThrownSpearProjectile_Corseca_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownSpearProjectile_Corseca_C, 0x07D0);
		}

		// class UBP_KnightPauldrons2x2_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KnightPauldrons2x2__BP_KnightPauldrons2x2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KnightPauldrons2x2_C, 0x01A0);
		}

		// class UBP_VeteransCuissesBasic_C : public UBP_Tier3LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransCuissesBasic__BP_VeteransCuissesBasic_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransCuissesBasic_C, 0x01B8);
		}

		// class UBP_LegsWearable_C : public ULegsWearable
		TEST_METHOD(BlueprintGeneratedClass__BP_LegsWearable__BP_LegsWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LegsWearable_C, 0x01B8);
		}

		// class UBP_CheckeredGambesonArms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CheckeredGambesonArms__BP_CheckeredGambesonArms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CheckeredGambesonArms_C, 0x01B8);
		}

		// class UBP_Estoc_HeronBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Estoc_HeronBlade__BP_Estoc_HeronBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Estoc_HeronBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Estoc_HeronBlade_C, 0x0080);
		}

		// class UBP_Estoc_FacetedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Estoc_FacetedHandle__BP_Estoc_FacetedHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Estoc_FacetedHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Estoc_FacetedHandle_C, 0x0080);
		}

		// class UBP_MailleHoodCoif_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MailleHoodCoif__BP_MailleHoodCoif_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MailleHoodCoif_C, 0x01A0);
		}

		// class UBP_Gambeson_ArmsTight_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Gambeson_ArmsTight__BP_Gambeson_ArmsTight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gambeson_ArmsTight_C, 0x01B8);
		}

		// class UBP_WorkersSkirt_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WorkersSkirt__BP_WorkersSkirt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WorkersSkirt_C, 0x01A0);
		}

		// class UBP_Cloth_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth_Arms__BP_Cloth_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth_Arms_C, 0x01B8);
		}

		// class UBP_ChainShoes_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainShoes__BP_ChainShoes_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainShoes_C, 0x01A0);
		}

		// class UBP_Emblem_Exemplar_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Exemplar__BP_Emblem_Exemplar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Exemplar_C, 0x0060);
		}

		// class UBP_Emblem_Wavysun_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Wavysun__BP_Emblem_Wavysun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Wavysun_C, 0x0060);
		}

		// class UBP_Banner02_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Banner02__BP_Banner02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Banner02_C, 0x0060);
		}

		// class UBP_WoodColor7_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor7__BP_WoodColor7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor7_C, 0x0078);
		}

		// class UBP_WoodColor6_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor6__BP_WoodColor6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor6_C, 0x0078);
		}

		// class UBP_WoodColor2_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor2__BP_WoodColor2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor2_C, 0x0078);
		}

		// class UBP_WoodColor17_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor17__BP_WoodColor17_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor17_C, 0x0078);
		}

		// class UBP_LeatherColor31_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor31__BP_LeatherColor31_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor31_C, 0x0078);
		}

		// class UBP_LeatherColor30_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor30__BP_LeatherColor30_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor30_C, 0x0078);
		}

		// class UBP_LeatherColor3_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor3__BP_LeatherColor3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor3_C, 0x0078);
		}

		// class UBP_LeatherColor27_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor27__BP_LeatherColor27_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor27_C, 0x0078);
		}

		// class UBP_Cloth48_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth48__BP_Cloth48_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth48_C, 0x0078);
		}

		// class UOnlineUtilities : public UObject
		TEST_METHOD(Class__MordhauOnlineSubsystem__OnlineUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineUtilities, 0x0028);
		}

		// class UPlayFabAPI : public UObject
		TEST_METHOD(Class__MordhauOnlineSubsystem__PlayFabAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAPI, UnknownData_BORQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAPI, OnGetLeaderboardComplete, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAPI, UnknownData_NBDK, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabAPI, 0x0790);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// class UMeshDescriptionBase : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescriptionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshDescriptionBase, UnknownData_O9DZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescriptionBase, 0x0390);
		}

		// class UEditableMeshAdapter : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0028);
		}

		// class UEditableGeometryCollectionAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableGeometryCollectionAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, OriginalGeometryCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollectionLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, UnknownData_VO4E, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGeometryCollectionAdapter, 0x00D8);
		}

		// class UEditableMesh : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_JC5W, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_HUWY, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_AKAT, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_12QB, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0708);
		}

		// class UEditableMeshFactory : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0028);
		}

		// class UEditableStaticMeshAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_BZK8, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E0);
		}

		// class UMovieSceneGeometryCollectionSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionSection, Params, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionSection, 0x0110);
		}

		// class UMovieSceneGeometryCollectionTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, AnimationSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionTrack, 0x0068);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_E9RH, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_16NN, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_O428, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x0480);
		}

		// class UBP_Cloth36_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth36__BP_Cloth36_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth36_C, 0x0078);
		}

		// class UBP_Cloth31_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth31__BP_Cloth31_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth31_C, 0x0078);
		}

		// class UBP_Cloth23_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth23__BP_Cloth23_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth23_C, 0x0078);
		}

		// class UBP_Cloth19_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth19__BP_Cloth19_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth19_C, 0x0078);
		}

		// class UBOT_VikingWarchief_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_VikingWarchief__BOT_VikingWarchief_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_VikingWarchief_C, 0x0108);
		}

		// class UBOT_VikingBerserker_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_VikingBerserker__BOT_VikingBerserker_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_VikingBerserker_C, 0x0108);
		}

		// class UBOT_NormanKnight_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_NormanKnight__BOT_NormanKnight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_NormanKnight_C, 0x0108);
		}

		// class UBOT_MilaneseKnight_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_MilaneseKnight__BOT_MilaneseKnight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_MilaneseKnight_C, 0x0108);
		}

		// class ABP_PugilistFistsWeapon_C : public ABP_FistsWeapon_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PugilistFistsWeapon__BP_PugilistFistsWeapon_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PugilistFistsWeapon_C, 0x1C20);
		}

		// class UDodgeShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__DodgeShake__DodgeShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDodgeShake_C, 0x0160);
		}

		// class UBP_NavFilter_Team1_C : public UMordhauNavigationQueryFilter
		TEST_METHOD(BlueprintGeneratedClass__BP_NavFilter_Team1__BP_NavFilter_Team1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavFilter_Team1_C, 0x0048);
		}

		// class UBP_NavFilter_NoLadder_C : public UMordhauNavigationQueryFilter
		TEST_METHOD(BlueprintGeneratedClass__BP_NavFilter_NoLadder__BP_NavFilter_NoLadder_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavFilter_NoLadder_C, 0x0048);
		}

		// class UBP_NavFilter_Default_C : public UMordhauNavigationQueryFilter
		TEST_METHOD(BlueprintGeneratedClass__BP_NavFilter_Default__BP_NavFilter_Default_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavFilter_Default_C, 0x0048);
		}

		// class UBTTask_MoveToDestination_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_MoveToDestination__BTTask_MoveToDestination_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, TargetActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, TargetLocation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, LastActorLocation, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, ForceWalk, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, UnknownData_0UO9, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, AcceptableRadius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, CurrentMovementDistance, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, CurrentMovementTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, UseMidpoint, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, UnknownData_ATIJ, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, MoveTargetLocation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, UnknownData_29LR, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, MordhauAIController, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, MordhauGameState, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, MordhauCharacter, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, CurrentMovementLocation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveToDestination_C, bGoToActor, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveToDestination_C, 0x0155);
		}

		// class UBP_ShieldPauldrons_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShieldPauldrons__BP_ShieldPauldrons_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShieldPauldrons_C, 0x01A0);
		}

		// class UBP_PlateTabardChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateTabardChest__BP_PlateTabardChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateTabardChest_C, 0x01E8);
		}

		// class ABP_LadderMover_C : public AMordhau1DVehicle
		TEST_METHOD(BlueprintGeneratedClass__BP_LadderMover__BP_LadderMover_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LadderMover_C, UberGraphFrame, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LadderMover_C, Ladder, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LadderMover_C, RequestedJump, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LadderMover_C, ReplicatedLadderJump, 0x0C51);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LadderMover_C, UnknownData_8NQU, 0x0C52);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LadderMover_C, LastDriver, 0x0C58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LadderMover_C, 0x0C60);
		}

		// class ABP_TurdHordeBot_C : public ABP_Turd_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TurdHordeBot__BP_TurdHordeBot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TurdHordeBot_C, 0x0CD8);
		}

		// class UBP_ToolboxPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ToolboxPart__BP_ToolboxPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ToolboxPart_C, 0x0078);
		}

		// class UBP_Stubble2Male02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Stubble2Male02__BP_Stubble2Male02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Stubble2Male02_C, 0x0078);
		}

		// class UBOT_CrusaderBOSS_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_CrusaderBOSS__BOT_CrusaderBOSS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_CrusaderBOSS_C, 0x0108);
		}

		// class UBOT_CrusaderBlack_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_CrusaderBlack__BOT_CrusaderBlack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_CrusaderBlack_C, 0x0108);
		}

		// class UBOT_Billhook_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Billhook__BOT_Billhook_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Billhook_C, 0x0108);
		}

		// class UBOT_333Poleaxe_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_333Poleaxe__BOT_333Poleaxe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_333Poleaxe_C, 0x0108);
		}

		// class UBOT_Knight8_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Knight8__BOT_Knight8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Knight8_C, 0x0108);
		}

		// class UBOT_Knight3_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Knight3__BOT_Knight3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Knight3_C, 0x0108);
		}

		// class UBOT_ArcherRecurve_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_ArcherRecurve__BOT_ArcherRecurve_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_ArcherRecurve_C, 0x0108);
		}

		// class UBP_Emperor_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Emperor__BP_Emperor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emperor_C, 0x0060);
		}

		// class UBP_Mordhau3_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Mordhau3__BP_Mordhau3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mordhau3_C, 0x0060);
		}

		// class UBP_Fleur1_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Fleur1__BP_Fleur1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Fleur1_C, 0x0060);
		}

		// class UBP_Decorative1_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Decorative1_Banner__BP_Decorative1_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Decorative1_Banner_C, 0x0060);
		}

		// class UBP_Polearm_RightStrikeMotion_C : public UBP_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polearm_RightStrikeMotion__BP_Polearm_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polearm_RightStrikeMotion_C, 0x1160);
		}

		// class UBP_ControlsSettings_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ControlsSettings__BP_ControlsSettings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, ApplyAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, AngleAttackAfterPressCheckbox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, AngleAttacksWithMovementCheckbox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, ApplyButton, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, BP_HoveredSetting, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, ControlSchemeDropdown, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, FlipAttackSideCheckbox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, GamepadLeftXDeadzoneSlider, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, GamepadLeftXSensitivitySlider, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, GamepadLeftYDeadzoneSlider, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, GamepadLeftYSensitivitySlider, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, GamepadRangedSensitivitySlider, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, GamepadRightXDeadzoneSlider, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, GamepadRightXSensitivitySlider, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, GamepadRightYDeadzoneSlider, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, GamepadRightYSensitivitySlider, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, Image_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, InverseAttackDirectionXCheckbox, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, InverseAttackDirectionYCheckbox, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, InvertGamepadLeftXCheckbox, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, InvertGamepadLeftYCheckbox, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, InvertGamepadRightXCheckbox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, InvertGamepadRightYCheckbox, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, InvertMouseXCheckbox, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, InvertMouseYCheckbox, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, MouseXSensitivitySlider, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, MouseYSensitivitySlider, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, ResetButton, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, ToggleSprintCheckbox, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, CurrentControlScheme, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, UnknownData_RTYQ, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsSettings_C, ControlSchemeWarningDialog, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ControlsSettings_C, 0x0338);
		}

		// class UBP_FlatFaceBascinet_plume_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlatFaceBascinet_plume__BP_FlatFaceBascinet_plume_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlatFaceBascinet_plume_C, 0x01C8);
		}

		// class UBP_TightHood_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TightHood__BP_TightHood_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TightHood_C, 0x01C8);
		}

		// class UBP_VanguardsKettleBuffetOrle_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VanguardsKettleBuffetOrle__BP_VanguardsKettleBuffetOrle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VanguardsKettleBuffetOrle_C, 0x01C8);
		}

		// class UBP_VeteransBarbuteTrimRaised_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransBarbuteTrimRaised__BP_VeteransBarbuteTrimRaised_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransBarbuteTrimRaised_C, 0x01C8);
		}

		// class UBP_Barbute_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Barbute__BP_Barbute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Barbute_C, 0x01C8);
		}

		// class UBP_RaisedBarbute_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RaisedBarbute__BP_RaisedBarbute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RaisedBarbute_C, 0x01C8);
		}

		// class UBP_ArmingSword_NobleGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_NobleGuard__BP_ArmingSword_NobleGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_NobleGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_NobleGuard_C, 0x0080);
		}

		// class UBP_ArmingSword_NobleRainGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_NobleRainGuard__BP_ArmingSword_NobleRainGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_NobleRainGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_NobleRainGuard_C, 0x0080);
		}

		// class UBP_ArmingSword_RidgedBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_RidgedBlade__BP_ArmingSword_RidgedBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_RidgedBlade_C, 0x0078);
		}

		// class UBP_VikingSword_InlayedBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingSword_InlayedBlade__BP_VikingSword_InlayedBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VikingSword_InlayedBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingSword_InlayedBlade_C, 0x0080);
		}

		// class UBP_BastardSword_SolidGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword_SolidGuard__BP_BastardSword_SolidGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BastardSword_SolidGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BastardSword_SolidGuard_C, 0x0080);
		}

		// class UBP_Shortspear_TrustyHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shortspear_TrustyHead__BP_Shortspear_TrustyHead_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shortspear_TrustyHead_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shortspear_TrustyHead_C, 0x0080);
		}

		// class UCallbackProxy_AddMetadataKVP : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_AddMetadataKVP)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddMetadataKVP, UnknownData_257P, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddMetadataKVP, WorldContextObject, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddMetadataKVP, onSuccess, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddMetadataKVP, onFailure, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_AddMetadataKVP, 0x00B0);
		}

		// class UCallbackProxy_AddMod : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_AddMod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddMod, UnknownData_JC5I, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddMod, WorldContextObject, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddMod, onSuccess, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddMod, onFailure, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_AddMod, 0x00E0);
		}

		// class UCallbackProxy_AddModDependencies : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_AddModDependencies)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModDependencies, UnknownData_7LGW, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModDependencies, WorldContextObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModDependencies, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModDependencies, onFailure, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_AddModDependencies, 0x0070);
		}

		// class UCallbackProxy_AddModImages : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_AddModImages)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModImages, UnknownData_COSY, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModImages, WorldContextObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModImages, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModImages, onFailure, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_AddModImages, 0x0070);
		}

		// class UCallbackProxy_AddModLogo : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_AddModLogo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModLogo, UnknownData_LRDT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModLogo, WorldContextObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModLogo, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModLogo, onFailure, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_AddModLogo, 0x0070);
		}

		// class UCallbackProxy_AddModRating : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_AddModRating)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModRating, UnknownData_PHK5, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModRating, WorldContextObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModRating, onSuccess, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModRating, onFailure, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_AddModRating, 0x0060);
		}

		// class UCallbackProxy_AddModSketchfabLinks : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_AddModSketchfabLinks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModSketchfabLinks, UnknownData_TH3E, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModSketchfabLinks, WorldContextObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModSketchfabLinks, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModSketchfabLinks, onFailure, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_AddModSketchfabLinks, 0x0070);
		}

		// class UCallbackProxy_AddModTags : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_AddModTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModTags, UnknownData_SX9Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModTags, WorldContextObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModTags, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModTags, onFailure, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_AddModTags, 0x0070);
		}

		// class UCallbackProxy_AddModYoutubeLinks : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_AddModYoutubeLinks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModYoutubeLinks, UnknownData_U114, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModYoutubeLinks, WorldContextObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModYoutubeLinks, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_AddModYoutubeLinks, onFailure, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_AddModYoutubeLinks, 0x0070);
		}

		// class UCallbackProxy_DeleteMetadataKVP : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_DeleteMetadataKVP)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteMetadataKVP, UnknownData_LURE, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteMetadataKVP, WorldContextObject, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteMetadataKVP, onSuccess, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteMetadataKVP, onFailure, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_DeleteMetadataKVP, 0x00B0);
		}

		// class UCallbackProxy_DeleteModDependencies : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_DeleteModDependencies)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModDependencies, UnknownData_KJQU, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModDependencies, WorldContextObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModDependencies, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModDependencies, onFailure, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_DeleteModDependencies, 0x0070);
		}

		// class UCallbackProxy_DeleteModImages : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_DeleteModImages)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModImages, UnknownData_22M5, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModImages, WorldContextObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModImages, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModImages, onFailure, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_DeleteModImages, 0x0070);
		}

		// class UCallbackProxy_DeleteModSketchfabLinks : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_DeleteModSketchfabLinks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModSketchfabLinks, UnknownData_BC6D, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModSketchfabLinks, WorldContextObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModSketchfabLinks, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModSketchfabLinks, onFailure, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_DeleteModSketchfabLinks, 0x0070);
		}

		// class UCallbackProxy_DeleteModTags : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_DeleteModTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModTags, UnknownData_9JGG, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModTags, WorldContextObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModTags, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModTags, onFailure, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_DeleteModTags, 0x0070);
		}

		// class UCallbackProxy_DeleteModYoutubeLinks : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_DeleteModYoutubeLinks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModYoutubeLinks, UnknownData_7ELJ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModYoutubeLinks, WorldContextObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModYoutubeLinks, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DeleteModYoutubeLinks, onFailure, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_DeleteModYoutubeLinks, 0x0070);
		}

		// class UCallbackProxy_DownloadModfilesById : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_DownloadModfilesById)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DownloadModfilesById, UnknownData_WKMC, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DownloadModfilesById, WorldContextObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DownloadModfilesById, onSuccess, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DownloadModfilesById, onFailure, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_DownloadModfilesById, 0x0068);
		}

		// class UCallbackProxy_DownloadSubscribedModfiles : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_DownloadSubscribedModfiles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DownloadSubscribedModfiles, UnknownData_L7NK, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DownloadSubscribedModfiles, WorldContextObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DownloadSubscribedModfiles, onSuccess, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_DownloadSubscribedModfiles, onFailure, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_DownloadSubscribedModfiles, 0x0060);
		}

		// class UCallbackProxy_EditMod : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_EditMod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EditMod, UnknownData_MRU1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EditMod, WorldContextObject, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EditMod, onSuccess, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EditMod, onFailure, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_EditMod, 0x00C8);
		}

		// class UCallbackProxy_EmailExchange : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_EmailExchange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EmailExchange, UnknownData_9J87, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EmailExchange, WorldContextObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EmailExchange, onSuccess, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EmailExchange, onFailure, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_EmailExchange, 0x0068);
		}

		// class UCallbackProxy_EmailRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_EmailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EmailRequest, UnknownData_D86R, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EmailRequest, WorldContextObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EmailRequest, onSuccess, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_EmailRequest, onFailure, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_EmailRequest, 0x0068);
		}

		// class UCallbackProxy_GalaxyAuth : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GalaxyAuth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GalaxyAuth, UnknownData_F6YR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GalaxyAuth, WorldContextObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GalaxyAuth, onSuccess, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GalaxyAuth, onFailure, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GalaxyAuth, 0x0068);
		}

		// class UCallbackProxy_GetAllMetadataKVP : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetAllMetadataKVP)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllMetadataKVP, UnknownData_U7U6, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllMetadataKVP, WorldContextObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllMetadataKVP, onSuccess, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllMetadataKVP, onFailure, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetAllMetadataKVP, 0x0060);
		}

		// class UCallbackProxy_GetAllModDependencies : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetAllModDependencies)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModDependencies, UnknownData_V7NK, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModDependencies, WorldContextObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModDependencies, onSuccess, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModDependencies, onFailure, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetAllModDependencies, 0x0060);
		}

		// class UCallbackProxy_GetAllModfiles : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetAllModfiles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModfiles, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModfiles, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModfiles, WorldContextObject, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModfiles, UnknownData_AHBL, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetAllModfiles, 0x0060);
		}

		// class UCallbackProxy_GetAllMods : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetAllMods)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllMods, UnknownData_H8LT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllMods, WorldContextObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllMods, onSuccess, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllMods, onFailure, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetAllMods, 0x0098);
		}

		// class UCallbackProxy_GetAllModTags : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetAllModTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModTags, UnknownData_366R, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModTags, WorldContextObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModTags, onSuccess, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAllModTags, onFailure, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetAllModTags, 0x0060);
		}

		// class UCallbackProxy_GetAuthenticatedUser : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetAuthenticatedUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAuthenticatedUser, WorldContextObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAuthenticatedUser, onSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetAuthenticatedUser, onFailure, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetAuthenticatedUser, 0x0058);
		}

		// class UCallbackProxy_GetGame : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetGame, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetGame, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetGame, UnknownData_FLXW, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetGame, WorldContextObject, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetGame, 0x0060);
		}

		// class UCallbackProxy_GetMod : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetMod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetMod, UnknownData_M8N7, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetMod, WorldContextObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetMod, onSuccess, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetMod, onFailure, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetMod, 0x0060);
		}

		// class UCallbackProxy_GetUserEvents : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetUserEvents)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserEvents, UnknownData_79F1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserEvents, WorldContextObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserEvents, onSuccess, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserEvents, onFailure, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetUserEvents, 0x0060);
		}

		// class UCallbackProxy_GetUserModfiles : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetUserModfiles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserModfiles, UnknownData_1JBS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserModfiles, WorldContextObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserModfiles, onSuccess, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserModfiles, onFailure, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetUserModfiles, 0x0060);
		}

		// class UCallbackProxy_GetUserMods : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetUserMods)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserMods, UnknownData_TG1Z, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserMods, WorldContextObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserMods, onSuccess, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserMods, onFailure, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetUserMods, 0x0098);
		}

		// class UCallbackProxy_GetUserRatings : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetUserRatings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserRatings, UnknownData_F9Z8, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserRatings, WorldContextObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserRatings, onSuccess, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserRatings, onFailure, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetUserRatings, 0x0060);
		}

		// class UCallbackProxy_GetUserSubscriptions : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_GetUserSubscriptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserSubscriptions, UnknownData_2G0Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserSubscriptions, WorldContextObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserSubscriptions, onSuccess, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_GetUserSubscriptions, onFailure, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_GetUserSubscriptions, 0x0098);
		}

		// class UCallbackProxy_OculusAuth : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_OculusAuth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_OculusAuth, UnknownData_UHB7, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_OculusAuth, WorldContextObject, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_OculusAuth, onSuccess, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_OculusAuth, onFailure, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_OculusAuth, 0x00B0);
		}

		// class UCallbackProxy_SetModDownloadListener : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_SetModDownloadListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SetModDownloadListener, WorldContextObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SetModDownloadListener, onSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SetModDownloadListener, onFailure, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_SetModDownloadListener, 0x0058);
		}

		// class UCallbackProxy_SetModEventListener : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_SetModEventListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SetModEventListener, WorldContextObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SetModEventListener, onSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SetModEventListener, onFailure, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_SetModEventListener, 0x0058);
		}

		// class UCallbackProxy_SetModfileUploadListener : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_SetModfileUploadListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SetModfileUploadListener, WorldContextObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SetModfileUploadListener, onSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SetModfileUploadListener, onFailure, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_SetModfileUploadListener, 0x0058);
		}

		// class UCallbackProxy_SteamAuth : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_SteamAuth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SteamAuth, UnknownData_NJF1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SteamAuth, WorldContextObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SteamAuth, onSuccess, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SteamAuth, onFailure, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_SteamAuth, 0x0068);
		}

		// class UCallbackProxy_SubmitReport : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_SubmitReport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SubmitReport, UnknownData_XKS8, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SubmitReport, WorldContextObject, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SubmitReport, onSuccess, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SubmitReport, onFailure, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_SubmitReport, 0x0088);
		}

		// class UCallbackProxy_SubscribeToMod : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_SubscribeToMod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SubscribeToMod, UnknownData_JIP7, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SubscribeToMod, WorldContextObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SubscribeToMod, onSuccess, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_SubscribeToMod, onFailure, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_SubscribeToMod, 0x0060);
		}

		// class UCallbackProxy_UninstallUnavailableMods : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_UninstallUnavailableMods)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_UninstallUnavailableMods, WorldContextObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_UninstallUnavailableMods, onSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_UninstallUnavailableMods, onFailure, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_UninstallUnavailableMods, 0x0058);
		}

		// class UCallbackProxy_UnsubscribeFromMod : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__modio__CallbackProxy_UnsubscribeFromMod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_UnsubscribeFromMod, UnknownData_ZLNM, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_UnsubscribeFromMod, WorldContextObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_UnsubscribeFromMod, onSuccess, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCallbackProxy_UnsubscribeFromMod, onFailure, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCallbackProxy_UnsubscribeFromMod, 0x0060);
		}

		// class UModioActorComponent : public UActorComponent
		TEST_METHOD(Class__modio__ModioActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModioActorComponent, UnknownData_RM0J, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModioActorComponent, 0x00C0);
		}

		// class UModioFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__modio__ModioFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModioFunctionLibrary, 0x0028);
		}

		// class UModioSettings : public UObject
		TEST_METHOD(Class__modio__ModioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModioSettings, GameId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModioSettings, UnknownData_7NEI, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModioSettings, ApiKey, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModioSettings, RootDirectory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModioSettings, UnknownData_FSRR, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModioSettings, 0x0058);
		}

		// class UBP_Folded_Boots_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Folded_Boots__BP_Folded_Boots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Folded_Boots_C, 0x01A0);
		}

		// class UBP_BaggyClothPants_C : public UBP_Tier0LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BaggyClothPants__BP_BaggyClothPants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BaggyClothPants_C, 0x01B8);
		}

		// class ABP_Mallet_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Mallet__BP_Mallet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Mallet_C, 0x1C28);
		}

		// class UBP_ThrowingKnivesDefaultPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrowingKnivesDefaultPart__BP_ThrowingKnivesDefaultPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ThrowingKnivesDefaultPart_C, 0x0078);
		}

		// class UBP_waraxe_double_DeerlegShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_waraxe_double_DeerlegShaft__BP_waraxe_double_DeerlegShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_waraxe_double_DeerlegShaft_C, 0x0078);
		}

		// class UBP_StickPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_StickPart__BP_StickPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StickPart_C, 0x0078);
		}

		// class ABP_Stick_C : public ABP_Mace_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Stick__BP_Stick_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Stick_C, 0x1C28);
		}

		// class ABP_Lute_C : public ABP_Instrument_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Lute__BP_Lute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Lute_C, 0x1CC0);
		}

		// class UInt64FunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Int64__Int64FunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64FunctionLibrary, 0x0028);
		}

		// class UInt64MathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Int64__Int64MathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64MathLibrary, 0x0028);
		}

		// class ABP_RecurveBow_C : public ABP_Bow_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RecurveBow__BP_RecurveBow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RecurveBow_C, 0x0D59);
		}

		// class ABP_ThrownPanProjectile_LowDamage_C : public ABP_ThrownSpinningProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownPanProjectile_LowDamage__BP_ThrownPanProjectile_LowDamage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownPanProjectile_LowDamage_C, 0x07D0);
		}

		// class UBP_BucklerPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BucklerPart__BP_BucklerPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BucklerPart_C, 0x0078);
		}

		// class UBP_Buckler_gothic_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Buckler_gothic__BP_Buckler_gothic_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Buckler_gothic_C, 0x0078);
		}

		// class ABP_HandAxe_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HandAxe__BP_HandAxe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HandAxe_C, 0x1C28);
		}

		// class UBP_RoundShield_RightStrikeMotion_C : public UBP_Shield_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RoundShield_RightStrikeMotion__BP_RoundShield_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RoundShield_RightStrikeMotion_C, 0x1160);
		}

		// class UBP_RoundShield_RightStabMotion_C : public UBP_Shield_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RoundShield_RightStabMotion__BP_RoundShield_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RoundShield_RightStabMotion_C, 0x1108);
		}

		// class UMagicLeapEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapEyeTracker__MagicLeapEyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UNavigationQueryFilter : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_1G5U, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0048);
		}

		// class ANavigationData : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_GLFF, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_0EH6, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_XPDM, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, DataVersion, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_GBQS, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_MZLK, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x0400);
		}

		// class AAbstractNavData : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x0400);
		}

		// class UCrowdManagerBase : public UObject
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0028);
		}

		// class UNavArea : public UNavAreaBase
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_FIU0, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0048);
		}

		// class UNavArea_Default : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0048);
		}

		// class UNavArea_LowHeight : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0048);
		}

		// class UNavArea_Null : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0048);
		}

		// class UNavArea_Obstacle : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0048);
		}

		// class UNavAreaMeta : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0048);
		}

		// class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C8);
		}

		// class UNavCollision : public UNavCollisionBase
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_QGDM, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_4H6X, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x00D8);
		}

		// class ANavigationGraph : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x0400);
		}

		// class ANavigationGraphNode : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0220);
		}

		// class UNavigationGraphNodeComponent : public USceneComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, UnknownData_W71E, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0220);
		}

		// class UNavigationInvokerComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00B8);
		}

		// class UNavigationPath : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_XPCQ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0088);
		}

		// class UNavigationPathGenerator : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// class UNavigationSystemV1 : public UNavigationSystemBase
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DefaultAgentName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_3J73, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_2UOR, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_OZLB, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgentsMask, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_LJMK, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_PQCT, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_2YBG, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_94WD, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_BMWE, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x0538);
		}

		// class UNavigationSystemModuleConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_36B2, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0058);
		}

		// class ANavigationTestingActor : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_LYPJ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_SBT4, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_1IMD, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_G1LU, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostLimitFactor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MinimumCostLimit, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_WN7J, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_9ZOY, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_ONEG, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_8N88, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0310);
		}

		// class UNavLinkComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_JG1B, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_GEZH, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0410);
		}

		// class UNavRelevantComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_XD7U, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_N7W0, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x00E0);
		}

		// class UNavLinkCustomComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_AVLM, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_2D4A, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, SupportedAgents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_N6IY, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_BQ8U, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_T8FT, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_SV7D, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x0190);
		}

		// class UNavLinkCustomInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// class UNavLinkHostInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// class UNavLinkRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x03F0);
		}

		// class UNavLinkTrivial : public UNavLinkDefinition
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// class ANavMeshBoundsVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_6LZ1, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x0260);
		}

		// class UNavMeshRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_IBAU, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0400);
		}

		// class UNavModifierComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_4T0E, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0140);
		}

		// class ANavModifierVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_NSFT, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x0268);
		}

		// class UNavNodeInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// class ANavSystemConfigOverride : public AActor
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, NavigationSystemConfig, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, OverridePolicy, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, UnknownData_W7SC, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavSystemConfigOverride, 0x0230);
		}

		// class UNavTestRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x03F0);
		}

		// class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0048);
		}

		// class ARecastNavMesh : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_4HGV, 0x0403);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_Y6JN, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxHeight, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, NavMeshOriginOffset, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_IOEL, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_DM68, 0x0476);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_ZCHE, 0x0484);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x04B8);
		}

		// class URecastNavMeshDataChunk : public UNavigationDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_KCIC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0040);
		}

		// class ULiveLinkSourceFactory : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceFactory, 0x0028);
		}

		// class ULiveLinkRole : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkRole, 0x0028);
		}

		// class ULiveLinkBasicRole : public ULiveLinkRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkBasicRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkBasicRole, 0x0028);
		}

		// class ULiveLinkAnimationRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkAnimationRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkAnimationRole, 0x0028);
		}

		// class ULiveLinkTransformRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkTransformRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkTransformRole, 0x0028);
		}

		// class ULiveLinkCameraRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCameraRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCameraRole, 0x0028);
		}

		// class ULiveLinkController : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkController, 0x0028);
		}

		// class ULiveLinkSourceSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, Mode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, UnknownData_ZY1R, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, BufferSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, ConnectionString, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, Factory, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceSettings, 0x0098);
		}

		// class ULiveLinkCurveRemapSettings : public ULiveLinkSourceSettings
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCurveRemapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkCurveRemapSettings, CurveConversionSettings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCurveRemapSettings, 0x00E8);
		}

		// class ULiveLinkFrameInterpolationProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameInterpolationProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameInterpolationProcessor, 0x0028);
		}

		// class ULiveLinkFramePreProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFramePreProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFramePreProcessor, 0x0028);
		}

		// class ULiveLinkFrameTranslator : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameTranslator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameTranslator, 0x0028);
		}

		// class ULiveLinkLightRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkLightRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkLightRole, 0x0028);
		}

		// class ULiveLinkSubjectSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSubjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, PreProcessors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, InterpolationProcessor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, Translators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, Role, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSubjectSettings, 0x0058);
		}

		// class ULiveLinkVirtualSubject : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkVirtualSubject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_L5ZD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, Role, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, Subjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, FrameTranslators, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_GH4O, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkVirtualSubject, 0x00D8);
		}

		// class UBP_gr8h3lm_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_gr8h3lm__BP_gr8h3lm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_gr8h3lm_C, 0x0060);
		}

		// class UBP_PlateColor6_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor6__BP_PlateColor6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor6_C, 0x0078);
		}

		// class UBP_PlateColor5_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor5__BP_PlateColor5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor5_C, 0x0078);
		}

		// class UBP_PlateColor24_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor24__BP_PlateColor24_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor24_C, 0x0078);
		}

		// class UBP_PlateColor11_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor11__BP_PlateColor11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor11_C, 0x0078);
		}

		// class UBP_Chain1_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Chain1__BP_Chain1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Chain1_C, 0x0060);
		}

		// class UBP_Short2Male02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Short2Male02__BP_Short2Male02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Short2Male02_C, 0x0078);
		}

		// class UBP_TextInputDialog_C : public UMordhauDialog
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TextInputDialog__BP_TextInputDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextInputDialog_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextInputDialog_C, BP_TwoButtonDialog, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextInputDialog_C, NormalTextBox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextInputDialog_C, PasswordTextBox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextInputDialog_C, HintText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextInputDialog_C, LeftButtonClicked, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextInputDialog_C, RightButtonClicked, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextInputDialog_C, bIsPassword, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextInputDialog_C, UnknownData_3G3I, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextInputDialog_C, TextCommitted, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextInputDialog_C, TextChanged, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TextInputDialog_C, 0x02B0);
		}

		// class UBP_TwoButtonDialog_C : public UMordhauDialog
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TwoButtonDialog__BP_TwoButtonDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, BP_BaseDialog, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, LeftButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, RightButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, TextBlock_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, Textcancel, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, TwoButtonContent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, LeftButtonText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, TitleText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, LeftButtonClicked, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, RightButtonText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoButtonDialog_C, RightButtonClicked, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TwoButtonDialog_C, 0x02D0);
		}

		// class UBP_TeamSelect_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TeamSelect__BP_TeamSelect_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TeamSelect_C, 0x0230);
		}

		// class UBP_Scoreboard_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Scoreboard__BP_Scoreboard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Scoreboard_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Scoreboard_C, TeamEntries, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Scoreboard_C, TeamBoxes, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Scoreboard_C, PlayerCounts, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Scoreboard_C, Players, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Scoreboard_C, Scoreboard_Entry_Type, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Scoreboard_C, Use_Gamestate_Entry_Type, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Scoreboard_C, Should_Keep_Local_Entry_in_View, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Scoreboard_C, isShowing, 0x027B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Scoreboard_C, 0x027C);
		}

		// class UBP_ProfileSelect_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ProfileSelect__BP_ProfileSelect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelect_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelect_C, Button_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelect_C, ConfirmButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelect_C, Image_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelect_C, Image_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelect_C, ProfileScrollBox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelect_C, LastClicked, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ProfileSelect_C, 0x0264);
		}

		// class ABP_BallistaProjectileFire_C : public ABP_BallistaProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BallistaProjectileFire__BP_BallistaProjectileFire_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BallistaProjectileFire_C, 0x07D9);
		}

		// class UBP_ModList_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Modlist__BP_ModList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, Image_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, Image_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, Image_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, Image_40, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, ModList, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, SizeBox_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, TextAuthor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, TextDescription, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, TextName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, TextVersion, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, WebBrowser_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, EntryArray, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, HoveredEntry, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, InstalledMods, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ModList_C, 0x02C0);
		}

		// class UBP_Credits_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Credits__BP_Credits_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_AlesEntry, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_AndrewEntry, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_AndrzejEntry, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_ChristianEntry, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_CreditsDevEntry_C_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_CreditsDevEntry_C_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_CreditsDevEntry_C_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_CreditsDevEntry_C_4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_CreditsDevEntry_C_5, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_CreditsDevEntry_C_13, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_CreditsDevEntry_C_14, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_CrushEntry, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_DejanEntry, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_JaxEntry, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_JureR, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_LucasEntry, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_MarkoEntry, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_MaxEntry, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_MikeEntry, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_MusicLukas, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_MusicPaul, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_MusicViktor, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_RyanEntry, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_ThomasEntry, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, EmperorEntry, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_2, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_3, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_4, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_9, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_10, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_11, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, JureRe, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, KSBackers, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Luka, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Matevz, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, MordhauLogo, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Music, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, NameText, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, ScrollBox_1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, TextBlock_1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, TextBlock_2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, TextBlock_3, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, TitleText, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Uros, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Zdravko, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, ScrollSpeed, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Credits_C, 0x03AC);
		}

		// class UBP_CheckboxEntry_C : public UBP_SettingEntryParent_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CheckboxEntry__BP_CheckboxEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CheckboxEntry_C, UnknownData_97AS, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CheckboxEntry_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CheckboxEntry_C, Button_11, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CheckboxEntry_C, EntryCheckbox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CheckboxEntry_C, TextBlock_25, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CheckboxEntry_C, EntryText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CheckboxEntry_C, DisplayRange, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CheckboxEntry_C, OnCheckStateChanged, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CheckboxEntry_C, OnHovered, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CheckboxEntry_C, 0x0298);
		}

		// class UBP_Tier0UpperChestWearable_C : public UBP_UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier0UpperChestWearable__BP_Tier0UpperChestWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier0UpperChestWearable_C, 0x01E8);
		}

		// class UBP_UpperChestWearable_C : public UUpperChestWearable
		TEST_METHOD(BlueprintGeneratedClass__BP_UpperChestWearable__BP_UpperChestWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_UpperChestWearable_C, 0x01E8);
		}

		// class UBP_TeamSelectTeamEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TeamSelectTeamEntry__BP_TeamSelectTeamEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, ClickedAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, HoverAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, ColorLogo, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, GlowOutside, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, HoverFire, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, Image_7, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, PlayerCount, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, PlayersIcon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, Role, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, Team1Canvas, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, team1Players_H_Box, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, TeamButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, TextBlock_1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, TextBlock_7, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, Team, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, UnknownData_4BVE, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, TeamSelectWidget, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, PlayerEntries, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, TeamColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, TeamImageBrush, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, Players, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, TotalTeams, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, UnknownData_ZP2K, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, TeamImageBrushGrey, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, NormalRibbon, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, DisabledRibbon, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, HoveredRibbon, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, IsHovered_2, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, IsEnabled, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, isOnThisTeam, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectTeamEntry_C, AttackerTeam, 0x05A3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TeamSelectTeamEntry_C, 0x05A4);
		}

		// class ABP_Tier3TorsoPickup_C : public ABP_TorsoPickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier3TorsoPickup__BP_Tier3TorsoPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tier3TorsoPickup_C, 0x0408);
		}

		// class ABP_Tier1LegsPickup_C : public ABP_LegsPickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier1LegsPickup__BP_Tier1LegsPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tier1LegsPickup_C, 0x0408);
		}

		// class ABP_Tier1HelmetPickup_C : public ABP_HelmetPickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier1HelmetPickup__BP_Tier1HelmetPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tier1HelmetPickup_C, 0x0408);
		}

		// class UBP_EyeColor5_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor5__BP_EyeColor5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor5_C, 0x0078);
		}

		// class UBP_EyeColor4_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor4__BP_EyeColor4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor4_C, 0x0078);
		}

		// class UBP_Cloth6_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth6__BP_Cloth6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth6_C, 0x0078);
		}

		// class UBP_Cloth52_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth52__BP_Cloth52_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth52_C, 0x0078);
		}

		// class UBP_CasualRankUp_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CasualRankUp__BP_CasualRankUp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, ExitAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, RankUpAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, BottomHalf, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, Diamond, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, Image_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, Image_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, Image_3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, Image_4, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, Image_5, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, Image_6, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, Image_7, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, Image_8, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, RankText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, TopHalf, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, Rank, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, RankTextColor, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, TopHalfColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankUp_C, BottomHalfColor, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CasualRankUp_C, 0x02DC);
		}

		// class UBP_GermanSalletHelmRR_C : public UBP_GermanSalletBuffet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletHelmRR__BP_GermanSalletHelmRR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletHelmRR_C, 0x01C8);
		}

		// class UBP_Plate_Gloves_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Plate_Gloves__BP_Plate_Gloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Plate_Gloves_C, 0x01A0);
		}

		// class UBP_DukesHourglassGauntlets_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DukesHourglassGauntlets__BP_DukesHourglassGauntlets_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DukesHourglassGauntlets_C, 0x01A0);
		}

		// class UBP_GermanSalletPlume_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletPlume__BP_GermanSalletPlume_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletPlume_C, 0x01C8);
		}

		// class UBP_CrownedHeavyBarbute_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CrownedHeavyBarbute__BP_CrownedHeavyBarbute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CrownedHeavyBarbute_C, 0x01C8);
		}

		// class UBP_Rapier_SerpentBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rapier_SerpentBlade__BP_Rapier_SerpentBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rapier_SerpentBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rapier_SerpentBlade_C, 0x0080);
		}

		// class ABP_HeaterShield_C : public ABP_MordhauShield_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeaterShield__BP_HeaterShield_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HeaterShield_C, 0x1C48);
		}

		// class UBP_claymore_AntlerGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_claymore_AntlerGuard__BP_claymore_AntlerGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_claymore_AntlerGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_claymore_AntlerGuard_C, 0x0080);
		}

		// class UBP_claymore_StrongHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_claymore_StrongHandle__BP_claymore_StrongHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_claymore_StrongHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_claymore_StrongHandle_C, 0x0080);
		}

		// class UBP_HorseShield_LeftStabMotion_C : public UBP_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HorseShield_LeftStabMotion__BP_HorseShield_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HorseShield_LeftStabMotion_C, 0x1108);
		}

		// class UBP_HorseShield_LeftStrikeMotion_C : public UBP_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HorseShield_LeftStrikeMotion__BP_HorseShield_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HorseShield_LeftStrikeMotion_C, 0x1160);
		}

		// class UBP_HorseShield_RightStabMotion_C : public UBP_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HorseShield_RightStabMotion__BP_HorseShield_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HorseShield_RightStabMotion_C, 0x1108);
		}

		// class UBP_Battleaxe_guardian_handle01_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Battleaxe_guardian_handle01__BP_Battleaxe_guardian_handle01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Battleaxe_guardian_handle01_C, 0x0078);
		}

		// class UBP_Battleaxe_guardian_head02_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Battleaxe_guardian_head02__BP_Battleaxe_guardian_head02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Battleaxe_guardian_head02_C, 0x0078);
		}

		// class UBP_Poleaxe_IndemnitySpike_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_IndemnitySpike__BP_Poleaxe_IndemnitySpike_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_IndemnitySpike_C, 0x0078);
		}

		// class UBP_Poleaxe_NailedShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_NailedShaft__BP_Poleaxe_NailedShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_NailedShaft_C, 0x0078);
		}

		// class UBP_Poleaxe_SquidHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_SquidHead__BP_Poleaxe_SquidHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_SquidHead_C, 0x0078);
		}

		// class UBP_Zweihander_ScholasticHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Zweihander_ScholasticHandle__BP_Zweihander_ScholasticHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Zweihander_ScholasticHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Zweihander_ScholasticHandle_C, 0x0080);
		}

		// class UBP_Hood_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Hood__BP_Hood_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Hood_C, 0x01C8);
		}

		// class UBP_Greatsword_LeftStrikeMotion_C : public UBP_2HSword_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_LeftStrikeMotion__BP_Greatsword_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_LeftStrikeMotion_C, 0x1160);
		}

		// class UBP_FeitoriaMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_FeitoriaMapMetadata__BP_FeitoriaMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FeitoriaMapMetadata_C, 0x00A8);
		}

		// class UBP_Fur_Boots_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Fur_Boots__BP_Fur_Boots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Fur_Boots_C, 0x01A0);
		}

		// class UBP_Footsoldier_Boots_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Footsoldier_Boots__BP_Footsoldier_Boots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Footsoldier_Boots_C, 0x01A0);
		}

		// class UBP_ChainmailHosenPadded_C : public UBP_Tier2LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainmailHosenPadded__BP_ChainmailHosenPadded_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainmailHosenPadded_C, 0x01B8);
		}

		// class UBP_WorkersShorts_C : public UBP_Tier0LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WorkersShorts__BP_WorkersShorts_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WorkersShorts_C, 0x01B8);
		}

		// class UBP_JoinedHosen_MailStrip_C : public UBP_Tier1LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JoinedHosen_MailStrip__BP_JoinedHosen_MailStrip_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JoinedHosen_MailStrip_C, 0x01B8);
		}

		// class ABP_ThrownSpinningProjectileKnife_C : public ABP_ThrownWeaponProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownSpinningProjectileKnife__BP_ThrownSpinningProjectileKnife_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownSpinningProjectileKnife_C, 0x07D0);
		}

		// class UBP_Executioner_WarmongerGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Executioner_WarmongerGuard__BP_Executioner_WarmongerGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Executioner_WarmongerGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Executioner_WarmongerGuard_C, 0x0080);
		}

		// class UBP_Executioner_OutcastsBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Executioner_OutcastsBlade__BP_Executioner_OutcastsBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Executioner_OutcastsBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Executioner_OutcastsBlade_C, 0x0080);
		}

		// class UBP_Executioner_HangmansBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Executioner_HangmansBlade__BP_Executioner_HangmansBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Executioner_HangmansBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Executioner_HangmansBlade_C, 0x0080);
		}

		// class UBP_CorsescaSpiralRivetHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CorsescaSpiralRivetHandle__BP_CorsescaSpiralRivetHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CorsescaSpiralRivetHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CorsescaSpiralRivetHandle_C, 0x0080);
		}

		// class UBP_Polehammer_Shaft4_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Shaft4__BP_Polehammer_Shaft4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Shaft4_C, 0x0078);
		}

		// class UBP_Polehammer_Head9_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Head9__BP_Polehammer_Head9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Head9_C, 0x0078);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// class UPacketHandlerProfileConfig : public UObject
		TEST_METHOD(Class__PacketHandler__PacketHandlerProfileConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPacketHandlerProfileConfig, Components, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPacketHandlerProfileConfig, 0x0038);
		}

		// class UBP_HairColor14_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor14__BP_HairColor14_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor14_C, 0x0078);
		}

		// class UBP_HairColor13_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor13__BP_HairColor13_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor13_C, 0x0078);
		}

		// class UBP_HairColor12_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor12__BP_HairColor12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor12_C, 0x0078);
		}

		// class UBP_EyeColor9_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor9__BP_EyeColor9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor9_C, 0x0078);
		}

		// class UBP_SwordFlourish1H_Shield_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_SwordFlourish1H_Shield__BP_SwordFlourish1H_Shield_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SwordFlourish1H_Shield_C, 0x0130);
		}

		// class UBP_SwordFlourish1H_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_SwordFlourish1H__BP_SwordFlourish1H_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SwordFlourish1H_C, 0x0130);
		}

		// class UBP_Laughing_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Laughing__BP_Laughing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Laughing_C, 0x0130);
		}

		// class UBP_FlinchMotion_C : public UFlinchMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_FlinchMotion__BP_FlinchMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlinchMotion_C, 0x00C0);
		}

		// class UBP_FeintedMotion_C : public UFeintedMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_FeintedMotion__BP_FeintedMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FeintedMotion_C, 0x00E8);
		}

		// class UBP_EmoteCancelMotion_C : public UEmoteCancelMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_EmoteCancelMotion__BP_EmoteCancelMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EmoteCancelMotion_C, 0x00A0);
		}

		// class UBP_Fists_RightStabMotion_C : public UBP_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Fists_RightStabMotion__BP_Fists_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Fists_RightStabMotion_C, 0x1108);
		}

		// class UBP_Fists_LeftStabMotion_C : public UBP_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Fists_LeftStabMotion__BP_Fists_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Fists_LeftStabMotion_C, 0x1108);
		}

		// class UBP_SocialMediaMenu_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SocialMediaMenu__BP_SocialMediaMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SocialMediaMenu_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SocialMediaMenu_C, BP_SoclaiMediaButtonEntry, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SocialMediaMenu_C, BP_SoclalMediaButtonEntry, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SocialMediaMenu_C, BP_SoclalMediaButtonEntry_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SocialMediaMenu_C, BP_SoclalMediaButtonEntry_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SocialMediaMenu_C, BP_SoclalMediaButtonEntry_4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SocialMediaMenu_C, BP_SoclalMediaButtonEntry_5, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SocialMediaMenu_C, Image_9, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SocialMediaMenu_C, OfficialWebsite, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SocialMediaMenu_C, 0x0288);
		}

		// class UBP_SliderEntry_C : public UBP_SettingEntryParent_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SliderEntry__BP_SliderEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, UnknownData_20F0, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, Image_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, NumericDisplay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, ProgressBar_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, Slider, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, sliderEntry, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, TextBlock_24, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, OnValueChanged, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, EntryText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, DisplayRange, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, OnHovered, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SliderEntry_C, bDecimalDisplay, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SliderEntry_C, 0x02B1);
		}

		// class UBP_StatePopupText_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StatePopupText__BP_StatePopupText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatePopupText_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatePopupText_C, EntryAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatePopupText_C, Name, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatePopupText_C, Overlay_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatePopupText_C, Overlay_2, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StatePopupText_C, 0x0258);
		}

		// class UBP_VeteransPauldrons_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransPauldrons__BP_VeteransPauldrons_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransPauldrons_C, 0x01A0);
		}

		// class UBP_VeteransPauldronsPartial_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransPauldronsPartial__BP_VeteransPauldronsPartial_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransPauldronsPartial_C, 0x01A0);
		}

		// class UBP_ChatBox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ChatBox__BP_ChatBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, CharCountAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, CooldownNotifierAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, CharCount, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, ChatCooldownText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, Entries, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, HorizontalBox_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, HorizontalBox_4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, HorizontalBox_7, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, HorizontalBox_3378, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, Image_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, Image_3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, Image_4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, Image_7, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, Image_15, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, MutedPlayerContainer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, MutedPlayersList, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, Overlay_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, Overlay_6, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, Overlay_1036, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, PauseChatCheckbox, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, ProfanityFilterCheckbox, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, ReportServerLagButton, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, TextArea, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, TextBlock, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, TextBlock_3, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, TextBlock_4, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, TextBlock_16, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, TextBlock_179, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, VerticalBox_91, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, ViewMode, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, IsChatVisible, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, IsMouseOver, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, UnknownData_JY85, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, MaxMessageLength, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, isViewModeOn, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, UnknownData_5W6E, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, ViewModelArray, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, MaxNumOfEntries, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, NumOfMessagesToDisplayInViewMode, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, EntriesArray, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, TimeForViewModeDisappear, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, TeamMode, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, UnknownData_8QI3, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, MessageLengthToCooldownRatio, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, ChatCooldownEndsAt, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, NumberOfRecentSentMessages, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, LastRecievedMessageAt, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, MsgCountThreshold, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, NumOfMessagesSentInThreshold, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, MessagesInThreshold, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, ThresholdCooldown, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, CharCountThreshold, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, TimeWhenLastMessageWasSent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, UnknownData_9WE3, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, MotivationalMessages, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, ContextPopupWrapper_Ref, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, List_of_profane_words, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, List_of_banned_words, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, IsMuted, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, isChatMode, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, UnknownData_0JYG, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, Mute_Duration, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, bIsChatPaused, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, UnknownData_M6TI, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, QueuedMessages, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, ModeratorBadge, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, DevBadge, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, UnknownData_19HQ, 0x0402);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBox_C, ChatColorOverrideMap, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChatBox_C, 0x0458);
		}

		// class UBP_BotBehaviorProfile_C : public UBotBehaviorProfile
		TEST_METHOD(BlueprintGeneratedClass__BP_BotBehaviorProfile__BP_BotBehaviorProfile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BotBehaviorProfile_C, 0x00E0);
		}

		// class UBOTBEHAVIOR_Worthless2_C : public UBP_BotBehaviorProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOTBEHAVIOR_Worthless2__BOTBEHAVIOR_Worthless2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOTBEHAVIOR_Worthless2_C, 0x00E0);
		}

		// class UBOTBEHAVIOR_Godlike_C : public UBP_BotBehaviorProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOTBEHAVIOR_Godlike__BOTBEHAVIOR_Godlike_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOTBEHAVIOR_Godlike_C, 0x00E0);
		}

		// class UBP_ChainmailArmsPadded_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainmailArmsPadded__BP_ChainmailArmsPadded_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainmailArmsPadded_C, 0x01B8);
		}

		// class UBP_Joupon_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Joupon_Arms__BP_Joupon_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Joupon_Arms_C, 0x01B8);
		}

		// class UBP_Italian_ArmsReinforced_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Italian_ArmsReinforced__BP_Italian_ArmsReinforced_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Italian_ArmsReinforced_C, 0x01B8);
		}

		// class UBP_Tier2UpperChestWearable_C : public UBP_UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier2UpperChestWearable__BP_Tier2UpperChestWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier2UpperChestWearable_C, 0x01E8);
		}

		// class UBP_JeweledCrown_Veil_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JeweledCrown_Veil__BP_JeweledCrown_Veil_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JeweledCrown_Veil_C, 0x01A0);
		}

		// class UBP_LongSleeveLeatherGloves_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LongSleeveLeatherGloves__BP_LongSleeveLeatherGloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongSleeveLeatherGloves_C, 0x01A0);
		}

		// class UBP_Chain_Arms_Bracer_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Chain_Arms_Bracer__BP_Chain_Arms_Bracer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Chain_Arms_Bracer_C, 0x01B8);
		}

		// class UBP_ShameMaskNoBoard_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShameMaskNoBoard__BP_ShameMaskNoBoard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShameMaskNoBoard_C, 0x01C8);
		}

		// class UBP_LandsknechtHat_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LandsknechtHat__BP_LandsknechtHat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LandsknechtHat_C, 0x01C8);
		}

		// class UBP_GothicArmet_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GothicArmet__BP_GothicArmet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GothicArmet_C, 0x01C8);
		}

		// class UBP_Aventail_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Aventail__BP_Aventail_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Aventail_C, 0x01A0);
		}

		// class ABP_Falchion_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Falchion__BP_Falchion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Falchion_C, 0x1C28);
		}

		// class UBP_falchion_ReverseBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_falchion_ReverseBlade__BP_falchion_ReverseBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_falchion_ReverseBlade_C, 0x0078);
		}

		// class UBP_MaceSkin_WardensMace_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MaceSkin_WardensMace__BP_MaceSkin_WardensMace_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MaceSkin_WardensMace_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MaceSkin_WardensMace_C, 0x0080);
		}

		// class UBP_Mace_InvaderHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Mace_InvaderHead__BP_Mace_InvaderHead_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Mace_InvaderHead_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mace_InvaderHead_C, 0x0080);
		}

		// class UBP_Axe_BeardedHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Axe_BeardedHead__BP_Axe_BeardedHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Axe_BeardedHead_C, 0x0078);
		}

		// class UBP_HorsemansAxeSkin_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HorsemansAxeSkin__BP_HorsemansAxeSkin_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HorsemansAxeSkin_C, 0x0078);
		}

		// class ABP_Axe_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Axe__BP_Axe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Axe_C, 0x1C28);
		}

		// class UBP_Warhammer_HybridHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_HybridHandle__BP_Warhammer_HybridHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_HybridHandle_C, 0x0078);
		}

		// class UBP_Warhammer_LeatherstrapHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_LeatherstrapHandle__BP_Warhammer_LeatherstrapHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_LeatherstrapHandle_C, 0x0078);
		}

		// class UBP_Warhammer_PopularHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_PopularHead__BP_Warhammer_PopularHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_PopularHead_C, 0x0078);
		}

		// class UBP_Cap_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Cap__BP_Cap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cap_C, 0x01C8);
		}

		// class UBP_HunterHosen_C : public UBP_Tier1LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterHosen__BP_HunterHosen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HunterHosen_C, 0x01B8);
		}

		// class UBP_Tier0LegsWearable_C : public UBP_LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier0LegsWearable__BP_Tier0LegsWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier0LegsWearable_C, 0x01B8);
		}

		// class ABP_ThrownMaceProjectile_LowDamage_C : public ABP_ThrownSpinningProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownMaceProjectile_LowDamage__BP_ThrownMaceProjectile_LowDamage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownMaceProjectile_LowDamage_C, 0x07D0);
		}

		// class ABP_Hoe_C : public ABP_Halberd_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Hoe__BP_Hoe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Hoe_C, 0x1C28);
		}

		// class ABP_WoodShovel_C : public ABP_Halberd_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodShovel__BP_WoodShovel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WoodShovel_C, 0x1C28);
		}

		// class ABP_Pitchfork_C : public ABP_Halberd_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Pitchfork__BP_Pitchfork_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Pitchfork_C, 0x1C28);
		}

		// class UBP_cleaverHunter_grip3_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_cleaverHunter_grip3__BP_cleaverHunter_grip3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_cleaverHunter_grip3_C, 0x0078);
		}

		// class UBP_cleaverHunter_blade2_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_cleaverHunter_blade2__BP_cleaverHunter_blade2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_cleaverHunter_blade2_C, 0x0078);
		}

		// class UBP_Buckler_LeftStrikeMotion_C : public UBP_Shield_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Buckler_LeftStrikeMotion__BP_Buckler_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Buckler_LeftStrikeMotion_C, 0x1160);
		}

		// class UBP_HuntsmanPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HuntsmanPerk__BP_HuntsmanPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HuntsmanPerk_C, 0x0068);
		}

		// class UBP_FireproofPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FireproofPerk__BP_FireproofPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FireproofPerk_C, 0x0068);
		}

		// class UBP_DwarfPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DwarfPerk__BP_DwarfPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DwarfPerk_C, 0x0068);
		}

		// class UBP_CatPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CatPerk__BP_CatPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CatPerk_C, 0x0068);
		}

		// class UBP_AcrobatPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AcrobatPerk__BP_AcrobatPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AcrobatPerk_C, 0x0068);
		}

		// class UBP_MaleFace02_C : public UCharacterFace
		TEST_METHOD(BlueprintGeneratedClass__BP_MaleFace02__BP_MaleFace02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MaleFace02_C, 0x01D8);
		}

		// class UBP_Emblem_TriumphOfDeath_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_TriumphOfDeath__BP_Emblem_TriumphOfDeath_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_TriumphOfDeath_C, 0x0060);
		}

		// class UBP_Emblem_TriTower_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_TriTower__BP_Emblem_TriTower_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_TriTower_C, 0x0060);
		}

		// class UBP_Battle4_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Battle4_Banner__BP_Battle4_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Battle4_Banner_C, 0x0060);
		}

		// class UBP_MetalDetailColor19_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor19__BP_MetalDetailColor19_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor19_C, 0x0078);
		}

		// class UBP_MetalDetailColor15_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor15__BP_MetalDetailColor15_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor15_C, 0x0078);
		}

		// class UBP_MetalDetailColor14_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor14__BP_MetalDetailColor14_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor14_C, 0x0078);
		}

		// class UBP_MetalDetailColor13_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor13__BP_MetalDetailColor13_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor13_C, 0x0078);
		}

		// class UBP_HairColor8_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor8__BP_HairColor8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor8_C, 0x0078);
		}

		// class UBP_HairColor7_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor7__BP_HairColor7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor7_C, 0x0078);
		}

		// class UBP_BackslickMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_BackslickMale01__BP_BackslickMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BackslickMale01_C, 0x0078);
		}

		// class UBP_LadderFists_RightStabMotion_C : public UBP_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LadderFists_RightStabMotion__BP_LadderFists_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LadderFists_RightStabMotion_C, 0x1108);
		}

		// class UBP_MeleeWeaponAnimationProfile_C : public UMeleeWeaponAnimationProfile
		TEST_METHOD(BlueprintGeneratedClass__BP_MeleeWeaponAnimationProfile__BP_MeleeWeaponAnimationProfile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MeleeWeaponAnimationProfile_C, 0x00C0);
		}

		// class UBTService_ObstacleNavigator_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTService_ObstacleNavigator__BTService_ObstacleNavigator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ObstacleNavigator_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ObstacleNavigator_C, LastActorLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ObstacleNavigator_C, CurrentMovementDistance, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ObstacleNavigator_C, GiveTurdIfCantReach, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ObstacleNavigator_C, UnknownData_AWNC, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ObstacleNavigator_C, TempSlot, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ObstacleNavigator_C, CantReach, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ObstacleNavigator_C, PartialPath, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ObstacleNavigator_C, HasGivenTurd, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_ObstacleNavigator_C, 0x00E2);
		}

		// class ABP_TurdHordeBotProjectile_C : public ABP_TurdProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TurdHordeBotProjectile__BP_TurdHordeBotProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TurdHordeBotProjectile_C, UnknownData_GJW1, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TurdHordeBotProjectile_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TurdHordeBotProjectile_C, 0x07D0);
		}

		// class UBP_BrigandineSpaulders_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BrigandineSpaulders__BP_BrigandineSpaulders_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BrigandineSpaulders_C, 0x01A0);
		}

		// class UBP_ContextPopupWrapper_Interface_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ContextPopupWrapper_Interface__BP_ContextPopupWrapper_Interface_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_Interface_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_Interface_C, CanvasPanel_Wrapper, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_Interface_C, ContextMenuWrapperButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_Interface_C, MenuAnchor_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupWrapper_Interface_C, Context_Popup, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ContextPopupWrapper_Interface_C, 0x0258);
		}

		// class UBP_BaseSpawnScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BaseSpawnScreen__BP_BaseSpawnScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseSpawnScreen_C, IsActive, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BaseSpawnScreen_C, 0x0231);
		}

		// class UBP_HourglassGauntlets1_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HourglassGauntlets1__BP_HourglassGauntlets1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HourglassGauntlets1_C, 0x01A0);
		}

		// class UBP_Chainmail_Mittens_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Chainmail_Mittens__BP_Chainmail_Mittens_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Chainmail_Mittens_C, 0x01A0);
		}

		// class UBP_SultansHelmetFaceplate_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SultansHelmetFaceplate__BP_SultansHelmetFaceplate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SultansHelmetFaceplate_C, 0x01C8);
		}

		// class UBP_Vaalsgard_faceplate_Ears_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Vaalsgard_faceplate_Ears__BP_Vaalsgard_faceplate_Ears_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Vaalsgard_faceplate_Ears_C, 0x01C8);
		}

		// class UBP_BlackSalletPaintedTilted_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BlackSalletPaintedTilted__BP_BlackSalletPaintedTilted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlackSalletPaintedTilted_C, 0x01C8);
		}

		// class UBP_PigFaceBascinet_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PigFaceBascinet__BP_PigFaceBascinet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PigFaceBascinet_C, 0x01C8);
		}

		// class ABP_Mace_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Mace__BP_Mace_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Mace_C, 0x1C28);
		}

		// class UBP_ShortSwordRingedGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortSwordRingedGuard__BP_ShortSwordRingedGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortSwordRingedGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortSwordRingedGuard_C, 0x0080);
		}

		// class UBP_Spear_ExiledHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Spear_ExiledHead__BP_Spear_ExiledHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Spear_ExiledHead_C, 0x0078);
		}

		// class UBP_Shield_RightStrikeMotion_C : public UBP_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shield_RightStrikeMotion__BP_Shield_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shield_RightStrikeMotion_C, 0x1160);
		}

		// class ABP_Polearm_C : public ABP_MordhauWeapon_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polearm__BP_Polearm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Polearm_C, 0x1C28);
		}

		// class UBP_Gothic_Shoulders_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Gothic_Shoulders__BP_Gothic_Shoulders_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gothic_Shoulders_C, 0x01A0);
		}

		// class UBP_Gambeson_ChestLow_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Gambeson_ChestLow__BP_Gambeson_ChestLow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gambeson_ChestLow_C, 0x01A0);
		}

		// class UBP_Estoc_Hunter_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Estoc_Hunter__BP_Estoc_Hunter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Estoc_Hunter_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Estoc_Hunter_C, 0x0080);
		}

		// class UBP_BishopsMantleLowered_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BishopsMantleLowered__BP_BishopsMantleLowered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BishopsMantleLowered_C, 0x01A0);
		}

		// class UBP_MailleHoodLoweredCoif_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MailleHoodLoweredCoif__BP_MailleHoodLoweredCoif_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MailleHoodLoweredCoif_C, 0x01A0);
		}

		// class UBP_HussarPauldronTrim_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarPauldronTrim__BP_HussarPauldronTrim_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarPauldronTrim_C, 0x01A0);
		}

		// class UBP_Emblem_Carcosa_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Carcosa__BP_Emblem_Carcosa_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Carcosa_C, 0x0060);
		}

		// class UBP_Emblem_Burninglegion_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Burninglegion__BP_Emblem_Burninglegion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Burninglegion_C, 0x0060);
		}

		// class UBP_Emblem_Brtoherhood_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Brtoherhood__BP_Emblem_Brtoherhood_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Brtoherhood_C, 0x0060);
		}

		// class UBP_Templar03_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Templar03__BP_Templar03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Templar03_C, 0x0060);
		}

		// class UBP_Mulzheim01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Mulzheim01__BP_Mulzheim01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mulzheim01_C, 0x0060);
		}

		// class UBP_Mordhau01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Mordhau01__BP_Mordhau01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mordhau01_C, 0x0060);
		}

		// class UBP_LongSkirt_Segmented_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LongSkirt_Segmented__BP_LongSkirt_Segmented_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongSkirt_Segmented_C, 0x01A0);
		}

		// class UBP_ArchersSallet_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArchersSallet__BP_ArchersSallet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArchersSallet_C, 0x01C8);
		}

		// class ABP_ClientModLoaderActor_C : public ACharacter
		TEST_METHOD(BlueprintGeneratedClass__BP_ClientModLoaderActor__BP_ClientModLoaderActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientModLoaderActor_C, UnknownData_Z8N1, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientModLoaderActor_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientModLoaderActor_C, ClientMods, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientModLoaderActor_C, ModList, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientModLoaderActor_C, ModListWidgetStayTime, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientModLoaderActor_C, DisableModList, 0x04E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ClientModLoaderActor_C, 0x04E5);
		}

		// class UBP_MaskedRoyalFlatTop_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MaskedRoyalFlatTop__BP_MaskedRoyalFlatTop_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MaskedRoyalFlatTop_C, 0x01C8);
		}

		// class UBP_messer_PigtailGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_PigtailGuard__BP_messer_PigtailGuard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_PigtailGuard_C, 0x0078);
		}

		// class UBP_messer_RuffianGrip_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_RuffianGrip__BP_messer_RuffianGrip_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_RuffianGrip_C, 0x0078);
		}

		// class UBP_messer_SwissSaber_grip1_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_SwissSaber_grip1__BP_messer_SwissSaber_grip1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_SwissSaber_grip1_C, 0x0078);
		}

		// class UBP_2hmace_WardensGrandmace_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2hmace_WardensGrandmace__BP_2hmace_WardensGrandmace_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2hmace_WardensGrandmace_C, 0x0078);
		}

		// class ABP_Billhook_C : public ABP_Polearm_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Billhook__BP_Billhook_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Billhook_C, 0x1C28);
		}

		// class UBP_Billhook_GuardsmanShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Billhook_GuardsmanShaft__BP_Billhook_GuardsmanShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Billhook_GuardsmanShaft_C, 0x0078);
		}

		// class UBP_HorseShieldAnimationProfile_C : public UBP_MeleeWeaponAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HorseShieldAnimationProfile__BP_HorseShieldAnimationProfile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HorseShieldAnimationProfile_C, 0x00C0);
		}

		// class UBP_BurgundianCuirass_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BurgundianCuirass__BP_BurgundianCuirass_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BurgundianCuirass_C, 0x01E8);
		}

		// class UDividedRecurve_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__DividedRecurve__DividedRecurve_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDividedRecurve_C, 0x0078);
		}

		// class UBP_BeartrapPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BeartrapPart__BP_BeartrapPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BeartrapPart_C, 0x0078);
		}

		// class UBP_JavelinWarDart_TournamentShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JavelinWarDart_TournamentShaft__BP_JavelinWarDart_TournamentShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JavelinWarDart_TournamentShaft_C, 0x0078);
		}

		// class UBP_JavelinWarDart_StandardShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JavelinWarDart_StandardShaft__BP_JavelinWarDart_StandardShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JavelinWarDart_StandardShaft_C, 0x0078);
		}

		// class UBP_JavelinWarDart_BarbedHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JavelinWarDart_BarbedHead__BP_JavelinWarDart_BarbedHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JavelinWarDart_BarbedHead_C, 0x0078);
		}

		// class UBP_LeatherLamellarShoulders_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherLamellarShoulders__BP_LeatherLamellarShoulders_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherLamellarShoulders_C, 0x01A0);
		}

		// class UBP_VeteranSingleCuffs_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteranSingleCuffs__BP_VeteranSingleCuffs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteranSingleCuffs_C, 0x01B8);
		}

		// class UBP_LongSkirt_LeatherStrips_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LongSkirt_LeatherStrips__BP_LongSkirt_LeatherStrips_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongSkirt_LeatherStrips_C, 0x01A0);
		}

		// class UBP_LongSkirt_Divided_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LongSkirt_Divided__BP_LongSkirt_Divided_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongSkirt_Divided_C, 0x01A0);
		}

		// class ABP_MordhauWeapon_C : public AMordhauWeapon
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauWeapon__BP_MordhauWeapon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauWeapon_C, ClashCapsuleBP, 0x1C20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauWeapon_C, 0x1C28);
		}

		// class UBP_RaisedArmetRegular_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RaisedArmetRegular__BP_RaisedArmetRegular_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RaisedArmetRegular_C, 0x01C8);
		}

		// class UBP_MaximilianChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MaximilianChest__BP_MaximilianChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MaximilianChest_C, 0x01E8);
		}

		// class UBP_HussarChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarChest__BP_HussarChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarChest_C, 0x01E8);
		}

		// class UBP_KnightPauldrons2x3_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KnightPauldrons2x3__BP_KnightPauldrons2x3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KnightPauldrons2x3_C, 0x01A0);
		}

		// class UBP_EnclosedFlatTopOrle_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_EnclosedFlatTopOrle__BP_EnclosedFlatTopOrle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EnclosedFlatTopOrle_C, 0x01C8);
		}

		// class UBP_BevoredSallet_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BevoredSallet__BP_BevoredSallet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BevoredSallet_C, 0x01C8);
		}

		// class UBP_Cloth_TunicDress_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth_TunicDress__BP_Cloth_TunicDress_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth_TunicDress_C, 0x01A0);
		}

		// class UBP_AventailTightened_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AventailTightened__BP_AventailTightened_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AventailTightened_C, 0x01A0);
		}

		// class UBP_ElizabethianSabatons_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ElizabethianSabatons__BP_ElizabethianSabatons_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ElizabethianSabatons_C, 0x01A0);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_2ARW, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AccessibleWidgetData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, FlowDirectionPreference, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_AGZ8, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0108);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_VH9S, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_KTAK, 0x01B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_MS66, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationCallbacks, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_IGZD, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0230);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_D8RF, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_OPM5, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_CJ1G, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_TX31, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WindowVisibility, 0x0456);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x0457);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_HCQ4, 0x0487);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_9PQT, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_CJVM, 0x04FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_2JGE, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_5TA4, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x053C);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_8DC7, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0120);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0120);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_CYCI, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_SAC3, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_RFZX, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D8);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_0I7A, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0060);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0060);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_XH81, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_HAGC, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bFlipForRightToLeftFlowDirection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_532U, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_DZ3S, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0270);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_J9G9, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_9RUH, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0068);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_463K, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_DTQP, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0428);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_KFE9, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_SJJR, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0130);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_71IM, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_R21F, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_NJLE, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_BEV8, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_CMD8, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_HP90, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_G9ZR, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_PRM0, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0770);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_0SUV, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0068);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_NLFX, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_EWL4, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01C0);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_DL9Q, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0068);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_DA8M, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0140);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_S1VG, 0x0CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_XX5K, 0x0D71);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_8SPN, 0x0D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_31CA, 0x0DA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0DF8);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_C4Y8, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_GHHO, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// class UDynamicEntryBoxBase : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBoxBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryBoxType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_62DC, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySpacing, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_BX46, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, SpacingPattern, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySizeRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryHorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryVerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_27SK, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, MaxElementSize, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_AEF0, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryWidgetPool, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBoxBase, 0x01C8);
		}

		// class UDynamicEntryBox : public UDynamicEntryBoxBase
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01D0);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_ZVNL, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x0417);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardTrigger, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_XHGU, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_CCCJ, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0450);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_D4V0, 0x09D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardTrigger, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x09F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x09F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x09F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_ZEE8, 0x09F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_OBER, 0x0A18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A28);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_JT6O, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_6O1D, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_SR7V, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0338);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0060);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_0X8B, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0150);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_3KDT, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_AR52, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_YVL4, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0130);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_J1SM, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_XTKF, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, bFlipForRightToLeftFlowDirection, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_VFFU, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_9V1I, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x0210);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_6PQH, 0x06AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_RHX8, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x06F0);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0060);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_5ADN, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0138);
		}

		// class UUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// class UUserListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntryLibrary, 0x0028);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserObjectListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntryLibrary, 0x0028);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, WheelScrollMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableScrollAnimation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableFixedLineOffset, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_HS5W, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, FixedLineScrollOffset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_JRSM, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetPool, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_AVSN, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0218);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_TGL5, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Orientation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bIsFocusable, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_XFQ6, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bReturnFocusToSelection, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_VFT5, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_1SW9, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnEntryInitialized, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0368);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, bFitInWindow, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x013A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x013B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_TTM7, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_7BQF, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0160);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0060);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_45NW, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_DLV1, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0550);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x0088);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0360);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x0088);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x0080);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_CWOJ, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0128);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_7KHD, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x042E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_BHFL, 0x042F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_G45L, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x0460);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0BC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0BC2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0BC3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_ZLHF, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_2ZB0, 0x0C70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C80);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_0YP1, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0130);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_TRCP, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0118);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_18AT, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0130);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_PX0R, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_IDFW, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_TSW0, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_BVVM, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0318);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_F3G8, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_F0X5, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_PE6Q, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0150);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, bOverrideDefaultStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_ZK57, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyleOverride, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, MinDesiredWidth, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_Z6FN, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_OV1U, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0668);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_K9IL, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0138);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_BH76, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_V2T0, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_DDMP, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_1MSG, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0140);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_0QZB, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbarTrack, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_2LUO, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Padding, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_WXAT, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0610);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_6CO6, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarPadding, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbarTrack, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0846);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAnimateWheelScrolling, 0x0847);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_GTXE, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollWhenFocusChanges, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_X80V, 0x0852);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WheelScrollMultiplier, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_8QF4, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0880);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_10OK, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_MGK9, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinAspectRatio, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_5SFH, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0158);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_2EYW, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_U25S, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// class USlateAccessibleWidgetData : public UObject
		TEST_METHOD(Class__UMG__SlateAccessibleWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, bCanChildrenBeAccessible, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleBehavior, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryBehavior, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_PK1G, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleTextDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryTextDelegate, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateAccessibleWidgetData, 0x0080);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MinValue, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MaxValue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_U7KR, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_X5L2, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x048F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_LG9L, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_C4LC, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04F8);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_3T8B, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0120);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_NVLH, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinFractionalDigits, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxFractionalDigits, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, bAlwaysUsesDeltaSnap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_8RO3, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_7959, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_V6HI, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_QXTF, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_FC5S, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_SF5Z, 0x0504);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0518);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_7ZUS, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0068);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, StrikeBrush, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bSimpleTextMode, 0x028E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_THLW, 0x028F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x02A0);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_AR82, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_Y7O7, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01B0);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_SJIT, 0x0372);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0388);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_6OQ6, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_XL4L, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x03C0);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_9LOA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_0079, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x07A8);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_9RH7, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0148);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_38L1, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_5OAC, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_3NJB, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0130);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_FAI7, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_3BMF, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_8L08, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0148);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0060);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_1MGK, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0378);
		}

		// class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__UMG__WidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationDelegateBinding, 0x0038);
		}

		// class UWidgetAnimationPlayCallbackProxy : public UObject
		TEST_METHOD(Class__UMG__WidgetAnimationPlayCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, UnknownData_604O, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationPlayCallbackProxy, 0x0048);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0060);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_3LB8, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, TemplateAsset, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Template, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0398);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_ZEVJ, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_RWMU, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_BNQ0, 0x0223);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_WZOI, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x03DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_PAPV, 0x03DB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x03E0);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0100);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_JX1U, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0138);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_8L4V, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_COIO, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_0L84, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0140);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_T22I, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_Q2D2, 0x012D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0140);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_9JZP, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_1YG1, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// class UBP_Laced_Boots_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Laced_Boots__BP_Laced_Boots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Laced_Boots_C, 0x01A0);
		}

		// class UClothConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigBase, 0x0028);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_1XG7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// class UClothSharedSimConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothSharedSimConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedSimConfigBase, 0x0028);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// class UClothPhysicalMeshDataBase_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothPhysicalMeshDataBase_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Vertices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Normals, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Indices, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, InverseMasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, BoneData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, NumFixedVerts, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, MaxBoneWeights, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, SelfCollisionIndices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, UnknownData_OTKW, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataBase_Legacy, 0x00E0);
		}

		// class UBP_GothicSabatons_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GothicSabatons__BP_GothicSabatons_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GothicSabatons_C, 0x01A0);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_G8LA, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0068);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_R13B, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0080);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_4VA6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0078);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_CJ66, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0098);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_9QX3, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0078);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_CKJT, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0080);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_TH5K, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0078);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_DJ2J, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0090);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_E1SQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0088);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_8S0L, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, UnknownData_FEHD, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy2, 0x00A8);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_V04X, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseQueryCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, UnknownData_EF41, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy2, 0x0068);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_STWE, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseRestoreCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, UnknownData_UV9X, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy2, 0x00A8);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_1GFF, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, SocketErrorDisconnectDelay, 0x1A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_FFZA, 0x1A84);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1AD0);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_0I1Y, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_8L5A, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_TG8D, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxSecondsInReceive, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, NbPacketsBetweenReceiveTimeTest, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ResolutionConnectionTimeout, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_OA0C, 0x0788);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x07C0);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_E11G, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0180);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_3FPH, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_GZ7C, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_3B7D, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_T5JL, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_E54F, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0250);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_TUNV, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x02B0);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_0UNC, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_14DU, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0308);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0248);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, MappedUniqueNetIdTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, CompatibleUniqueNetIdTypes, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_X0LU, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0188);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_9B95, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_FV1U, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_V27W, 0x01DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x01E0);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_EMV4, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_SWNA, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0370);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_6Y9K, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_O3DW, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_0YMN, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x02C0);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bEnableRemovalRequests, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_4H6C, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_IKOW, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_9FSX, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0078);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_YI3V, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// class ASpectatorBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_QR3M, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, RequestType, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bPendingReservationSent, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bCancelReservation, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_NBMP, 0x036B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconClient, 0x0398);
		}

		// class ASpectatorBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_SXXO, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_9GYG, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_WWZ0, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconHost, 0x02C0);
		}

		// class USpectatorBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, bRestrictCrossConsole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_913B, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, Reservations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_1F22, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconState, 0x0060);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x02B0);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0248);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_VUSR, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x0730);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_C4EB, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_R8YQ, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySet, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Modulation, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_PQZV, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_VEQR, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_USG1, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_1I3M, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x06D0);
		}

		// class UAudioGenerator : public UObject
		TEST_METHOD(Class__AudioMixer__AudioGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioGenerator, UnknownData_YCEH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioGenerator, 0x00A8);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_K2ZX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x0108);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_58DT, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x0088);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_DLVL, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x00D0);
		}

		// class USubmixEffectReverbFastPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbFastPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbFastPreset, UnknownData_2L7T, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbFastPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbFastPreset, 0x00D8);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, OwningSynthComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_C0QW, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x0380);
		}

		// class UModularSynthPresetBank : public UObject
		TEST_METHOD(Class__Synthesis__ModularSynthPresetBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthPresetBank, Presets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthPresetBank, 0x0038);
		}

		// class UModularSynthLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__ModularSynthLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthLibrary, 0x0028);
		}

		// class UModularSynthComponent : public USynthComponent
		TEST_METHOD(Class__Synthesis__ModularSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, VoiceCount, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, UnknownData_86P1, 0x06D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthComponent, 0x0D70);
		}

		// class USourceEffectBitCrusherPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectBitCrusherPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, UnknownData_OISF, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectBitCrusherPreset, 0x0078);
		}

		// class USourceEffectChorusPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectChorusPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, UnknownData_MX33, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectChorusPreset, 0x0098);
		}

		// class USourceEffectDynamicsProcessorPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, UnknownData_3L75, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, Settings, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectDynamicsProcessorPreset, 0x00B8);
		}

		// class UEnvelopeFollowerListener : public UActorComponent
		TEST_METHOD(Class__Synthesis__EnvelopeFollowerListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, UnknownData_WEVJ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvelopeFollowerListener, 0x00D0);
		}

		// class USourceEffectEnvelopeFollowerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEnvelopeFollowerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, UnknownData_V29F, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEnvelopeFollowerPreset, 0x0080);
		}

		// class USourceEffectEQPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, UnknownData_3RGY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEQPreset, 0x0088);
		}

		// class USourceEffectFilterPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, UnknownData_HQAU, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFilterPreset, 0x0080);
		}

		// class USourceEffectFoldbackDistortionPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFoldbackDistortionPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, UnknownData_DDA5, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFoldbackDistortionPreset, 0x0080);
		}

		// class USourceEffectMidSideSpreaderPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectMidSideSpreaderPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, UnknownData_XKHS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectMidSideSpreaderPreset, 0x0080);
		}

		// class USourceEffectPannerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPannerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, UnknownData_JHNI, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPannerPreset, 0x0078);
		}

		// class USourceEffectPhaserPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPhaserPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, UnknownData_OB8P, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPhaserPreset, 0x0088);
		}

		// class USourceEffectRingModulationPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectRingModulationPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, UnknownData_VB94, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectRingModulationPreset, 0x0090);
		}

		// class USourceEffectSimpleDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectSimpleDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, UnknownData_OM59, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectSimpleDelayPreset, 0x0098);
		}

		// class USourceEffectStereoDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, UnknownData_K8NH, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectStereoDelayPreset, 0x0090);
		}

		// class USourceEffectWaveShaperPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectWaveShaperPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, UnknownData_P2DM, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectWaveShaperPreset, 0x0078);
		}

		// class UAudioImpulseResponse : public UObject
		TEST_METHOD(Class__Synthesis__AudioImpulseResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, ImpulseResponse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NumChannels, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, SampleRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NormalizationVolumeDb, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, UnknownData_Z3TC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, IRData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioImpulseResponse, 0x0058);
		}

		// class USubmixEffectConvolutionReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectConvolutionReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, Settings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, ImpulseResponse, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, BlockSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, bEnableHardwareAcceleration, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, UnknownData_IO0S, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectConvolutionReverbPreset, 0x00B8);
		}

		// class USubmixEffectDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_B2TZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, Settings, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, DynamicSettings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_PWXY, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDelayPreset, 0x0090);
		}

		// class USubmixEffectFilterPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, UnknownData_X026, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFilterPreset, 0x0080);
		}

		// class USubmixEffectFlexiverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFlexiverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, UnknownData_OU9L, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFlexiverbPreset, 0x0088);
		}

		// class USubmixEffectTapDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectTapDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_90YD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, Settings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_U96R, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectTapDelayPreset, 0x00B0);
		}

		// class USynth2DSlider : public UWidget
		TEST_METHOD(Class__Synthesis__Synth2DSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueY, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueXDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueYDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, SliderHandleColor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IndentHandle, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, Locked, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_AX7M, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, StepSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IsFocusable, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_EDWL, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureBegin, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureEnd, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureBegin, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureEnd, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedY, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_22W6, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynth2DSlider, 0x0478);
		}

		// class UGranularSynth : public USynthComponent
		TEST_METHOD(Class__Synthesis__GranularSynth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, GranulatedSoundWave, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, UnknownData_AFBB, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGranularSynth, 0x0A90);
		}

		// class UMonoWaveTableSynthPreset : public UObject
		TEST_METHOD(Class__Synthesis__MonoWaveTableSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, PresetName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_94EK, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, LockKeyframesToGrid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTableResolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_H2JE, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_JKL6, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonoWaveTableSynthPreset, 0x0170);
		}

		// class USynthComponentMonoWaveTable : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentMonoWaveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnTableAltered, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnNumTablesChanged, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, CurrentPreset, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, UnknownData_8IOU, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMonoWaveTable, 0x0E10);
		}

		// class USynthSamplePlayer : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthSamplePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, SoundWave, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSampleLoaded, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSamplePlaybackProgress, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, UnknownData_GWMG, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSamplePlayer, 0x0800);
		}

		// class USynthKnob : public UWidget
		TEST_METHOD(Class__Synthesis__SynthKnob)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, StepSize, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseSpeed, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseFineTuneSpeed, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_X96N, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterUnits, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ValueDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Locked, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, IsFocusable, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_NN4N, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureBegin, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureEnd, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureBegin, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureEnd, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnValueChanged, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_XO2D, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthKnob, 0x0400);
		}

		// class URconCommand : public UObject
		TEST_METHOD(Class__Mordhau__RconCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URconCommand, CommandInfo, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URconCommand, bLogCommandUsage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URconCommand, UnknownData_78KM, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URconCommand, 0x0080);
		}

		// class UAdminListCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__AdminListCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminListCommand, 0x0080);
		}

		// class UStartMatchmakingMatch : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__StartMatchmakingMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartMatchmakingMatch, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartMatchmakingMatch, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartMatchmakingMatch, UnknownData_TC6H, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartMatchmakingMatch, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartMatchmakingMatch, Match, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartMatchmakingMatch, GroupID, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartMatchmakingMatch, GroupName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartMatchmakingMatch, Group, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartMatchmakingMatch, 0x0190);
		}

		// class USetMatchmakingMatchServerDetails : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__SetMatchmakingMatchServerDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetMatchmakingMatchServerDetails, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetMatchmakingMatchServerDetails, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetMatchmakingMatchServerDetails, UnknownData_NKG6, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetMatchmakingMatchServerDetails, Match, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetMatchmakingMatchServerDetails, ServerDetails, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetMatchmakingMatchServerDetails, 0x0128);
		}

		// class UGetMatchmakingPenalty : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__GetMatchmakingPenalty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingPenalty, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingPenalty, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingPenalty, UnknownData_K7U5, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingPenalty, PlayerEntity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingPenalty, GroupName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingPenalty, GroupID, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetMatchmakingPenalty, 0x0098);
		}

		// class UPenalizeForLeavingActiveMatch : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__PenalizeForLeavingActiveMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenalizeForLeavingActiveMatch, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenalizeForLeavingActiveMatch, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenalizeForLeavingActiveMatch, UnknownData_ZI3W, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenalizeForLeavingActiveMatch, PlayerEntity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenalizeForLeavingActiveMatch, GetMatchmakingPenalty, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenalizeForLeavingActiveMatch, GroupName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenalizeForLeavingActiveMatch, GroupID, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenalizeForLeavingActiveMatch, LeaveCount, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenalizeForLeavingActiveMatch, UnknownData_27C3, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenalizeForLeavingActiveMatch, LeaveTimestamp, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenalizeForLeavingActiveMatch, BanEndTimestamp, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPenalizeForLeavingActiveMatch, 0x00B8);
		}

		// class URequestPartyStats : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__RequestPartyStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestPartyStats, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestPartyStats, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestPartyStats, UnknownData_0SM9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestPartyStats, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestPartyStats, PlayFabIds, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestPartyStats, bSuccess, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestPartyStats, UnknownData_ST7O, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URequestPartyStats, 0x0078);
		}

		// class UMeleeWeaponAnimationProfile : public UObject
		TEST_METHOD(Class__Mordhau__MeleeWeaponAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponAnimationProfile, Attacks, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponAnimationProfile, ParryMotion, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponAnimationProfile, RightStabBounce, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponAnimationProfile, LeftStabBounce, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponAnimationProfile, RightStabBounce1P, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponAnimationProfile, LeftStabBounce1P, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponAnimationProfile, RightStrikeBounce, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponAnimationProfile, LeftStrikeBounce, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponAnimationProfile, RightStrikeBounce1P, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeleeWeaponAnimationProfile, LeftStrikeBounce1P, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeWeaponAnimationProfile, 0x00C0);
		}

		// class UMeleeWeaponComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__MeleeWeaponComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeWeaponComponent, 0x00B0);
		}

		// class UMessageCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__MessageCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageCommand, 0x0080);
		}

		// class UMods : public UObject
		TEST_METHOD(Class__Mordhau__Mods)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMods, 0x0028);
		}

		// class UGetMod : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__GetMod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMod, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMod, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMod, UnknownData_V9GE, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetMod, 0x0058);
		}

		// class UDownloadModfilesById : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__DownloadModfilesById)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDownloadModfilesById, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDownloadModfilesById, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDownloadModfilesById, UnknownData_PO23, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDownloadModfilesById, 0x0060);
		}

		// class AAdvancedCharacter : public ACharacter
		TEST_METHOD(Class__Mordhau__AdvancedCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_L4FW, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_884G, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LastPlayerState, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_BUQW, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, InstanceOwner, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OutOfBoundsSince, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bIsDead, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bIsBurning, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bIsRagdollFalling, 0x04F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_NIRF, 0x04F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, RagdollFallingFromPerchRadius, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, IsBurningSmoothed, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DistanceIntoFireFieldSmoothed, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DistanceIntoFireField, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DistanceIntoSmokeFieldSmoothed, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DistanceIntoSmokeField, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookUpValue, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_AFU5, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OriginalMesh, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OnCharacterDied, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OnTakeDamage, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_RQE8, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OnCharacterDestroyed, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OnTornOff, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OnUnPossessed, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OnChangedTeam, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OnCharacterBecomeViewTarget, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OnCharacterEndViewTarget, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_OO17, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UniqueAdvancedCharacterIndex, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, MouseSmoothedTurnValue, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, MouseSmoothingTurnVelocity, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, MouseSmoothedLookUpValue, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, MouseSmoothingLookUpVelocity, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_URJO, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, PrePhysTickFunction, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LODDeltaTime, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LateLODDeltaTime, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_U5TQ, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, Team, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bDisableOverlapsIfClientNotViewTarget, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_GL4R, 0x0652);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, TagSystemComponent, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DismemberableComponent, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, EquipmentSystemComponent, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DriverComponent, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, MotionSystemComponent, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, PerkSystemComponent, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, InteractionSystemComponent, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, CharacterVoiceComponent, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, StaminaStatComponent, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DamageableComponent, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, HealthStatComponent, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, BodyThudder, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepAudioComponentCount, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_EB57, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepAudioComponents, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_EY3B, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepLODDistance, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepEffectsMaxCameraDist, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_SPYG, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FeetBones, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepDecalSize, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_X4YL, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepDecals, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepParticles, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepSound, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepSoundZOffset, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepVolumeVelocityRangeIn, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepVolumeVelocityRangeOut, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepPitchVelocityRangeIn, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepPitchVelocityRangeOut, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepVolumeModifierViewTarget, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepVolumeModifierAlly, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepVolumeModifierEnemy, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FootstepArmorTier, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_1BNF, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ClientPhysicsAsset, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, BodyRagdollPhysicsAsset, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DismemberedQueue, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, MoveCompVelocityBeforeDeath, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LastNonZeroVelocityTime, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bCanReceiveClientsideHits, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_KRHX, 0x07E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DamageArmorTierOverride, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DissolveDuration, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_I3B7, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LateTickComponent, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DistanceToCameraHeuristic, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DistanceToCamera, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OcclusionToCamera, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bSkipAnimPoseOnClientWhenNotRendered, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_8T2R, 0x0805);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DistanceToCameraMeshOffset, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LODRank, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LODBucketLevel, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bFancyMeshEffects, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_2KP7, 0x081D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FancyMeshEffectsTurnOnDistance, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FancyMeshEffectsTurnOffDistance, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bForceMaxQuality, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ReplicatedCharacterFlags, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bWasEverPossessedByLocalPlayer, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_4MLW, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LastPossessionTime, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, RagdollFallingGetUpDuration, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, RagdollFallingGetUpStartTime, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, RagdollFallingStartTime, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, RagdollFallingMinTime, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, RagdollFallingMinVelocityToGetUp, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, RagdollFallingTimeAtMinVelocityToGetUp, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_HB73, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, JumpCooldown, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bJumped, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bIsAirborneFromJump, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_L4MO, 0x085A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, AirborneTime, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, SmokeDistanceMaxValue, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, SmokeDistanceSmoothInterpSpeed, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, CurrentSmokeField, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, IsBurningSmoothInterpSpeed, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FireDistanceMaxValue, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FireDistanceSmoothInterpSpeed, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, CurrentFireField, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FireInstigator, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FireAgent, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FireDamage, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FireDamageTick, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FireEnd, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LastFireDamageTime, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bMeshesReceiveDecals, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_5CWA, 0x08A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, CurrentProjectile, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bTurnUsesControllerInputYawScale, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bAddForwardAxisToMovementInput, 0x08B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bAddRightAxisToMovementInput, 0x08B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_C51U, 0x08B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, SpawnTurnValue, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookUpLimit, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookDownLimit, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, TurnLimit, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ReplicatedLookUpValue, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_LH21, 0x08C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookUpValueSmoothingTarget, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookUpValueSmoothingFrom, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookUpValueSmoothingStartTime, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookUpValueSmoothingEndTime, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookSmoothingSlowAlpha, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, TurnRateCap, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, TurnRateCapTarget, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookUpRateCap, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookUpRateCapTarget, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bTurnRateIgnoresCap, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_BTYV, 0x08ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, TurnCapRemaining, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookUpCapRemaining, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LastObservedLocation, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, AccumulatedLocationLag, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DelayedLocationDeltas, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, CurrentLocationLagInduction, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LocationLagInductionTarget, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LocationLagInductionChangeSpeed, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LocationLagInductionCounterweight, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LastObservedLook, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, AccumulatedLookLag, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DelayedLookDeltas, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, CurrentLookLagInduction, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookLagInductionTarget, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookLagInductionChangeSpeed, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LookLagInductionCounterweight, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bPerformCustomDepthHighlight, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bIsHighlighted, 0x0969);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bIsInteractable, 0x096A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_M3SA, 0x096B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, MarkerWidgetComponentClass, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, MarkerWidgetClass, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, MarkerWidgetRelativeTransform, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, MarkerWidgetAttachSocket, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, MarkerWidgetComponent, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bCannotRequestSuicide, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bWillStopMelee, 0x09C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bWillBleedOutOnKill, 0x09C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_238J, 0x09C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, BleedingOutRemainingTime, 0x09C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bIsBleedingOut, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_LWZ6, 0x09C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DeathParticles, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DeathParticlesSocket, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bDisableHealingItems, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, Health, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ReplicatedHealth, 0x09E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_VOJ7, 0x09E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, HealthRegenDelay, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, HealthRegenPerTick, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_3ATN, 0x09E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, HealthRegenTickRate, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bIgnoreGameStateHealthRegenRestriction, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_SHSD, 0x09F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, OutOfBoundsKillTime, 0x09F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bIsAllowedOutOfBounds, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bTeamkillsCountForAutoKick, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_6PVF, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ReflectMeleeDamagePercentage, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bHasLastChance, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_81ZV, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LastChanceHealAmount, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ReceivedDamageModifier, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ReceivedFallDamageModifier, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ReceivedTeamDamageModifier, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ReceivedFireDamageModifier, 0x0A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ReceivedRangedDamageModifier, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ReceivedDamageAbsorption, 0x0A1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ReceivedDamageMax, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, KnockbackFlinch, 0x0A24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, HitEffect, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, BurningParticles, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, BurningAttachSocket, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, BurningSound, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FallDamageSound, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, FallDamageSoundAttachToBone, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, CurrentBurningParticles, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, CurrentBurningSound, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, NetDamage, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DeathTime, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ViewTargetAttenuationVolumeMultiplier, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_P17S, 0x0A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, ViewTargetAttenuationOverride, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bForceLongDeathYell, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_G6AU, 0x0AA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, HurtYell, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DeathYell, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, DedicatedServerAnimFrameSkipLOD, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, AdditiveOverrideType, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, AdditiveOverrideEndTime, 0x0AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, AdditiveOverrideStartTime, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LastFlinchAdditiveName, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, LastFlinchAdditiveTime, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, CharacterSurface, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_GD1G, 0x0AD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, SphericalLimbs, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, RagdollForceMultIfDmgAgent, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, bForceRagdollIfDmgAgent, 0x0AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedCharacter, UnknownData_ATQJ, 0x0AF5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAdvancedCharacter, 0x0AF8);
		}

		// class AMordhauVehicle : public AAdvancedCharacter
		TEST_METHOD(Class__Mordhau__MordhauVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnknownData_5MMB, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, ActionToDescriptionMap, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bShowVehicleHealth, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bIsLadder, 0x0B51);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bIsHorse, 0x0B52);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnknownData_EIUT, 0x0B53);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, LastObservedVehicleYaw, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bWasEverDriven, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnknownData_HEWR, 0x0B59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, CurrentUnusedTime, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnusedNetUpdateFrequency, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, OriginalNetUpdateFrequency, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bTickDriverAnimsAfterOurs, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bUseVisualPingCompensationOnAttacks, 0x0B69);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bWillDieIfUnused, 0x0B6A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnknownData_MVR5, 0x0B6B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, MinTimeToStartUnusedDying, 0x0B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnusedDyingHealthReduction, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnknownData_XHHV, 0x0B71);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnusedDyingHealthReductionInterval, 0x0B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bCanDriverRegenHealth, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bCanDriverRegenStamina, 0x0B79);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnknownData_7TZW, 0x0B7A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, MinimumInteractableVelocity, 0x0B7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, MaxDistanceCorrectionForLeaveSpot, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bDisableCameraDistance, 0x0B84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bUseDriverTurnCaps, 0x0B85);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bCounteractTurnWithSecondaryTurn, 0x0B86);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bResetSecondaryTurnWhenNoDriver, 0x0B87);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bResetLookUpWhenNoDriver, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnknownData_9MDY, 0x0B89);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, SecondaryTurnValue, 0x0B8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, SecondaryTurnLimit, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, ReplicatedSecondaryTurnValue, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnknownData_R5GH, 0x0B95);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, SecondaryTurnValueSmoothingTarget, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, SecondaryTurnValueSmoothingFrom, 0x0B9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, SecondaryTurnValueSmoothingStartTime, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnknownData_TA9H, 0x0BA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, Driver, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnknownData_LHAU, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, VehicleName, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, AttachSocketName, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, UnknownData_KEY8, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, AttachSocketOffset, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, DetachSocketName, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bUseDetachRotation, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bLeaveOnDamage, 0x0C19);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bLeaveOnDamageIfFriendly, 0x0C1A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, bDisarmOnEnter, 0x0C1B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, MainAnimationType, 0x0C1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, MinXYDistanceToEnter, 0x0C24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauVehicle, MinZDistanceToEnter, 0x0C28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauVehicle, 0x0C30);
		}

		// class AMordhau1DVehicle : public AMordhauVehicle
		TEST_METHOD(Class__Mordhau__Mordhau1DVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhau1DVehicle, LastRequestedLeaveTime, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhau1DVehicle, bLeaveVehicleWhenTryingToStepOutsideLine, 0x0C34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhau1DVehicle, UnknownData_RJ2B, 0x0C35);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhau1DVehicle, 0x0C40);
		}

		// class AMordhauAIController : public AAIController
		TEST_METHOD(Class__Mordhau__MordhauAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_UG2Q, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, FacingActor, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, FacingSkelMesh, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, FacingBone, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_3VKH, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, SightConfig, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, HearingConfig, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, DamageConfig, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_DUOX, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, DesiredControlRotationOverride, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, ReallyCloseEnemyCached, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, LastClosestEnemy, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bIsClosestEnemySaturated, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_XTJW, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, ClosestEnemyOverride, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, ClosestEnemyIgnoreSet, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bFirstRun, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_ECFM, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, LODDeltaTime, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, RandomFloat, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_HFEH, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, BotProfile, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, BehaviorProfile, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_JRX7, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, RotationInterpolationTime, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, CharacterProfile, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, CustomizationReplicationActor, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bUsePassedCustomizationReplicationActor, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_8NXP, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, EnemyScanInterval, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, EnemyScanIntervalVariance, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bAutoRespawn, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bWantsRespawn, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_TER4, 0x055E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, NextRespawnTime, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bWants1DMovementBackwards, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_8B7N, 0x0565);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, DesiredClimbTarget, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bEnableAnticipateTurns, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bEnableObstacleAvoidance, 0x0575);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bEnableSeparation, 0x0576);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bEnableOptimizeVisibility, 0x0577);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bEnableOptimizeTopology, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bEnablePathOffset, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, bEnableSlowdownAtGoal, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_VFF3, 0x057B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, SeparationWeight, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, CollisionQueryRange, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, PathOptimizationRange, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, AvoidanceRangeMultiplier, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, AvoidanceQuality, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, SimulationState, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_TE0W, 0x058E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, DefaultNavQueryFilter, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, Team1NavQueryFilter, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, Team2NavQueryFilter, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, NoLadderNavQueryFilter, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_O0YS, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, MidPointAcceptanceRadius, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauAIController, UnknownData_C4SO, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauAIController, 0x0600);
		}

		// class UAdvancedCharacterAnimInstance : public UAnimInstance
		TEST_METHOD(Class__Mordhau__AdvancedCharacterAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, GroundingChannels, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, bWantsGrounding, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, UnknownData_1UDB, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, RootTranslationOffsetInternal, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, RootTranslationOffset, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, RootRotationOffsetInternal, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, RootRotationOffset, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, RootRotationPivot, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, TranslationInterpSpeed, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, RotationInterpSpeed, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, RootRotationOffsetFactor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, LimbRotationOffsetFactor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, RootLiftLimits, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, GroundingWeight, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, AccumulatedLocationLag, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, AccumulatedTurnLag, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, bIsAirborne, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, UnknownData_4EBH, 0x02ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, LastLand, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, LastJump, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, AirborneTime, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, bJumped, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, bAirborneFromJump, 0x02FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, bIsDead, 0x02FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, UnknownData_KGVT, 0x02FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, DeathDirection, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, AdditiveOverrideType, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, AdditiveOverrideWeight, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, AdditiveOverrideNoneTime, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, AdditiveOverrideTypeNormalizedTime, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, FlinchDirection, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, FlinchIsHead, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, AltFlinchDirection, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, AltFlinchIsHead, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, LastDeltaSeconds, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterAnimInstance, UnknownData_ROG5, 0x032C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedCharacterAnimInstance, 0x0330);
		}

		// class UCreatureAnimInstance : public UAdvancedCharacterAnimInstance
		TEST_METHOD(Class__Mordhau__CreatureAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, MinEndBone2DDistanceToRetrace, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, UnknownData_F871, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, GroundingLimbs, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, bComputeGroundingRotation, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, UnknownData_GYQS, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, LandOffsetBlendInTime, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, LandOffsetBlendInSpeed, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, LandOffsetBlendOutSpeed, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, LandOffset, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, bDoNotAddLandOffsetToGrounding, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, UnknownData_V0LY, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, LandOffsetFactorByAirTime, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreatureAnimInstance, UnknownData_T1ZO, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreatureAnimInstance, 0x0380);
		}

		// class UMordhauAnimInstance : public UCreatureAnimInstance
		TEST_METHOD(Class__Mordhau__MordhauAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, CreatedFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LastUpdateFrame, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, InternalScaledTimeSeconds, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, MeshRelativeZScale, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FaceCustomization, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Dismemberment, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, PreviousRightHandEquipment, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, MainEquipmentPtr, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, MainAnimationType, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bWasRagdollFalling, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_L094, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LastRagdollFallingTime, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bShouldPerformInstantAnimSwitch, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_IJP7, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bIsGetUpFront, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_XE3P, 0x03E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, GetUpAnimationDuration, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, GetUpRotation, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, DeathSyncedRandom, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_YUDU, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsDedicatedServer, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AnimLOD0, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AnimLOD1, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RecentlyRendered, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RecentlyRenderedNonAuth, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_G8O0, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AnimLOD0Distance, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AnimLOD1Distance, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsFemale, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_6O9I, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bIsClimbingA, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ClimbOffsetA, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ClimbOffsetEndOffsetA, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ClimbLedgeOffsetA, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsSlowClimbingA, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ClimbRotationA, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bIsClimbingB, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_XUU9, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ClimbOffsetB, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ClimbOffsetEndOffsetB, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ClimbLedgeOffsetB, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ClimbRotationB, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsSlowClimbingB, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FastSmoothedIsCrouching, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnclampedFastSmoothedIsCrouching, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, CrouchSpringState, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ServerCrouchSpeed, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, CrouchSpringLimits, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, CrouchSpringStiffness, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UncrouchSpringStiffness, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, CrouchSpringDamping, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, CrouchSpringMass, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_Y6TQ, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleTransitionAnimation, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleTransitionBlendWeight, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleTransitionComponentLocation, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleTransitionComponentRotation, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsDrivingFloat, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_M623, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LowerBodyRotationOffset, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_W8HS, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Direction, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, MovementCorrectionHips, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, MovementCorrectionHipsInterpSpeed, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, MovementCorrectionAnimRate, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, DirectionWithOffset, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, DirectionOffset, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, DirectionOffsetSlowInterpSpeed, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, DirectionOffsetSlow, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_1PLV, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Velocity, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SmoothedVelocity, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, OneToZeroAtWalkSpeed, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_BNJG, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AnimRateFactor1PMaxSprint, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, MovementSpeedScale, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, MovementAnimRate, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SpeedWarping, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ThirdPersonVelocity, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bUseBackBlendSpace, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_EDS7, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, StopBounce, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, StopBounceWorld, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, StopBounceLimit, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BounceInterpSpeedIn, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BounceInterpSpeedOut, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BounceDuck, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BounceDuckLimit, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_10HX, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SlowVelocityLagTime, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_AJ01, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FastVelocityLagTime, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, StopTiltFactor, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, StopDuckFactor, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AngularVelocityInterpSpeed, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AngularVelocity, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AbsoluteAngularVelocityLowerBody, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_AXIK, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AngularVelocityLowerBody, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_GUD8, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AngularVelocityLowerBodyWindow, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_HQRH, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AnimatedMovementDirectionInCompSpace, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AngularVelocityPitch, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SpringPitchYawValue, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, PitchSpringState, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, YawSpringState, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SpringPitchYawStiffness, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SpringPitchYawDamping, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SpringPitchYawMass, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HandSpringWeight, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_I88A, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bIsFirstPerson, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_Q7PV, 0x0639);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsFirstPersonFloat, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsNotFirstPersonFloat, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, CameraCollisionOffset, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RightWeaponBoneBaseTransform, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, WeaponSlideVector, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, WeaponSlideVectorInverse, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_NWYV, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, WeaponSlideCompensationWeight, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RightShoulderOffset1P, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LeftShoulderOffset1P, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ShoulderOffset1PWeight, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LeftShoulderIdleOffset1P, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RightHandIKOffset, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RightHandIKOffsetWeight, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, OffhandIKWeight, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_ZEEH, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, OffhandSlidingAxis, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bIsOffhandFixedTarget, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_OJSR, 0x0711);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, OffhandFixedTargetVector, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LeftHandGripPosition, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RightHandGripPosition, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RightHandGripRotation, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, OffhandIsRightHand, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, JumpAnimation, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FallingAnimation, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LandAnimation, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_E9AT, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BouncyMagnitudeOffset, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BouncySlowVelocityLagTime, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_AUZL, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BouncyFastVelocityLagTime, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_J9P0, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SkinnyPose, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FatPose, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, StrongPose, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BouncyInterpSpeed, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BouncyFactorBreasts, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BouncyFactorArms, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BouncyFactorBelly, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BouncyFactorLegs, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BreastsT, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LowerBackBellyT, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SpineAdjustT, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LeftArmAdjustT, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RightArmAdjustT, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LeftUpLegAdjustT, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RightUpLegAdjustT, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsTankFloat, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsDwarfFloat, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, DwarfSlowerAnimSpeedFactor, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Fat, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Skinny, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Strong, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsHeadDismembered, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, NeckDismemberedRotation, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LeftShoulderDismemberedRotation, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsLeftArmDismembered, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RightShoulderDismemberedRotation, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsRightArmDismembered, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, IsAnythingDismembered, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, TrackingWeight, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_RSRC, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LookingAtRotationNeck, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LookingAtRotationHead, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LookingAtRotationEyes, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HideEars, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HideNose, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BreathCurve, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HealthToBreathDuration, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Breath, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_4FNO, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, CounterCompensateLookWeight, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_8XUB, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, CounterCompensateRotation, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LookUpValue, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RightLegBendBlendWeight, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SpineBendBlendWeight, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SpineArmsCompensationFactor, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, TurnValue, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LeftHandIsEmpty, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AtmosphericsWeight, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Arms3PSyncWeight, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_P6T7, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, BlockDirection, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, DisarmDirection, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SpineSpaceAdditive, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LeftTorsoBlendWeight, 0x0994);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AttackBounce, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, RangedDrawnAdditive, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SwayRotation, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SwayWeight, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ParryAdditive, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, ParryPushAdditive, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AltParryPushAdditive, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LowerBodyBlendSpaceBlendTime, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_89TX, 0x09D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UpperBlendSpaceA, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UpperBlendSpaceABlendTime, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_NT6R, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UpperAdditiveA, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UpperBlendSpaceB, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UpperBlendSpaceBBlendTime, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_75V3, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UpperAdditiveB, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bIsCurrentUpperA, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_6NMZ, 0x0A09);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LowerBodyAnimationA, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LowerBodyAnimationB, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HorseUpperRearing, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bIsCurrentLowerA, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bIsHorseRearing, 0x0A29);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_YOZ6, 0x0A2A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Couching, 0x0A2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Rearing, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Lean, 0x0A34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleAnimTime, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleAnimRate, 0x0A3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleLeftHandTarget, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleRightHandTarget, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleTurn, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleLookUp, 0x0A5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleLeftFootTarget, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleRightFootTarget, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleLeftFootRotation, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleRightFootRotation, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleVelocity, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleDirection, 0x0A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleSeat, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleActorRotation, 0x0AA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleRotationOffset, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, VehicleSeatRotation, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bBallistaReloading, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_2PXT, 0x0AC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HitEffectIKWeight, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HitEffectLocationSlideSpeed, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HitEffectDisableSpeed, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HitEffectIKLocation, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HitEffectIKLocationStart, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HitEffectRotation, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HitEffectRotationStart, 0x0AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_GGPR, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchFreezeBlendInDuration, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchFreezeRotationBlendInSpeed, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchFreezeTranslationBlendInSpeed, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchFreezeBlendInAlpha, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchBlendInDuration, 0x0B1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchRotationBlendInSpeed, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchTranslationBlendInSpeed, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchRotationBlendOutSpeed, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchTranslationBlendOutSpeed, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchRotationBlendOutSpeedFast, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchTranslationBlendOutSpeedFast, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchPitchAmount, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchYawAmount, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchPitchYawFactor, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchHipsZFactor, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, WeaponDirHipsZFactor, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, TranslationNonHipsFactor, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchRotationTarget, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchTranslationTarget, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchHipsTranslationTarget, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchHitSpineIdx, 0x0B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, FlinchStartTime, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, CurrentFlinchSpineRotationsCombined, 0x0B7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HipsFlinchRotation, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HipsFlinchTranslation, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HipsFlinchTranslationInternal, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LowerBackFlinchRotation, 0x0BAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, LowerBackFlinchTranslation, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SpineFlinchRotation, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, SpineFlinchTranslation, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Spine1FlinchRotation, 0x0BDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Spine1FlinchTranslation, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, NeckFlinchRotation, 0x0BF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, NeckFlinchTranslation, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HeadFlinchRotation, 0x0C0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, HeadFlinchTranslation, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_WeaponSlideVectorIsNonzero, 0x0C24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_UBCrouchAlpha, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LBCrouchAlpha, 0x0C2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_UBCrouchSpine, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_UBCrouchForearms, 0x0C3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_UBCrouchArms, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_UBCrouchHead, 0x0C54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_UBCrouchShoulder, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_UBSpineArmsCompensationAlpha, 0x0C6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_UBSpineArmsCompensationRotator, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bHelper_LBFootShuffling, 0x0C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_O8ED, 0x0C7D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LBFootShufflingPlayRate, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bHelper_LBFootShufflingRight, 0x0C84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_B2MJ, 0x0C85);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LBDirectionOffsetSlowRotator, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LBDirectionOffsetSlowRotatorInverse, 0x0C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LBDirectionOffsetSlowHipsZ, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LBDirectionOffsetSlowHipsZInverse, 0x0CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LBDirectionOffsetSlowFootRotationOffset, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_UBVelocity, 0x0CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, bHelper_LBVelocityIsZero, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_Q2M7, 0x0CC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LBCrouchOffset, 0x0CCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LBCrouchOffsetInverse, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LBHipsZOverrideAlpha, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_TrackingWeightAlpha, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_BreathAlpha, 0x0CEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_IsNotDrivingFloat, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_IsAnyFlinchValueNonZero, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_HipsFlinchTranslationInverse, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_HipsFlinchRotationInverse, 0x0D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_ArmsShoulderFlinchInverse, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_FirstPersonNotDead, 0x0D1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_FirstPersonZoomOffsetAndCollision, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_CameraCollisionOffsetWithNot3PArmsSync, 0x0D2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_FirstPersonNotDeadWith3PArmsSync, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_IsNotFemale, 0x0D3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_SpineBendBlendWeightHalf, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_SpineBendBlendWeightThird, 0x0D44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_GroundingRightFootRotationOffset, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_GroundingLeftFootRotationOffset, 0x0D54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_GroundingRightFootTranslationOffset, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_GroundingLeftFootTranslationOffset, 0x0D6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_GroundingWeightWithFirstPerson, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_GroundingWeightWithNotFirstPerson, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, NotFirstPersonWithAtmospherics, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, NotFirstPersonWithAtmosphericsAndAnimLOD1, 0x0D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_FaceUpperLids, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LeftHandIKWeight, 0x0D94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_RightHandIKWeight, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_RootRotationOffsetInverse, 0x0D9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_StopBounceMediumWeight, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_StopBounceLightWeight, 0x0DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_StopBounceInverse, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_StopBounceInverseHead, 0x0DBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_StopBounceHips, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_BounceDuckWithBounceWeight, 0x0DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_BounceDuckWithBounceWeightInverse, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_SpineBendRotation, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_HipsBendRotation, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_SpineBendRotationAlpha, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_RightLegBendRotation, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_ArmsBendRotation, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, AtmosphericsWeightWithAnimLOD0, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_LowerBodyRotationOffsetInverse, 0x0E24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_RightWeaponBoneBaseTranslation, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_RightWeaponBoneBaseRotation, 0x0E3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_SpringPitchYawValueRotator, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_HandSpringWeight, 0x0E54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, Helper_ShoulderOffset1PWith1PWeight, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimInstance, UnknownData_M9QH, 0x0E5C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauAnimInstance, 0x0E60);
		}

		// class UMordhauAnimMetaData : public UAnimMetaData
		TEST_METHOD(Class__Mordhau__MordhauAnimMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, OverrideIdleChangeBlendTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, bDisablesSpineBending, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, UnknownData_EPD8, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, ForceCinematicCameraWeight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, bDisablesOffhandIK, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, bForcesOffhandIK, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, bOverridesOffhandIKChangeSpeed, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, UnknownData_1R1E, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, OffhandIKChangeSpeedOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, MaxOffhandIKDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, MinOffhandIKDistance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, bDisablesSpineArmsCompensation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, UnknownData_ADJ6, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, ParamA, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, ParamB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, ParamC, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauAnimMetaData, ParamD, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauAnimMetaData, 0x0058);
		}

		// class AMordhauBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__Mordhau__MordhauBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauBeaconClient, Request, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauBeaconClient, UnknownData_KY9W, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauBeaconClient, PingStartTime, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauBeaconClient, PlayerEntities, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauBeaconClient, UnknownData_VC7O, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauBeaconClient, 0x02F0);
		}

		// class AMordhauBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__Mordhau__MordhauBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauBeaconHost, 0x0248);
		}

		// class UMordhauCameraComponent : public UCameraComponent
		TEST_METHOD(Class__Mordhau__MordhauCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, UnknownData_4RSP, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, MaxCameraCycleFrequency, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, FirstPersonLookUpOffset, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, AimingCameraActivateChangeSpeed, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, AimingCameraDisableChangeSpeed, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, UnknownData_7OA3, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, CinematicCameraBlendWeight, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, MinimumCinematicCameraBlendWeight, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, FirstPersonCinematicCameraOffset, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, ThirdPersonCinematicCameraOffset, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, CinematicCameraRotationOffset, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, MaxThirdPersonFOV, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, ThirdPersonRotationOffset, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, ThirdPersonCameraOffset, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, ThirdPersonAimingCameraRotationOffset, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, ThirdPersonAimingCameraOffset, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, ThirdPersonHipsSmoothSpeed, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, ThirdPersonHipsSmoothLimits, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, ThirdPersonTeleportThreshold, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, DeadCameraLocationSmoothSpeed, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, DeadCameraLocationSmoothMaxDistance, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, DeadCameraRotationSmoothSpeed, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, SmoothedHeadLocation, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, SmoothedHeadRotation, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, UnknownData_5EQK, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, PreviousHeadTransform, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, TurnOnFirstPersonModelDistance, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, TurnOnThirdPersonModelDistance, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, ThirdToFirstBlendCurve, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, FirstToThirdBlendCurve, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, MapToFirstBlendCurve, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, MapToThirdBlendCurve, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, MapToFirstRotationBlendCurve, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, MapToThirdRotationBlendCurve, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, CameraStyleBlendingFrom, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, CameraStyleBlendingTo, 0x08E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, UnknownData_PFGD, 0x08EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, LastCameraStyleChangeCameraPOV, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, LastVehicleCameraPOV, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, LastNonVehicleCameraPOV, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, LastCameraPOV, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, bIsBlendingCameraStyle, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, UnknownData_AKAL, 0x095D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, CameraStyleChangeBlendDuration, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, MapCameraStyleChangeBlendDuration, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, SmoothedHipsOffset, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, PreviousHipsLocation, 0x0974);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, CameraFOVToLocationOffsetScaleCurve, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, PreviousCharacterMeshLocation, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCameraComponent, UnknownData_WHXB, 0x0994);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauCameraComponent, 0x09A0);
		}

		// class AMordhauCameraManager : public APlayerCameraManager
		TEST_METHOD(Class__Mordhau__MordhauCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, TagSystemComponent, 0x2740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, ClosestWidgetVisibilityQueueDistances, 0x2748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, ClosestWidgetVisibilityQueueMaxDistance, 0x2758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, UnknownData_MGU8, 0x275C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, AtmosphericFog, 0x2760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, UnknownData_MDKO, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, AtmosphericFogMultiplierChangeSpeed, 0x276C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, bIsInMainMenu, 0x2770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, UnknownData_NOM5, 0x2771);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, LastViewInfo, 0x2780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, QueuedViewTarget, 0x2D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, LateTickRequests, 0x2D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, HitFlashFadeInDuration, 0x2D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, HitFlashStayDuration, 0x2D6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, HitFlashFadeOutDuration, 0x2D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, UnknownData_7EJ7, 0x2D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, HitFlashValue, 0x2D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, bIsHitFlashDirectional, 0x2D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, UnknownData_BNQK, 0x2D81);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, HitFlashSource, 0x2D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCameraManager, HitFlashDegrees, 0x2D8C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauCameraManager, 0x2D90);
		}

		// class UMordhauCapsuleComponent : public UCapsuleComponent
		TEST_METHOD(Class__Mordhau__MordhauCapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCapsuleComponent, UnknownData_3CQ1, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauCapsuleComponent, 0x0420);
		}

		// class AMordhauCharacter : public AAdvancedCharacter
		TEST_METHOD(Class__Mordhau__MordhauCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, Motion, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_IHZE, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, WearableProtectionCoverageMap, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_RRPZ, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, MordhauCamera, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, FaceCustomizationComponent, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, NextAllowedVoiceCommandTime, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bWantsClimb, 0x0B7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bAllowDrop, 0x0B7D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bAllowClimbing, 0x0B7E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bAllowVehicles, 0x0B7F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bAllowEquipmentRotate, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_FRF3, 0x0B81);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, InTeamAreaSince, 0x0B84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bOverrideIsInEnemyTeamArea, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bIsHoldingBlock, 0x0B89);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bIsHoldingModeSwitch, 0x0B8A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_HVAL, 0x0B8B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, HoldingModeSwitchTime, 0x0B8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, TimeToHoldModeSwitchForOtherHand, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, OverrideSpineSpaceAdditive, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bUseOverrideSpineSpaceAdditive, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_A2JM, 0x0C19);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, SpineSpaceAdditiveTarget, 0x0C1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, SpineSpaceAdditiveFrom, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_DS5P, 0x0D24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bIsLeftArmDisabled, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bIsRightArmDisabled, 0x0D31);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bIsLeftLegDisabled, 0x0D32);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bIsRightLegDisabled, 0x0D33);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_VA9L, 0x0D34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, FaceCustomizationSetup, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bDoNotAnimateBreathing, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bDoNotUseGrounding, 0x0D49);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bIsSoundDisabled, 0x0D4A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bDoNotLookAtOthers, 0x0D4B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ReplicatedDodge, 0x0D4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ReplicatedKnockback, 0x0D4D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ReplicatedVoiceCommand, 0x0D4E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_VBL1, 0x0D4F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ReplicatedCustomizationReplicationActor, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, FaceCustomizationBonesTransforms, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_YQKX, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CurrentCapturePoint, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CurrentCapturePointTime, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bForceColorOverrides, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_5BP4, 0x0D7D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ColorAOverride, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ColorBOverride, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CurrentForcedLOD, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_GL0F, 0x0DA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ActorsThatDestroyWithUs, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CurrentBleedOutParticles, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LastMovementFrontalHitActor, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_MK1A, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bWantsCrouch, 0x0DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_9H45, 0x0DD5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CrouchCooldown, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, SprintingMoveBlockedByFractionToTrigger, 0x0DDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, MoveBlockedBySlowMinInterval, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_V9L0, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ClimbTargetLocation, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LastNoticeableLookChange, 0x0DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, PreviousLookValues, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, NoticeableLookChangeMinRate, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_MKSQ, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, DamageHistory, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_REED, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, StructureDamageModifier, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, StructureRepairModifier, 0x0E2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ExtraStaminaOnHit, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, StaminaCostModifier, 0x0E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, MeleeWindupModifier, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, MeleeComboExtraWindupModifier, 0x0E3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, MeleeReleaseModifier, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, MeleeMissRecoveryModifier, 0x0E44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LegDamageBonusModifierAirborne, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bIsUnflinchable, 0x0E4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_GNF1, 0x0E4D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnflinchableDamageThreshold, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bIsHitStopOnTeamHitsDisabled, 0x0E54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bCanDodge, 0x0E55);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, Stamina, 0x0E56);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ReplicatedStamina, 0x0E57);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, StaminaRegenPerTick, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_LNQ9, 0x0E59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, StaminaRegenDelay, 0x0E5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, StaminaOnKill, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, HealthOnKill, 0x0E64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, StaminaRegenTickRate, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, JumpStaminaCost, 0x0E6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LastEnemyKilledTimeWithMeleeOrRanged, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, KnockbackParry, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, KnockbackWorld, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, KnockbackClash, 0x0E7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_NOG1, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, EasyParryUntilTime, 0x0E84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, FallingTime, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, FallingTimeToRagdoll, 0x0E8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LastDodgeTime, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, DodgeDuration, 0x0E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, DodgeCooldown, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, DodgeStaminaCost, 0x0E9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bWasDodgeCanceled, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_2ZCK, 0x0EA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, DodgeDirection, 0x0EA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, DodgeDirectionLocal, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, TotalChaseTime, 0x0EBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LastChaseTime, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, TotalChasedTime, 0x0EC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LastChasedTime, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_J9MO, 0x0ECC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, SkinnyPose, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, FatPose, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, StrongPose, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bIgnoresTeamColors, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bWasHitAfterDeath, 0x0EE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_GQFY, 0x0EEA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CurrentlyTracking, 0x0EEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LastTrackingUpdate, 0x0EF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bIsFirstPerson, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CameraStyle, 0x0EF9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_FUKV, 0x0EFA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CurrentSpeedFOVOffset, 0x0EFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, MaxSprintFOVOffset, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, MaxSprintFOVOffsetInterpSpeed, 0x0F04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CameraLocation1P, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CameraLocation1PCosmeticOffset, 0x0F14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CameraRotation1P, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CameraRotation1PMeshSpace, 0x0F2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, InteractionTarget, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UseHoldTime, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, EllipseBubbleLength, 0x0F44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, EllipseBubbleRadius, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, EllipseBubbleMaxHeightDiff, 0x0F4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, BlockColliderForwardParryDistance, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, BlockCollider, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LowBlockColliderRelativeOffset, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, HighBlockColliderRelativeOffset, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, OriginalBlockColliderRelativeOffset, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_FAYV, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LastRequestedFireOrigin, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LastRequestedFireRotation, 0x100C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bWantsFire, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bWantsBlock, 0x1019);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bWantsFeintOrBlock, 0x101A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_05RG, 0x101B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, SprintFootstepParticles, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, BloodHitEffect, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, BloodMetalHitEffect, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, BleedingOutParticleEffect, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, DodgeParticleEffect, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, DodgeCameraShake, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, FallDamageCameraShake, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, RunLeftHeadBobShake, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, RunRightHeadBobShake, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, WalkLeftHeadBobShake, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, WalkRightHeadBobShake, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, BlockShakeEffect, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, BlockedShakeEffect, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, FlinchShakeEffect, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, NetBlock, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_3T7X, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CurrentVehicle, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, DeathSyncedRandom, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ReplicatedNetMotion, 0x10B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_2Z60, 0x10BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, Motions, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, EmoteMotions, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CharacterEmotes, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnarmedEmotes, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bWantsCharacterRebuild, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_IQW1, 0x1101);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, WearableObjectInstances, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, Profile, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bDestroyEquipmentOnDeath, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, EquipmentInventorySize, 0x11D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_C5RO, 0x11D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, Equipment, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, RightHandEquipment, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LeftHandEquipment, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, Quiver, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, KickWeapon, 0x1200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, bCanJumpKick, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_BETF, 0x1209);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, FallingTimeToScream, 0x120C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, DodgeSound, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, DodgeSoundLocalPlayer, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, SnappyArmorFoley, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, NonSnappyArmorFoley, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CrouchStartSound, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, CrouchEndSound, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, ReleaseFoley, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, LastArmorFoley, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, OnPreBeginPlay, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, OnVehicleChanged, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, OnCameraStyleChanged, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_ZEEI, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, OnCharacterBuilt, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauCharacter, UnknownData_K0XL, 0x1298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauCharacter, 0x12A0);
		}

		// class UMordhauCharacterTypes : public UObject
		TEST_METHOD(Class__Mordhau__MordhauCharacterTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauCharacterTypes, 0x0028);
		}

		// class UMordhauCheatManager : public UCheatManager
		TEST_METHOD(Class__Mordhau__MordhauCheatManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauCheatManager, 0x0078);
		}

		// class AMordhauGameState : public AGameState
		TEST_METHOD(Class__Mordhau__MordhauGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, LastDemotableTickFunction, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, PostPhysicsTickFunction, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_60W4, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, CharacterTemporaryArrayCached, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, NextBudgetTime, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_ROCU, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, ParticleSystemActors, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_DTUE, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, CharacterDistanceArray, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, CharacterToDistanceArray, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, CharacterPendingForDistanceArray, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, RagdollDistanceArray, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, EquipmentMeshCacheMap, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, PreSkinnedPoseOracle, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, NextLoginTime, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, LoginAttemptInterval, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, LoginAttempts, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, MaxLoginAttempts, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, NextTokenRefreshTime, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, TokenRefreshInterval, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, MatchmakingTicketID, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, MatchmakingMatchID, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bAreStatsAvailable, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bIsInventoryAvailable, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_MSGI, 0x0512);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, ImmutableLivingCharacterArray, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_3R8C, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, AttackTracesMemory, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, MetaData, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bDisableClientStats, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bDisableChat, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bDisableScoreboard, 0x054A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bAllowHealthRegen, 0x054B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bDoNotLimitPlaceables, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bOverrideArmorSpeedAndAccelerationFactor, 0x054D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_6ANN, 0x054E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, OverrideArmorSpeedFactor, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, OverrideArmorAccelerationFactor, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bAllPlayersHaveMarkers, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_GZLY, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, BannedEquipment, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, BannedPerks, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, MOTDURL, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bIsThirdPersonCameraDisabled, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_UX9Y, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, ConstrainAspectRatio, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bDisableClientMods, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_Y8SO, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, MatchDurationMax, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, ReplicatedMatchDurationMax, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_RB2R, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, MapCameraActors, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, DefaultEndMatchMapChangeTime, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, EndMatchMapChangeEnd, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, PostMatchScreenDelay, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, DefaultWarmupTime, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bSkipWarmupInDevBuild, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bBlockInputInWarmup, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_3O4C, 0x068A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, MinPlayersToStart, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, WarmupEnd, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bDoNotGoToNextMapOnMatchEnd, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bDoNotShowPostMatchScreen, 0x0695);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bAllowSpawning, 0x0696);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, TeamCount, 0x0697);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, TeamScores, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bIsTeamMode, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bEnforceTeamColors, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_OGLL, 0x06AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, TeamColors, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, TeamNames, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, SecondaryTeamColors, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, AllCapturePoints, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, Team1CapturePoints, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, Team2CapturePoints, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, bUsePushTopologicalProgress, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, PushTopologicalProgressAttackingTeam, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_41C7, 0x06FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, Team1TopologicalProgress, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, Team2TopologicalProgress, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_HKE5, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, CapturePointTopologicalOrdering, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, SoundGroups, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, LastBotVoiceCommandTime, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, LastBotEmoteTime, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, LastBotClimbTime, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_NJX2, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, BloodDecalsArray, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameState, UnknownData_CNAP, 0x0788);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauGameState, 0x0790);
		}

		// class UMordhauGameUserSettings : public UGameUserSettings
		TEST_METHOD(Class__Mordhau__MordhauGameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, OnSettingsChanged, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, UnknownData_KXND, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, AvailableLanguages, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, MordhauVersion, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, UnknownData_TH5T, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, Language, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, Gore, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ProfanityFilter, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ThirdPersonDeathCamera, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, CharacterCloth, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, FriendlyMarkers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, HideDefaultLoadouts, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, NoTeamColorsOnGear, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, Headbob, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, MovementHeadbob, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, CombatHeadbob, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, MaxRagdolls, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, RagdollStayTime, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, MouseSmoothing, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, RangedSensitivity, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ForceFeedback, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, UnknownData_OASM, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, DrawTracers, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, DrawTracersStayTime, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, UnknownData_0SOZ, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowServerInScoreboard, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, CrosshairType, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowKilledBy, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowStatusBar, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowTargetInfo, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowSpawnInfo, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowChatBox, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowEmotesMenu, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowEquipment, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowAmmo, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowAnnouncements, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowTips, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowObjectives, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowHitMarker, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowScoreFeed, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowCombatHints, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowKillFeed, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, QuickSpawn, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowObservedDelay, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, HideWatermark, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ShowInteractionChecks, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, EnableHordeSquadSpawning, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ScreenPercentage, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, FieldOfView, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, CameraDistance, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, Gamma, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, NvidiaReflex, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, AntiAliasing, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, IndirectCapsuleShadows, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, CharacterFidelity, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, RagdollFidelity, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ScreenSpaceReflections, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, Bloom, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, MotionBlur, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, AmbientOcclusion, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, LensFlares, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, MasterVolume, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, EffectsVolume, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, MusicVolume, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, VideoVolume, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, VoiceVolume, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, InstrumentsVolume, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, CasualMatchmakingRegion, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, RankedMatchmakingRegion, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, UnknownData_B3D2, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, CasualMatchmakingGameModes, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, RankedMatchmakingGameModes, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, SelectedGameModePlayerCounts, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, bServerBrowserNotFull, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, bServerBrowserHasPlayers, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, bServerBrowserNoPassword, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, UnknownData_2QIQ, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ServerBrowserServerName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ServerBrowserGameMode, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ServerBrowserMaxPing, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, UnknownData_X12K, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ServerBrowserSortType, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, FavoriteServers, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, RecentServers, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ServerTypeFilter, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ServerPopulationFilter, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ServerModdedFilter, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, ServerPasswordFilter, 0x0333);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameUserSettings, UnknownData_30NJ, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauGameUserSettings, 0x0338);
		}

		// class UMordhauHttpRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__Mordhau__MordhauHttpRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauHttpRequest, OnRequestComplete, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauHttpRequest, OnRequestFailed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauHttpRequest, UnknownData_MRBY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauHttpRequest, 0x00D0);
		}

		// class AMordhauHUD : public AHUD
		TEST_METHOD(Class__Mordhau__MordhauHUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauHUD, UnknownData_IQDE, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauHUD, CapturePointsOfInterest, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauHUD, 0x0328);
		}

		// class UMordhauHUDWidgetComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__MordhauHUDWidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauHUDWidgetComponent, bCreateOnBeginPlay, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauHUDWidgetComponent, bShowOnBeginPlay, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauHUDWidgetComponent, UnknownData_US5H, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauHUDWidgetComponent, WidgetBPReference, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauHUDWidgetComponent, Widget, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauHUDWidgetComponent, bIsPendingToShow, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauHUDWidgetComponent, UnknownData_P8LU, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauHUDWidgetComponent, 0x00D8);
		}

		// class UMordhauInput : public UObject
		TEST_METHOD(Class__Mordhau__MordhauInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, UnknownData_51MC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, bDefaultBindingsChecked, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, UnknownData_GPWS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, AxisConfig, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, ActionMappings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, AxisMappings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, ConsoleKeys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, ControlScheme, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, AngleAttacksWithMovement, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, MouseXIsFlipAttackSide, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, InverseAttackDirectionX, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, InverseAttackDirectionY, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, AngleAttackAfterPress, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, ToggleSprint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, bMouseXInverted, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, UnknownData_SMGR, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, MouseXSensitivity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, bMouseYInverted, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, UnknownData_NO41, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, MouseYSensitivity, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, bGamepadLeftXInverted, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, UnknownData_EMV6, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, GamepadLeftXSensitivity, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, GamepadLeftXDeadzone, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, bGamepadLeftYInverted, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, UnknownData_N7D7, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, GamepadLeftYSensitivity, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, GamepadLeftYDeadzone, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, bGamepadRightXInverted, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, UnknownData_PH5C, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, GamepadRightXSensitivity, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, GamepadRightXDeadzone, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, bGamepadRightYInverted, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, UnknownData_3GQG, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, GamepadRightYSensitivity, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, GamepadRightYDeadzone, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInput, UnknownData_WN3D, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauInput, 0x00E8);
		}

		// class UMordhauInventory : public UObject
		TEST_METHOD(Class__Mordhau__MordhauInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInventory, UnknownData_3VWI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInventory, OnItemsRefreshed, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInventory, OnItemsDropped, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInventory, OnRewardsDropped, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInventory, OnItemsUnlocked, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauInventory, 0x0208);
		}

		// class AMordhauLevelScriptActor : public ALevelScriptActor
		TEST_METHOD(Class__Mordhau__MordhauLevelScriptActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauLevelScriptActor, 0x0228);
		}

		// class UAdvancedCharacterMovement : public UCharacterMovementComponent
		TEST_METHOD(Class__Mordhau__AdvancedCharacterMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, UnknownData_S9SD, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, DealtFallingDamageTo, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, LastFallingCheckVelocityZ, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, UnknownData_5GC4, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, CrowdManager, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, bUseMordhauRotationInterpMode, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, UnknownData_RY5W, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, BounceOffBumpForce, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, MordhauRotationSmoothStartTime, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, MordhauRotationSmoothEndTime, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, UnknownData_7UBK, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, MordhauRotationSmoothFrom, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, StillTimeWhileRagdollFalling, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, PerchRadiusThresholdRagdollFalling, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, MinVelocityForFallDamage, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, FallDamageOffset, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, FallDamageFactor, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, RagdollMinVelocityForFallDamage, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, RagdollFallDamageOffset, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, RagdollFallDamageFactor, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, bReverseBackwardsTurning, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, bUsePendingRotationToOrientMovement, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, UnknownData_DALW, 0x06C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, PreviousVelocity, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, PendingTurnValue, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, bIgnoreMovementInput, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, UnknownData_FOUT, 0x06D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, ChildrenSkipperCachedArray, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, OffsetMeshTranslation, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, OffsetExtrapolation, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, OffsetExtrapolationTarget, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, OffsetCorrectionLeftover, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, OffsetNetSmoothLeftover, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, OffsetNetSmoothPending, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, MovementComponentMeshOffset, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, AuthNetSmoothTime, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, AuthNetMaxSmoothDist, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, bDisableAuthNetSmoothing, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, UnknownData_DTE8, 0x074D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, SkipPredictionForAnimTickSkipOrGreater, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedCharacterMovement, UnknownData_V428, 0x0754);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedCharacterMovement, 0x0758);
		}

		// class UMordhauMovementComponent : public UAdvancedCharacterMovement
		TEST_METHOD(Class__Mordhau__MordhauMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, UnknownData_KP7R, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, SpawnMaxSprintDuration, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, UnknownData_IVXQ, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, TurnSprintPreventionDecayCurve, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, TurnSprintPreventionSlowdownCurve, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, TurnSprintPreventionMaxAccumulatedAngle, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, RushSprintTimeStart, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, ChasingSprintTimeStart, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, BeingChasedSlowdownTimeFactor, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, MaxAngleToChase, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, MaxAngleToStopChasing, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, ChasingMaxDistance, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, StopChasingMaxDistance, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, ChasedMaxDistance, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, TimeToBreakUsChasing, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, TimeToBreakUsBeingChased, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, MinTimeToStartChasing, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, MinTimeToStartBeingChased, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, MaxWalkSpeedCrouchedWithRatPerk, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, SprintModifier, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, ChasingModifier, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, PartialSprintModifier, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, SupersprintModifier, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, BackpedalModifier, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, StrafeModifier, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, WalkAcceleration, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, PartialSprintAcceleration, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, SprintAcceleration, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, SprintTimeToReachMaxSprint, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, SprintTime, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, UnknownData_X0B9, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, SupersprintAcceleration, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, MotionSpeedFactor, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, MotionBackpedalSpeedFactor, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, EquipmentBackpedalSpeedFactor, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, EquipmentSpeedFactorOverride, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, ArmorSpeedFactor, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, ArmorAccelerationFactor, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, EquipmentSpeedBonusPercentage, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, EquipmentSubSprintSpeedBonus, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, EquipmentAccelerationBonusPercentage, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, MovementModifier, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, bWantsSprint, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, bSprintIsAllowed, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, bOnlyPartialSprint, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, bWantsSupersprint, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, UnknownData_27WX, 0x082D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, KnockbackGroundFriction, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, KnockbackFallingLateralFriction, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, KnockbackUpImpulse, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, MaxSpeedFalling, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, BaseGroundFriction, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, BaseFallingLateralFriction, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, KnockbackDuration, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, BrakingDecelerationFallingTooFast, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMovementComponent, UnknownData_4WLS, 0x0850);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauMovementComponent, 0x0860);
		}

		// class UMordhauNavigationQueryFilter : public UNavigationQueryFilter
		TEST_METHOD(Class__Mordhau__MordhauNavigationQueryFilter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauNavigationQueryFilter, 0x0048);
		}

		// class UMordhauNetworkTypes : public UObject
		TEST_METHOD(Class__Mordhau__MordhauNetworkTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauNetworkTypes, 0x0028);
		}

		// class UMordhauPhysicsCollisionHandler : public UPhysicsCollisionHandler
		TEST_METHOD(Class__Mordhau__MordhauPhysicsCollisionHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauPhysicsCollisionHandler, 0x0040);
		}

		// class AMordhauPlayerController : public APlayerController
		TEST_METHOD(Class__Mordhau__MordhauPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_A2T5, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, LastPawn, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_GPP3, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, TagSystemComponent, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, OnServerRestrictionInfoReceived, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, TotalMordhauCharacterTeamDamage, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, TotalMordhauCharacterDamage, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bIsAnythingRestockable, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_Z17Y, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, SelectedCharacterProfile, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, SelectedDefaultProfile, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_TZ3T, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, CharacterProfile, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bReceivedValidProfileFromClient, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_T6IV, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, LastAskedForSpawnTime, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, SpawnToken, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_JCOI, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, LastSentCharacterProfile, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_LW0V, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, CustomizationReplicationActor, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bSendsDefaultCustomization, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_QBRV, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, DefaultCharacterEquipment, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_JL9A, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, DefaultCharacterTier, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_O0RP, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, PendingCharacterProfile, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bIsPendingCharacterProfileASelectedDefaultProfile, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_GS2L, 0x0891);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, ConstructingCharacterProfile, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_CVRA, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, LastControlledCharacter, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_HXAM, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, NextRespawnTime, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_35Q7, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bUseInstancing, 0x09B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_NKUT, 0x09B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, InInstanceWithControllers, 0x09B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, LocallyTrackedObjectiveScore, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bWantsBlockInput, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_Z3MY, 0x0A0D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, MaxAFKTime, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bOnlyAFKIfAlive, 0x0A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_KLOI, 0x0A15);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, CurrentAFKTime, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, LastAFKCheckCameraLocation, 0x0A1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bIsAuthenticating, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bIsAuthenticated, 0x0A29);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bClientRequestedRewards, 0x0A2A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bServerReceivedRewards, 0x0A2B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, RewardedGold, 0x0A2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, RewardedXP, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, ServerStats, 0x0A34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_03F2, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, MapVoteMaps, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, MapVoteCounts, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, Rank, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_O3O1, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, MatchmakingMatchID, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, CurrentPlayerCommand, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, PreferredWeaponModes, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_EZO3, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, ScreenshotFilenames, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_AF2N, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, bServerSupportsLagReports, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerController, UnknownData_4BWD, 0x0B09);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauPlayerController, 0x0B88);
		}

		// class AMordhauPlayerStart : public APlayerStart
		TEST_METHOD(Class__Mordhau__MordhauPlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerStart, bIsSpawnDisabled, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerStart, UnknownData_ONRR, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerStart, Team, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerStart, Token, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerStart, UnknownData_U2IP, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauPlayerStart, 0x0260);
		}

		// class AMordhauPlayerState : public APlayerState
		TEST_METHOD(Class__Mordhau__MordhauPlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, LastMordhauCharacter, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, MedianPings, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, MedianPingsSorted, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, CurMedianPingIndex, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, PingMedian, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, LocalStableShortID, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, ReplicatedRank, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, ReplicatedKills, 0x0356);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, ReplicatedAssists, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, ReplicatedDeathsAndFlags, 0x035A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, ReplicatedTeam, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, Badge, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, LevelDisplayType, 0x035E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, bIsPartyMember, 0x035F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, bIsFriend, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, UnknownData_SREU, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, FilteredTeamKills, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, bIsAlive, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, UnknownData_HYQZ, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, Kills, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, Deaths, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, Assists, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, Team, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, bIsAdmin, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, UnknownData_7XSH, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, AdminTier, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, KilledLocalPlayerCounter, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, bIsMuted, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, UnknownData_KF37, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, KilledByLocalPlayerCounter, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, UnknownData_7ORL, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, PlayFabPlayer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauPlayerState, SessionTicket, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauPlayerState, 0x0410);
		}

		// class AMordhauActor : public AActor
		TEST_METHOD(Class__Mordhau__MordhauActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, InstanceOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, ReplicatedThud, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_6WLQ, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, DamageableComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, ThudSound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, ThudPitchMultiplierRange, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, ThudVolumeMultiplierRange, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bShouldReplicateThud, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_3BQP, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, ThudMinVelocity, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, ThudMaxVelocity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, MinDelayBetweenThuds, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, NoThudUntilTime, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_3JEY, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bPreventClimbing, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, TeamkillsCountForAutoKick, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_7IN1, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, KillsStat, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bIgnoresBleedOut, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bForceLongDeathYell, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bReceiveCosmeticHits, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_V9KY, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, RagdollForceMultiplier, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bForceRagdollOnDeath, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_XRBH, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, LastDamageLocation, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, LastDamageNormal, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, ReplayPriorityFactor, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, InterpolationSmoothTime, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bSmoothNetworkMovement, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_79NF, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, SmoothedLocationOffset, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_SZW1, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, SmoothedRotationOffset, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bNetworkMovementSmoothingCompleted, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_IELF, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, InteractionWidgetComponentClass, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, InteractionWidgetClass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, HeldInteractionText, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, InteractionText, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bNoInteractionWidgetWhenAttachedToChar, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_IECX, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, InteractionWidgetRelativeTransform, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bAutoDetermineWidgetTransform, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_YBIJ, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, InteractionWidgetComponent, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bPerformCustomDepthHighlight, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bIsHighlighted, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_1RYS, 0x0362);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, MaxInteractWithDistance, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bIsInteractable, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, bIsPassivelyInteractable, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_YIJO, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, MaxInteractionHoldTime, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, LastLocallyRequestedPassiveInteractionTime, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauActor, UnknownData_WB1O, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauActor, 0x0378);
		}

		// class AMordhauProjectile : public AMordhauActor
		TEST_METHOD(Class__Mordhau__MordhauProjectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, SkeletalMeshComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, SpinComponent, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bDestroyWhenTerminated, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bWasAttachedOnClient, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_H0IJ, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, ProjectileName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, LastProjectileLocation, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bHideProjectile, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_G95A, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, CosmeticOffsetToBlendOut, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, CosmeticOffsetBlendOutSpeed, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, CosmeticOffsetBlendWeight, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_33TM, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, OriginalMeshRelativeTransform, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, DefaultMeshRotationOffset, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, WoundInfoArray, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, WillStickyOn, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, WillPassThroughOn, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, SurfaceImpactParticles, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, SurfaceImpactDecals, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, RotationSpin, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, PathBlendDuration, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, RagdollLifeSpan, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, AttackMask, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_6CSN, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, DamageMultiplier, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_R6H8, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, FlightSound, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, ImpactSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, FleshImpactSound, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, CurrentFlightSound, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, CosmeticIgnoreActors, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_BJVZ, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, HitResultCache, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, AccumulatedRotationSpin, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, ReplicatedProjectileInfo, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, Creator, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, OwningController, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, OwningPawn, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bIsFromLocalPlayer, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_7QYE, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, AssociatedProjectile, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, DamageModifierHuntsmanPerk, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_AMRP, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, Damage, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, HeadBonus, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, LegBonus, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, WoodDamage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, StoneDamage, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bHasReceivedInfo, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_XWB5, 0x06D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, FiredTime, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, LastProjectileSweepTime, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bUsesLocalProjectileBlending, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bIsConfirmed, 0x06E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bHasTerminated, 0x06E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_GT4X, 0x06E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, TerminatedTime, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bHasNetworkOrigin, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bHasFired, 0x06ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_JBDV, 0x06EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, RestockAmmoForEquipment, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, GiveEquipmentOnPickup, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bAssignCustomizationOnPickup, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_IIX7, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, CreatorEquipmentCustomization, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bIsActiveBlendProjectile, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bHasStartedTrail, 0x0741);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bAutomaticallyDetermineMeshLocation, 0x0742);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_ETUI, 0x0743);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, ProjectileCollisionPrecedence, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bWillIgnoreShooter, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bAutomaticallyDetermineSpinLocation, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_EPMU, 0x074A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, StickySurfacePitchBlend, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, StickySurfaceYawBlend, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_UC04, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, TrailParticleTemplate, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, CurrentTrailParticles, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, TrailStartSocket, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, TrailEndSocket, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, TrailWidth, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, TrailWidthMode, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bIsLocallyPredicted, 0x077D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_O7KB, 0x077E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, AttackBounceForce, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, ParryBounceForce, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, ProjectileBounceForce, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, EnvironmentBounceForce, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, BounceAngularVelocityFactor, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, BounceMinAngularVelocity, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, bShouldFlinch, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, UnknownData_V2P5, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, CullDistanceRagdoll, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, CollisionComp, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauProjectile, ProjectileMovement, 0x07A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauProjectile, 0x07B0);
		}

		// class UMordhauSceneComponent : public USceneComponent
		TEST_METHOD(Class__Mordhau__MordhauSceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSceneComponent, UnknownData_PFSG, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauSceneComponent, 0x0200);
		}

		// class UFindMordhauServerSessions : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__FindMordhauServerSessions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessions, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessions, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessions, World, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessions, ServerList, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessions, UnknownData_1W1B, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessions, MaxResults, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessions, Filter, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessions, UnknownData_42C7, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindMordhauServerSessions, 0x00D0);
		}

		// class UFindMordhauServerSessionByAddress : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__FindMordhauServerSessionByAddress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessionByAddress, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessionByAddress, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessionByAddress, World, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessionByAddress, Address, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMordhauServerSessionByAddress, UnknownData_5IOY, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindMordhauServerSessionByAddress, 0x0068);
		}

		// class UJoinMordhauServerSession : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__JoinMordhauServerSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMordhauServerSession, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMordhauServerSession, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMordhauServerSession, UnknownData_RYCX, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinMordhauServerSession, 0x0178);
		}

		// class UCancelFindMordhauSessions : public UObject
		TEST_METHOD(Class__Mordhau__CancelFindMordhauSessions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCancelFindMordhauSessions, 0x0028);
		}

		// class UDestroyMordhauServerSession : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__DestroyMordhauServerSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyMordhauServerSession, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyMordhauServerSession, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyMordhauServerSession, UnknownData_CV18, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroyMordhauServerSession, 0x0068);
		}

		// class UPingMordhauServerSession : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__PingMordhauServerSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingMordhauServerSession, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingMordhauServerSession, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingMordhauServerSession, UnknownData_03AS, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingMordhauServerSession, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingMordhauServerSession, SearchResult, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPingMordhauServerSession, 0x0170);
		}

		// class UReserveMordhauServerSessionSlots : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__ReserveMordhauServerSessionSlots)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveMordhauServerSessionSlots, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveMordhauServerSessionSlots, OnFull, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveMordhauServerSessionSlots, onFailure, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveMordhauServerSessionSlots, UnknownData_X6XU, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveMordhauServerSessionSlots, World, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveMordhauServerSessionSlots, SearchResult, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveMordhauServerSessionSlots, PartyMembers, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReserveMordhauServerSessionSlots, 0x0190);
		}

		// class UGetMordhauServerSessionMods : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__GetMordhauServerSessionMods)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMordhauServerSessionMods, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMordhauServerSessionMods, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMordhauServerSessionMods, SearchResult, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMordhauServerSessionMods, ServerId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMordhauServerSessionMods, UnknownData_HM8Y, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetMordhauServerSessionMods, 0x0178);
		}

		// class AMordhauEquipment : public AMordhauActor
		TEST_METHOD(Class__Mordhau__MordhauEquipment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_Z7MI, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, PreviousAmmo, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bIsStateDirty, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bWantsTick, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bForceEquipmentToAlwaysTick, 0x0382);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bForceRefPoseOnMesh, 0x0383);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_HLR5, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, EquipmentTraitNames, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ActionToDescriptionMap, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondActionToDescriptionMap, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_7YQZ, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, DefaultMeshRelativeTransform, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HideInGameOverride, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_YO7V, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, EquippedOffset, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bUseEquippedOffset, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCanThrowPommel, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bSecondUseEquippedOffset, 0x04B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bIsHeldInHand, 0x04B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bIsParentInFirstPerson, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_J1MZ, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AttachedToSocket, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bWantsToRebuildParts, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, LastOwnerTeam, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bForceTeamColor1, 0x04C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bForceTeamColor2, 0x04C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHasColor1, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHasColor2, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHasColor3, 0x04C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_W23S, 0x04C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, PartInstances, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ParentCharacter, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, YoinkTrackingParentCharacter, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bWasLastParentCharacterLocalPlayer, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHeldInteractIsSwap, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, EquipmentUIType, 0x04EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, EquipmentUICategory, 0x04EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_EI7D, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, EquipmentName, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bDisablesDodge, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bIsRightHanded, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bSecondIsRightHanded, 0x050A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bIsTwoHanded, 0x050B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bSecondIsTwoHanded, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_5N5U, 0x050D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, EquipTimeModifier, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bRangedActionAllowsRegen, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bTakesHuntsmanDamage, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_OW6T, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawFOVOffset, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_SH01, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawSway, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bIsRangedSwayCameraBased, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_89A4, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedAirborneSway, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedAirborneSwayBlendInSpeed, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedAirborneSwayBlendOutSpeed, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawSwayLoopSegment, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawTremblingStartAfter, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawTremblingMaxAfter, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawTremblingMagnitude, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawTremblingFrequency, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SkeletalMeshComponent, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AuxiliarySkeletalMeshComponent, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AuxiliaryMeshMode, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_X8AP, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AuxiliaryMeshOffset, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, DefaultAuxiliaryMeshRelativeTransform, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, CombinedSkeletalMesh, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bIsFollowingProjectile, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, EquipmentPhysicalSurface, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_91IL, 0x05DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, CurrentProjectile, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ProjectileClass, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RestockAmmoForEquipment, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, MaxAmountPerLoadout, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCanRestockFromEquipmentDefaults, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_RD5Z, 0x0605);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, MaxAmmoBoxRestockAmount, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, MaxAmmoBoxRestockAmountCategory, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_1NFI, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, PhysicsProxy, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, PhysicsAsset, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bDoNotDisarmOnMeleeWeaponHit, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCannotChaseOthers, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCanBeChasedFromFront, 0x062A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCanRagdoll, 0x062B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bUsesPhysicsProxy, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bOnlyPeasants, 0x062D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bIsAllowedForPeasants, 0x062E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_RQKL, 0x062F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ArmoryTransformOffset, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, CharacterPointCost, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, CullDistanceHeld, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, CullDistanceNotHeld, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, CullDistanceAuxiliaryHeld, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, CullDistanceAuxiliaryNotHeld, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bForceInstantMeshUpdate, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bForceMipStreaming, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bForceMaxLOD, 0x0676);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bPartsUseAuxiliaryMesh, 0x0677);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, MeshComponents, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, Quiver, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, MaxAmmo, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, MaxAmmoWithoutQuiver, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, LastReplicatedAmmo, 0x0692);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bDestroyIfNoAmmo, 0x0693);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, MovementRestriction, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bPreventsClimbing, 0x0695);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_CCTF, 0x0696);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SubSprintSpeedBonusEquipped, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondSubSprintSpeedBonusEquipped, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SpeedOverrideEquipped, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, BackpedalSpeedFactorEquipped, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SpeedBonusPercentageEquipped, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AccelerationBonusPercentageEquipped, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SpeedBonusPercentageHolstered, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AccelerationBonusPercentageHolstered, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AssignedCustomization, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReplicatedColors, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReplicatedPartsId, 0x06EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReplicatedSkin, 0x06EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReplicatedEmblem, 0x06EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReplicatedEmblemColors, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReplicatedPattern, 0x06F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHasReplicatedColors, 0x06F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHasReplicatedPartsId, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHasReplicatedSkin, 0x06F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHasReplicatedEmblem, 0x06F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHasReplicatedEmblemColors, 0x06F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHasReplicatedPattern, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_IDPU, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, Skins, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, Colors, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, PartsId, 0x0713);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, Skin, 0x0716);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, Pattern, 0x0717);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, Emblem, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, EmblemColors, 0x0719);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bAutoAssignCustomizationOnBeginPlay, 0x071B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_5TUD, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AutoAssignCustomization, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AutoAssignCustomizationEmblem, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AutoAssignCustomizationEmblemColor1, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AutoAssignCustomizationEmblemColor2, 0x0752);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bIsEmotingAllowed, 0x0753);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_ETCL, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, EquipmentEmotes, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, KickAnimation, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, JumpKickAnimation, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, KickRiposteAnimation, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, JumpKickRiposteAnimation, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, KickComboAnimation, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, JumpKickComboAnimation, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, KickBounce, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UpperBlendSpace1P, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UpperAdditive1P, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UpperBlendSpaceUnloaded1P, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UpperAdditiveUnloaded1P, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UpperBlendSpace, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UpperAdditive, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UpperBlendSpaceUnloaded, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UpperAdditiveUnloaded, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, LowerAnimation, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ShieldUpperBlendSpace1P, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ShieldUpperAdditive1P, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ShieldUpperBlendSpace, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ShieldUpperAdditive, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ShieldLowerAnimation, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ShieldHorseUpperBlendSpace1P, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ShieldHorseUpperAdditive1P, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ShieldHorseUpperBlendSpace, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ShieldHorseUpperAdditive, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperBlendSpace1P, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperAdditive1P, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperBlendSpaceUnloaded1P, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperAdditiveUnloaded1P, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperBlendSpace, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperAdditive, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperBlendSpaceUnloaded, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperAdditiveUnloaded, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperRearing, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperRearing1P, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperJump, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HorseUpperJump1P, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ModeSwitchAnimation, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, DropAnimation, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, InteractWithAnimation, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, InteractWith1PAnimation, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, JumpUnloadedAnimation, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, JumpAnimation, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, JumpAnimationShield, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, JumpUnloadedAnimation1P, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, JumpAnimation1P, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, JumpAnimationShield1P, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, FallingUnloadedAnimation, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, FallingAnimation, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, FallingAnimationShield, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, FallingUnloadedAnimation1P, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, FallingAnimation1P, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, FallingAnimationShield1P, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, LandUnloadedAnimation, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, LandAnimation, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, LandAnimationShield, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, LandUnloadedAnimation1P, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, LandAnimation1P, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, LandAnimationShield1P, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondDropAnimation, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondInteractWithAnimation, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondInteractWith1PAnimation, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondJumpUnloadedAnimation, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondJumpAnimation, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondJumpUnloadedAnimation1P, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondJumpAnimation1P, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondFallingUnloadedAnimation, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondFallingAnimation, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondFallingUnloadedAnimation1P, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondFallingAnimation1P, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondLandUnloadedAnimation, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondLandAnimation, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondLandUnloadedAnimation1P, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondLandAnimation1P, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, CharacterPreviewPoses, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawAnimation, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawAnimation1P, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawnAdditive, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawEquipmentAnimation, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawEquipmentAnimation1P, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedReleaseAnimation, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedReleaseAnimation1P, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedReleaseEquipmentAnimation, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedReleaseEquipmentAnimation1P, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReloadAnimation, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReloadSound, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReloadAnimation1P, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReloadSound1P, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReloadEquipmentAnimation, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReloadEquipmentAnimation1P, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, QuickthrowAnimation1P, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, QuickthrowAnimation, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bDisableSpineArmsCompensation1P, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bDisableHandSpringAnimation, 0x0A51);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_2NUG, 0x0A52);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RightHandIKPositionOffset, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RightShoulderOffset1P, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, LeftShoulderOffset1P, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, LeftShoulderIdleOffset1P, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bUsesOffhandIK, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bInvertOffhandUp, 0x0A85);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bSecondInvertOffhandUp, 0x0A86);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_T0RY, 0x0A87);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondUpperBlendSpace1P, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondUpperAdditive1P, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondUpperBlendSpaceUnloaded1P, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondUpperAdditiveUnloaded1P, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondUpperBlendSpace, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondUpperAdditive, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondUpperBlendSpaceUnloaded, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondUpperAdditiveUnloaded, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondLowerAnimation, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondModeSwitchAnimation, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bSecondUsesOffhandIK, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_7VM7, 0x0AD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, OffhandIKUpOffset, 0x0ADC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, OffhandIKUpOffset1P, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondOffhandIKUpOffset, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondOffhandIKUpOffset1P, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RightHandEquipOffset, 0x0AEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_L56X, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RightWeaponBoneCosmeticTransform, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RightWeaponBoneCosmeticTransform1P, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondRightWeaponBoneCosmeticTransform, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondRightWeaponBoneCosmeticTransform1P, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RotationOffset, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondRotationOffset, 0x0BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, GripLocationLocal, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, SecondGripLocationLocal, 0x0BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_9CMT, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HolsterInfo, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCanHolster, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCanEquipOnHorse, 0x0C11);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCanEquipOnLadder, 0x0C12);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bSecondCanEquipOnHorse, 0x0C13);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bSecondCanEquipOnLadder, 0x0C14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_1AQT, 0x0C15);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AmmoRefillSound, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, EquipSound, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, HolsterSound, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, DrawSound, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, DrawSoundPlayAtNormalizedTime, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, DrawSoundPlayAtNormalizedTime1P, 0x0C3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedCancelSound, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, FireSound, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bAlwaysDestroyOnDeath, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bDeferDestroyUntilRagdoll, 0x0C51);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_1G2R, 0x0C52);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RagdollStayTime, 0x0C54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bAllowDrop, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCanAttack, 0x0C59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCanAttackOnFoot, 0x0C5A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCanAttackOnHorseback, 0x0C5B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bAllowFire, 0x0C5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bFireThrowsEquipment, 0x0C5D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_8NTJ, 0x0C5E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ExtraSwitchTime, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bRangedReleasePlaysAttackYell, 0x0C64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bUsesRangedCamera, 0x0C65);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bAllowHoldDraw, 0x0C66);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bAllowCancelDraw, 0x0C67);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, MaxHoldDrawTime, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ReloadMovementRestriction, 0x0C6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawMovementRestriction, 0x0C6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_SM86, 0x0C6E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawSpeedFactor, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawSpeedFactorWithRangerPerk, 0x0C74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawTurnCaps, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedReleaseMovementRestriction, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bDoNotFireAfterMaxHoldDrawTime, 0x0C81);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bQuickthrowOnly, 0x0C82);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_SZYS, 0x0C83);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, ForceAppliedOnDrop, 0x0C84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bAllowCleanup, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_J860, 0x0C89);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedDrawTime, 0x0C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedCancelTime, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedReleaseTime, 0x0C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedReleaseCameraShake, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedReloadTime, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedReloadTurnCaps, 0x0CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedReloadGrabAmmoNormTime, 0x0CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, RangedReloadFinishReloadNormTime, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AutoReloadTime, 0x0CB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, AutoReloadTimeSpent, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bCanReload, 0x0CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bUnloadOnUnequip, 0x0CBD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bLoadOnUnequip, 0x0CBE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bIsLoaded, 0x0CBF);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHiddenWhenUnloaded, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_248R, 0x0CC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bIsUsingAlternateMode, 0x0CC2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bHasAlternateMode, 0x0CC3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bRevertModeOnUnequip, 0x0CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, bRevertModeOnDrop, 0x0CC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEquipment, UnknownData_SU51, 0x0CC6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauEquipment, 0x0CC8);
		}

		// class AMordhauWeapon : public AMordhauEquipment
		TEST_METHOD(Class__Mordhau__MordhauWeapon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SingleTraceHitsCache, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, LastWoosh, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bAreCurrentTracersValid, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bArePreviousTracersValid, 0x0CE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bAreCurrentTracersInvalidated, 0x0CE2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bHasAdditionalTracers, 0x0CE3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bSecondHasAdditionalTracers, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_J6ES, 0x0CE5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CurrentTraceStart, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CurrentTraceEnd, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, PreviousTraceStart, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, PreviousTraceEnd, 0x0D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CurrentAdditionalTraceStart, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CurrentAdditionalTraceEnd, 0x0D24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, PreviousAdditionalTraceStart, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, PreviousAdditionalTraceEnd, 0x0D3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, LastObservedMove, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_0V4P, 0x0D49);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, LastTraceStarts, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CosmeticIgnoreActors, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CosmeticActorTraceData, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ActorIgnoreCache, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ActorSetCache, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, HitResultCache, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bCanBlock, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bCanBlockOnFoot, 0x0E99);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bCanBlockOnHorseback, 0x0E9A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bCanCouchOnHorseback, 0x0E9B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_3OE9, 0x0E9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CouchWindUpAnim, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CouchWindUpAnim1P, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CouchLoopAnim, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CouchReleaseAnim, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CouchReleaseAnim1P, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, StrikeDismembermentType, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondStrikeDismembermentType, 0x0EC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, StabDismembermentType, 0x0ECA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondStabDismembermentType, 0x0ECB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SlideRadius, 0x0ECC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, AttackSupersprintDuration, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondAttackSupersprintDuration, 0x0ED4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, StabReleaseModifier, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_7B1Z, 0x0EDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, StabAttack, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondStabAttack, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CouchAttack, 0x1130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondCouchAttack, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, StrikeAttack, 0x1380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondStrikeAttack, 0x14A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, KickAttack, 0x15D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondKickAttack, 0x16F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BashAttack, 0x1820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, AttackMask, 0x1948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ParryMask, 0x194C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ParryWindowOffset, 0x1950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_M8RR, 0x1954);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ParryBoxTransform, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ParryTurnCap, 0x1990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ShieldWallTurnCap, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ParrySuccessTurnCap, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ParryBackpedalSpeedFactor, 0x19A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bIsParryHeld, 0x19AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_UTN7, 0x19AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BoostCosmeticTracersBy, 0x19B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bUsesExtraEnvironmentTracers, 0x19B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bHitKnockbackOnTeammates, 0x19B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_8JMF, 0x19B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ClashNormal, 0x19B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondClashNormal, 0x19C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BlockMovementRestriction, 0x19D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_8KIK, 0x19D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BlockStaminaNegation, 0x19D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BlockStaminaClamp, 0x19D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondBlockStaminaNegation, 0x19E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondBlockStaminaClamp, 0x19E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_07PH, 0x19EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ClashCollider, 0x19F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BlockCollider, 0x19F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, WeaponAnimationProfileClass, 0x1A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondWeaponAnimationProfileClass, 0x1A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, HorseWeaponAnimationProfileClass, 0x1A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, LadderWeaponAnimationProfileClass, 0x1A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, HorseWeaponAnimationProfile, 0x1A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, LadderWeaponAnimationProfile, 0x1A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, WeaponAnimationProfile, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondWeaponAnimationProfile, 0x1A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BlockedSound, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BlockedViewTargetSweetener, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, HitCancelSound, 0x1A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, WasBlockedSound, 0x1A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, EnvironmentPitchScaleByDamageIn, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, EnvironmentPitchScaleByDamageOut, 0x1A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, EnvironmentVolumeScaleByDamageIn, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, EnvironmentVolumeScaleByDamageOut, 0x1A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, WooshVolumeMultiplierViewTarget, 0x1A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_ML9L, 0x1A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, StrikeHitSound, 0x1A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, StabHitSound, 0x1A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, EnvironmentHitSound, 0x1A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondStrikeHitSound, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondStabHitSound, 0x1AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondEnvironmentHitSound, 0x1AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, StrikeWooshSound, 0x1AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, StabWooshSound, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SlideStartSound, 0x1AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SlideEndSound, 0x1AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bDeriveHandGripFromTracers, 0x1AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bSecondDeriveHandGripFromTracers, 0x1AD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bHasWoodenHandle, 0x1ADA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_6CXQ, 0x1ADB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, TrailLifeTimeFactor, 0x1ADC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, TrailExtraTime, 0x1AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BloodTrailMaxDuration, 0x1AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SwingTrailFadeOutDuration, 0x1AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_EQUT, 0x1AEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SwingTrailParticles, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BloodTrailParticles, 0x1AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BlockParticles, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, HitCancelParticles, 0x1B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, ImpactParticlesBySurface, 0x1B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SlideParticles, 0x1B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SlidingWith, 0x1B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, EndCurrentSlideWithSound, 0x1B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SlidingStartTime, 0x1B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CurrentSlideStartSound, 0x1B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, LastHitSoundA, 0x1B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, LastHitSoundB, 0x1B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CurrentSlideParticles, 0x1B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CurrentSwingTrailParticles, 0x1B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, CurrentBloodTrailParticles, 0x1B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, TrailTimeBeforeStop, 0x1B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SwingTrailOriginalLifeTime, 0x1B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SwingTrailEndTime, 0x1B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BloodTrailEndTime, 0x1B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, Length, 0x1B7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondLength, 0x1B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BloodLevel1, 0x1B84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, BloodLevel2, 0x1B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bPlayedHitEffect, 0x1B8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_9FVR, 0x1B8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, TrailUp, 0x1B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondTrailUp, 0x1B9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, TrailRight, 0x1BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondTrailRight, 0x1BB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, DefaultTrailFactor, 0x1BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondDefaultTrailFactor, 0x1BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bRegularAttacksUseBlood2, 0x1BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, bSecondRegularAttacksUseBlood2, 0x1BC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_Z29H, 0x1BCA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, TrailFactor, 0x1BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, SecondTrailFactor, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, TrailWeight, 0x1BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_4TV2, 0x1BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, LastTrailTransform, 0x1BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, LastObservedTraceDirection, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWeapon, UnknownData_HZYF, 0x1C1C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauWeapon, 0x1C20);
		}

		// class AMordhauShield : public AMordhauWeapon
		TEST_METHOD(Class__Mordhau__MordhauShield)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauShield, bCanBlockMeleePassively, 0x1C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauShield, UnknownData_1H56, 0x1C21);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauShield, PassiveBlockDamageModifier, 0x1C24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauShield, bAllowShieldWall, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauShield, UnknownData_S3P7, 0x1C29);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauShield, 0x1C30);
		}

		// class UMordhauSingleton : public UObject
		TEST_METHOD(Class__Mordhau__MordhauSingleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, UnknownData_5SM4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, AlwaysLoadedObjects, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, CachedLoadedClassMap, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, UnknownData_OR82, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, LoadQueue, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, UnknownData_I3DA, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, CurrentlyProcessingLoadQueue, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, CurrentlyProcessingLoadQueueArray, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, DefaultCharacterMesh, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, UnknownData_TOCC, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, PathPheromoneDecayTerm, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, PathPheromoneMaxVisualizationAmount, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, MaxBloodPools, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, SingletonVersion, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, BotProfiles, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, RandomBotNames, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, DefaultHead, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, UnknownData_7L50, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, HeadWearables, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, OriginalHeadWearables, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, DefaultUpperChest, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, UnknownData_3DSI, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, UpperChestWearables, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, OriginalUpperChestWearables, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, DefaultLegs, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, UnknownData_B2L5, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, LegsWearables, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, OriginalLegsWearables, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, Equipment, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, OriginalEquipment, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, MaleFaces, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, FemaleFaces, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, Voices, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, Emblems, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, Badges, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, Perks, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, Archetypes, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, Eyebrows, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, ColorTables, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, SkinColorTable, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, EyeColorTable, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, HairColorTable, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, EmblemColorTable, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, MetalTintsColorTable, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, SelectedBadge, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, SelectedLevelDisplayType, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, UnknownData_HMAN, 0x062A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, CharacterProfiles, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, AllInventoryItems, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, PreviousLaunchInventoryItems, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, UnseenInventoryItems, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, DefaultProfiles, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, DefaultCharacterEquipment, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, DefaultCharacterTier, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, DefaultCharacterFace, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, DefaultCharacterAppearance, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, BotCharacterProfiles, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, DefaultBotCharacterProfiles, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, DefaultCharacter, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, bIsLoaded, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauSingleton, UnknownData_0DGP, 0x07E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauSingleton, 0x07E8);
		}

		// class AMordhauSpectator : public ASpectatorPawn
		TEST_METHOD(Class__Mordhau__MordhauSpectator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, BlockInputAfterDeathTime, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, bAutomaticallyAsksForSpawn, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, bCanOnlyViewOwnTeam, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, UnknownData_HBUX, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, CreatedTime, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, LastSentCameraUpdate, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, MouseSmoothedTurnValue, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, MouseSmoothingTurnVelocity, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, MouseSmoothedLookUpValue, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, MouseSmoothingLookUpVelocity, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, bIsFirstTick, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauSpectator, UnknownData_BHPL, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauSpectator, 0x02D0);
		}

		// class UMordhauStats : public UObject
		TEST_METHOD(Class__Mordhau__MordhauStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, UnknownData_2H2H, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, GameVersion, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, Blocks, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, Chambers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, ProjectilesDeflected, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, ProjectilesBlocked, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, Battlecries, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, Disarms, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, Kills, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, Assists, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, KillsOneMatch, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, AssistsOneMatch, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, KillsOneLife, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, DamageTakenOneLife, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, HeadsDecapitated, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, ProjectileHeadHits, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, ProjectileTorsoHits, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, ProjectileLegHits, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, MeleeHeadHits, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, MeleeTorsoHits, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, MeleeLegHits, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, KillsOneAttack, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, FireKills, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, CouchedHeadKills, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, LadderKills, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, TrampleKills, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, CasualRank, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, CasualRankSamples, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, DuelRank, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, DuelRankSamples, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, DuelRankTimestamp, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, DuelRankLeaderboard, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, TeamfightRank, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, TeamfightRankSamples, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, TeamfightRankTimestamp, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, TeamfightRankLeaderboard, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, TheABCs, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, LivedToTell, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, Highlander, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, KeepsComingOff, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, EagleEye, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, Yoink, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, JusticeFromGrave, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, NotSparta, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, BurningMan, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauStats, UnknownData_CZBX, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauStats, 0x0298);
		}

		// class UMordhauTypes : public UObject
		TEST_METHOD(Class__Mordhau__MordhauTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauTypes, 0x0028);
		}

		// class UMordhauUserWidget : public UUserWidget
		TEST_METHOD(Class__Mordhau__MordhauUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauUserWidget, ParentWidgetComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauUserWidget, 0x0238);
		}

		// class UMordhauUtilityLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Mordhau__MordhauUtilityLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauUtilityLibrary, 0x0028);
		}

		// class AMordhauCompoundVehicle : public AMordhauVehicle
		TEST_METHOD(Class__Mordhau__MordhauCompoundVehicle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauCompoundVehicle, 0x0C30);
		}

		// class AMordhauWheeledVehicle : public AMordhauCompoundVehicle
		TEST_METHOD(Class__Mordhau__MordhauWheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWheeledVehicle, PreviousRotation, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWheeledVehicle, RotationVelocity, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWheeledVehicle, RotationVelocityInterpSpeed, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWheeledVehicle, RotationVelocityMax, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWheeledVehicle, LeftHandIKPushTarget, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWheeledVehicle, RightHandIKPushTarget, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWheeledVehicle, MoveSoundCue, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauWheeledVehicle, UnknownData_ICHQ, 0x0C68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauWheeledVehicle, 0x0C70);
		}

		// class UMordhauWidgetComponent : public UWidgetComponent
		TEST_METHOD(Class__Mordhau__MordhauWidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, SortedVisibilityQueueBiasWeight, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, bShouldStickToScreen, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, UnknownData_CGH7, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, StickToScreenEdgeOffset, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, StickToScreenForwardProject, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, VisibilityWeightInterpolationSpeed, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, UnknownData_K3M0, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, VisibilityWeight, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, bIsSlowHideOverride, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, UnknownData_8CR6, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, WidgetCullDistance, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, WorldSpaceZOffset, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, UnknownData_VK5Z, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, WidgetCullAngle, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, WidgetCullAngleZPositionOffset, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, DistanceToCameraZPositionOffset, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, DistanceToCamera, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, TextParameter, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, DistanceToCameraString, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, UnknownData_TAVI, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, bWantsDistanceToCameraStringUpdated, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, UnknownData_5491, 0x05B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, AngleToCamera, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, OverrideVisible, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, UnknownData_VBMZ, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, PlayerStateAlwaysSee, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, bShowInMapView, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, bShowInMainMenu, 0x05CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, bUsesViewTargetTeamRestriction, 0x05CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, UnknownData_32YZ, 0x05CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, ViewTargetTeamRestriction, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, FrameSkip, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, UnknownData_FHPV, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, CachedPlayerCameraManager, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWidgetComponent, CachedGameState, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauWidgetComponent, 0x05F0);
		}

		// class UMotionSystemComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__MotionSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, UnknownData_UMSE, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, MotionFOVOffsetZeroSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, NetMotion, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, UnknownData_7APM, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, UnconfirmedMotionsBacklog, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, UnknownData_QBSI, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, LocallyPredictedNetMotion, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, Motion, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, LastParryMotion, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, LastFlinchMotion, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, LastFeintedMotion, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, LastAttackMotion, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, LastEmoteMotion, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionSystemComponent, AttackMotions, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionSystemComponent, 0x0168);
		}

		// class UMoveSoundComponent : public UAudioComponent
		TEST_METHOD(Class__Mordhau__MoveSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, bShouldPlayMoveSound, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, bShouldPlayTurnSound, 0x07D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, UnknownData_OWKT, 0x07D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, MoveSoundAttachSocket, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, MoveSoundFadeOut, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, MinRotationVelocityToPlayMoveSound, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, MinTranslationVelocityToPlayMoveSound, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, RotationVelocityInterpSpeed, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, RotationVelocityMax, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, UnknownData_SD8R, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, MoveSoundCue, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, LastMoveSound, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, PreviousRotation, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, RotationVelocity, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveSoundComponent, UnknownData_CPHF, 0x0828);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoveSoundComponent, 0x0830);
		}

		// class UMuteListCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__MuteListCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMuteListCommand, 0x0080);
		}

		// class UOneDimensionalMovementComponent : public UAdvancedCharacterMovement
		TEST_METHOD(Class__Mordhau__OneDimensionalMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOneDimensionalMovementComponent, UnknownData_E5FI, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOneDimensionalMovementComponent, TargetStep, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOneDimensionalMovementComponent, StepSize, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOneDimensionalMovementComponent, TotalSteps, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOneDimensionalMovementComponent, bHasInitializedLine, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOneDimensionalMovementComponent, UnknownData_VGNE, 0x0769);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOneDimensionalMovementComponent, CurrentStep, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOneDimensionalMovementComponent, LineStart, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOneDimensionalMovementComponent, LineEnd, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOneDimensionalMovementComponent, MovementDirection, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOneDimensionalMovementComponent, UnknownData_AJXL, 0x0794);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOneDimensionalMovementComponent, 0x07A0);
		}

		// class UMordhauMotion : public UObject
		TEST_METHOD(Class__Mordhau__MordhauMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, StartRealTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, UnknownData_M0LF, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, ComingFromMotion, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, Tag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bDisablesDodge, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, UnknownData_A47X, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, TurncapModifier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, ExpectedDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, StartTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, EndTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, LeaveTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bInitiatedLocally, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bWasConfirmedByAuthority, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, UnknownData_AOUZ, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, ConfirmedByAuthorityTime, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bIsFlinchable, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, MovementRestriction, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, UnknownData_U0FM, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, SpeedFactor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, BackpedalSpeedFactor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bCanEmote, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bCanAttack, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bCanBlock, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bDisablesAtmospherics, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bRequires3PArmsSync, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bDisablesCosmeticWeaponTransform, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bDisablesOffhandIK, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bDisablesChaseMechanic, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bForcesOffhandIK, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bOffhandIsRightHand, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, UnknownData_UJTC, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, OffhandIKChangeSpeed, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, CosmeticTransformChangeSpeed, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, OffhandIKDistanceMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, OffhandIKDistanceMin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bBlocksRegen, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bAllowDedicatedServerAnimLOD, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bUsesLeftTorsoBlend, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, UnknownData_1VGD, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, LeftTorsoBlendSpeed, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bWantsRightLegBending, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, UnknownData_DW5O, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, RightLegBendingChangeSpeed, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, bWantsSlowLookSmoothing, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, UnknownData_C52C, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauMotion, LookSmoothingChangeSpeed, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauMotion, 0x00A0);
		}

		// class UParryMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__ParryMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, UnknownData_ZFP6, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, BlockedAttacks, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, LastBlockedCharacter, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, AngleAdditive, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, Animation, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, AltAnimation, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, AnimationAdditive, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParriedAdditive, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, AltParriedAdditive, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, bLegacyAnimationPlayingMethod, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, UnknownData_M39I, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, bDetectedAnyNonFriendlyAttack, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, bIsShieldWall, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, bIsMissParry, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, UnknownData_TJXX, 0x0473);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ChamberFTPExtraStaminaDrain, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, GiveMissParryIfFlinchedBeforeDuration, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, MissParryRecoveryTime, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ShieldWallRaiseTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ShieldWallRaiseTimeAnimOffset, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, MaxParryAngle, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, MaxParryWeaponAngle, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, HeldBlockMemoryDuration, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, TimedBlockMemoryDuration, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParryInFlinchDurationMax, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, EasyParryDuration, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, EasyParryStaminaCost, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, HeldRiposteWindowExtra, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, NonHeldParryExtensionAndRiposteWindowExtra, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, SuccessfulParryRecoveryMovementRestriction, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, FailedParryRecoveryMovementRestriction, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, UnknownData_E8DZ, 0x04AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, MWAP, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, UnknownData_LYUG, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, RiposteWindowBase, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParryMissFadeOut, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParryMissFadeOut1P, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParryMissLocalSoundCue, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParryFailPlayRate, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParryFailFadeOut, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParryFailPlayRate1P, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParryFailFadeOut1P, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, HeldParryFailPlayRate, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, HeldParryFailFadeOut, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, HeldParryFailPlayRate1P, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, HeldParryFailFadeOut1P, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ShieldWallPlayRate, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ShieldWallFadeOut, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ShieldWallPlayRate1P, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ShieldWallFadeOut1P, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, MinimumHeldParryTime, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, MinimumHeldRiposteParryTime, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParryRecoveryTime, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, HeldParryRecoveryTime, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ShieldWallRecoveryTime, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParrySuccessRecoveryTime, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, HeldParrySuccessRecoveryTime, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParryUpTime, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, BlockStaminaRecover, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ShieldWallStaminaDrainFactor, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ShieldWallSpeedFactor, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, StunInHeldRecoveryWindow, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, UnknownData_OSI0, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, TotalBlocks, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, bIsBlockHoldable, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, Stage, 0x0542);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, UnknownData_6X5T, 0x0543);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, ParryEnd, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, UnknownData_UKWG, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, RiposteWindowStart, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, Montage, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, WeaponPtr, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, bHasQueuedMove, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, UnknownData_FVJP, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, QueuedMoveTime, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, QueuedAngle, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, QueuedMove, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParryMotion, UnknownData_G6MC, 0x056D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParryMotion, 0x0570);
		}

		// class AParticleSystemActor : public AActor
		TEST_METHOD(Class__Mordhau__ParticleSystemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AParticleSystemActor, UnknownData_B7YT, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AParticleSystemActor, Template, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AParticleSystemActor, ParticleSystemComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleSystemActor, 0x0238);
		}

		// class UPerk : public UObject
		TEST_METHOD(Class__Mordhau__Perk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerk, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerk, Cost, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerk, UnknownData_STEC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerk, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerk, Icon, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerk, 0x0068);
		}

		// class UPerkSystemComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__PerkSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, UnknownData_8PYJ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, ButcherDamageModifier, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, WreckerStructureDamageModifier, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, SmithStructureRepairModifier, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, FireproofReceivedFireDamageModifier, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, FuryStaminaOnKill, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, SecondWindExtraStaminaOnHit, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, AcrobatJumpStaminaCost, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, RushMovementBoostDuration, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, RushMovementRestrictionOverrideDuration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, HuntsmanCooldown, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, RatFootstepVolumeModifier, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, CatFallDamageModifier, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, TankScale, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, TankArmorSpeedFactor, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, TankArmorAccelerationFactor, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, TankHealingModifier, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, TankReceivedDamageModifier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, TankVoicePitchMultiplier, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, TankAttackTurncapModifier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, DwarfScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, DwarfMeshZOffset, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, DwarfMeshZOffsetCrouched, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, DwarfReceivedDamageModifier, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, DwarfSpeedModifier, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, DwarfVoicePitchMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, DwarfJumpVelocityMultiplier, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSystemComponent, UnknownData_XQRT, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkSystemComponent, 0x0140);
		}

		// class UPerspectiveTypes : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Mordhau__PerspectiveTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerspectiveTypes, 0x0028);
		}

		// class APhysicsProxy : public AActor
		TEST_METHOD(Class__Mordhau__PhysicsProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsProxy, Original, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsProxy, UnknownData_3YP1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsProxy, Offset, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsProxy, SkeletalMesh, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsProxy, IdleTime, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsProxy, UnknownData_VEAA, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsProxy, 0x0270);
		}

		// class UPlayCharacterSound : public UAnimNotify
		TEST_METHOD(Class__Mordhau__PlayCharacterSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayCharacterSound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayCharacterSound, bone, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayCharacterSound, Location, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayCharacterSound, AttachLocation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayCharacterSound, bAttach, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayCharacterSound, UnknownData_GUJC, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayCharacterSound, Override, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayCharacterSound, VolumeMultiplier, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayCharacterSound, PitchMultiplier, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayCharacterSound, 0x0068);
		}

		// class UPlayerlistCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__PlayerlistCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerlistCommand, 0x0080);
		}

		// class UPommelThrowDrawMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__PommelThrowDrawMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowDrawMotion, RangedEquipment, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowDrawMotion, Stage, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowDrawMotion, UnknownData_6WEV, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowDrawMotion, FirstStageEnd, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowDrawMotion, SecondStageEnd, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowDrawMotion, ThirdStageEnd, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowDrawMotion, bHasFiredLocally, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowDrawMotion, bIsPlaying1P, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowDrawMotion, UnknownData_JP65, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowDrawMotion, CurrentMontage, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPommelThrowDrawMotion, 0x00C8);
		}

		// class UPommelThrowReleaseMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__PommelThrowReleaseMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowReleaseMotion, RangedEquipment, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowReleaseMotion, CreatedLocalProjectile, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowReleaseMotion, Stage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowReleaseMotion, UnknownData_XSB5, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPommelThrowReleaseMotion, FirstStageEnd, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPommelThrowReleaseMotion, 0x00B8);
		}

		// class APrecomputedOcclusionDataActor : public AActor
		TEST_METHOD(Class__Mordhau__PrecomputedOcclusionDataActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedOcclusionDataActor, UnknownData_AY0O, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedOcclusionDataActor, 0x0278);
		}

		// class APreSkinnedPoseOracle : public AActor
		TEST_METHOD(Class__Mordhau__PreSkinnedPoseOracle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APreSkinnedPoseOracle, SkeletonToMeshComp, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APreSkinnedPoseOracle, 0x0270);
		}

		// class AProgressActor : public AMordhauActor
		TEST_METHOD(Class__Mordhau__ProgressActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProgressActor, UnknownData_55M5, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProgressActor, 0x0380);
		}

		// class AProgressDriver : public AMordhauActor
		TEST_METHOD(Class__Mordhau__ProgressDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProgressDriver, UnknownData_07XY, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProgressDriver, 0x0380);
		}

		// class UProjectileShooterComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__ProjectileShooterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, WeaponState, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, bIsFire, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, UnknownData_ZJIY, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, BuildingStageDuration, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ReleasingStageDuration, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, RecoveryStageDuration, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ReloadingStageDuration, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, UnknownData_SLGV, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, Projectile, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ProjectileSocketName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, NormalProjectileClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, FireProjectileClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, OnProjectileFiredAttachSocket, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, OnProjectileFiredSoundCue, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, OnProjectileFiredParticleSystemComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ReloadSoundAttachSocket, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ReloadSoundCue, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, FireProjectileTransform, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, FireProjectileParticleSystem, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, FireProjectileParticleSystemScale, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ProjectileOnFireAttachSocket, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, UnknownData_GBBP, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ProjectileOnFireSoundCue, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, bShakeCameraOnFire, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, bShowDebugCameraShakeRadius, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, UnknownData_Q8PZ, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, CameraShakeOnFired, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, CameraShakeInnerRadius, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, CameraShakeOuterRadius, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, CameraShakeFalloff, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, CameraOrientShakeTowardsEpicenter, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, bShowProjectileTrajectory, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, UnknownData_EB0J, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ProjectileTrajectorySocketName, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, PredictionLaunchVelocity, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, PredictionSphereScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, MaxSimTime, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, PredictionGravity, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ProjectileRadius, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, SimFrequency, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, DrawDebugTime, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, bTraceWithCollision, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, bTraceWithChannel, 0x01AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, bTraceComplex, 0x01AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, UnknownData_XVJL, 0x01AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, RestockSoundCue, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, bHasAmmo, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, UnknownData_MK66, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, AmmoReplenishInterval, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, MaxAmmo, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, Ammo, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, UnknownData_24GC, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, OnFireSpawnedParticleSystem, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, OnFireSpawnedSoundCue, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ProjectileOnFireMaterial, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, OnBuildingCompleted, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, OnReleasingCompleted, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, OnRecoveryCompleted, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, OnLoadingCompleted, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, FireEffectParticleComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, FireEffectAudioComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ProjectileParticleFX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, FireLocation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, FireRotation, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, StageTotalTime, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, StageRemainingTime, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, bHasAddedInstances, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, UnknownData_MWC9, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, ProjectileTrajectoryInstancedMeshComponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, bIsReplenishingAmmo, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileShooterComponent, UnknownData_56WW, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileShooterComponent, 0x0270);
		}

		// class UProjectileArmShooterComponent : public UProjectileShooterComponent
		TEST_METHOD(Class__Mordhau__ProjectileArmShooterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, LoadedArmMin, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ArmAdjustmentMin, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ArmAdjustmentMax, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ArmAdjustmentStep, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ArmPullSoundAttachSocket, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ArmPullSoundCue, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, SecondaryReleaseSoundAttachSocket, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, SecondaryReleaseSoundCue, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, RecoverySoundAttachSocket, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, RecoveryReleaseSoundCue, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ArmPullSoundFadeOutDuration, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ReplicatedArm, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, UnknownData_OD3W, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ArmFrom, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ArmTarget, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ArmRaisedTimestamp, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ArmLoweredTimestamp, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, LastArmTarget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, UnknownData_KRQZ, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, FiredController, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, ArmTargetInterpolationSpeed, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, LastArmPullSound, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileArmShooterComponent, UnknownData_9GCK, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileArmShooterComponent, 0x02F0);
		}

		// class UProjectileTurretShooterComponent : public UProjectileShooterComponent
		TEST_METHOD(Class__Mordhau__ProjectileTurretShooterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileTurretShooterComponent, LoadingSoundFadeOutDuration, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileTurretShooterComponent, WeaponKickBackLookUp, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileTurretShooterComponent, RotationVelocity, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileTurretShooterComponent, RotationInterpolationSpeed, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileTurretShooterComponent, ReplicatedTurnCap, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileTurretShooterComponent, ReplicatedLookUpCap, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileTurretShooterComponent, PreviousActorYaw, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileTurretShooterComponent, PreviousPitch, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileTurretShooterComponent, LastLoadingSound, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileTurretShooterComponent, UnknownData_LYRP, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileTurretShooterComponent, 0x02A0);
		}

		// class APushableActor : public AMordhauActor
		TEST_METHOD(Class__Mordhau__PushableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, UnknownData_GLGI, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, AutoMoveSpeed, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, UnknownData_XLQS, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, NonPullableThresholds, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, Team1Presence, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, Team2Presence, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, Team1PushSpeedByPushers, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, Team2PushSpeedByPushers, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, bStopPushingIfContested, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, UnknownData_ASEW, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, PushArea, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, ProgressStepToAwardScoreFor, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, ScoreAwardedPerProgressStep, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, NetworkInterpolationSpeed, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, NetworkInterpolationSpeedConstant, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, bIsNetworkInterpolationConstant, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, UnknownData_3A55, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, ReplicatedProgress, 0x03D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, Progress, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, UnknownData_TR4N, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushableActor, Obstacle, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APushableActor, 0x03F0);
		}

		// class UQuickthrowDrawMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__QuickthrowDrawMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowDrawMotion, RangedEquipment, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowDrawMotion, Slot, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowDrawMotion, Stage, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowDrawMotion, UnknownData_YLDQ, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowDrawMotion, FirstStageEnd, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowDrawMotion, SecondStageEnd, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowDrawMotion, ThirdStageEnd, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowDrawMotion, bHasFiredLocally, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowDrawMotion, UnknownData_CLQB, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuickthrowDrawMotion, 0x00C0);
		}

		// class UQuickthrowReleaseMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__QuickthrowReleaseMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowReleaseMotion, RangedEquipment, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowReleaseMotion, CreatedLocalProjectile, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowReleaseMotion, Stage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowReleaseMotion, UnknownData_6GFM, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuickthrowReleaseMotion, FirstStageEnd, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuickthrowReleaseMotion, 0x00B8);
		}

		// class UQuiver : public UObject
		TEST_METHOD(Class__Mordhau__Quiver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuiver, AttachSocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuiver, AttachSocketTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuiver, QuiverMeshes, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuiver, 0x0070);
		}

		// class URagdollFallingMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__RagdollFallingMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URagdollFallingMotion, bIsGettingUp, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URagdollFallingMotion, UnknownData_RXGU, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URagdollFallingMotion, 0x00A8);
		}

		// class URangedCancelMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__RangedCancelMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedCancelMotion, UnknownData_9MH6, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedCancelMotion, RangedEquipment, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedCancelMotion, CurrentlyPlayingRangedCancel, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URangedCancelMotion, 0x00B8);
		}

		// class URangedDrawMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__RangedDrawMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, UnknownData_9H2J, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, RandomValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, UnknownData_VVFR, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, AimRotationOffset, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, UnknownData_MYV9, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, AimVisualRotationOffset, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, RangedEquipmentPtr, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, UnknownData_VAML, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, DrawMontage, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, Draw1PMontage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, DrawEquipmentMontage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, DrawEquipment1PMontage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, CurrentMontage, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, CurrentEquipmentMontage, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, UnknownData_4OV4, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedDrawMotion, CurrentlyPlayingDraw, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URangedDrawMotion, 0x0150);
		}

		// class URangedReleaseMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__RangedReleaseMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedReleaseMotion, RangedEquipment, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedReleaseMotion, RangedEquipmentClass, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedReleaseMotion, CreatedLocalProjectile, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedReleaseMotion, CurrentMontage, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedReleaseMotion, CurrentEquipmentMontage, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedReleaseMotion, UnknownData_EHQ5, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedReleaseMotion, ReleaseMontage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedReleaseMotion, Release1PMontage, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedReleaseMotion, ReleaseEquipmentMontage, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangedReleaseMotion, ReleaseEquipment1PMontage, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URangedReleaseMotion, 0x00F0);
		}

		// class URconFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Mordhau__RconFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URconFunctionLibrary, 0x0028);
		}

		// class URconTypes : public UObject
		TEST_METHOD(Class__Mordhau__RconTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URconTypes, 0x0028);
		}

		// class UReloadMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__ReloadMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadMotion, RangedEquipment, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadMotion, CurrentMontage, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadMotion, CurrentEquipmentMontage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadMotion, ReloadMontage, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadMotion, Reload1PMontage, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadMotion, ReloadEquipmentMontage, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadMotion, Reload1PEquipmentMontage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadMotion, CurrentReloadSound, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadMotion, UnknownData_LAWQ, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadMotion, ReachTime, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadMotion, ReloadTime, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReloadMotion, 0x00F0);
		}

		// class ASeparatedBodyPart : public AActor
		TEST_METHOD(Class__Mordhau__SeparatedBodyPart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, Mesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, SkeletalMeshAsset, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, PhysicsConstraintActor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, SourceCharacter, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, HeadPhysicsAsset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, LeftArmPhysicsAsset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, LeftForearmPhysicsAsset, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, LeftHandPhysicsAsset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, RightArmPhysicsAsset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, RightForearmPhysicsAsset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, RightHandPhysicsAsset, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, LeftUpLegPhysicsAsset, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, LeftLegPhysicsAsset, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, LeftFootPhysicsAsset, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, RightUpLegPhysicsAsset, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, RightLegPhysicsAsset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, RightFootPhysicsAsset, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, InGoreMesh, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, InGoreMeshBlunt, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, InGoreMeshHead, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, FakeRootBone, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, InstancedGoreMeshes, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeparatedBodyPart, UnknownData_K40V, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASeparatedBodyPart, 0x0338);
		}

		// class USeparatedBodyPartAnimInstance : public UAnimInstance
		TEST_METHOD(Class__Mordhau__SeparatedBodyPartAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, CharacterMeshComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bIsLeftForeArmDismembered, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bIsRightForeArmDismembered, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bIsLeftLegDismembered, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bIsRightLegDismembered, 0x0273);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bIsLeftFootDismembered, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bIsRightFootDismembered, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bIsLeftHandDismembered, 0x0276);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bIsRightHandDismembered, 0x0277);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsHead, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsLeftArm, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsLeftForeArm, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsLeftHand, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsRightArm, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsRightForeArm, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsRightHand, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsLeftUpLeg, 0x027F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsLeftLeg, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsLeftFoot, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsRightUpLeg, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsRightLeg, 0x0283);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, bRootIsRightFoot, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeparatedBodyPartAnimInstance, UnknownData_HJFD, 0x0285);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeparatedBodyPartAnimInstance, 0x0290);
		}

		// class ACapturePointBanner : public AActor
		TEST_METHOD(Class__Mordhau__CapturePointBanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACapturePointBanner, ControlPoint, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACapturePointBanner, CaptureProgress, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACapturePointBanner, RopeMaterialIndex, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACapturePointBanner, FlagMaterialIndex, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACapturePointBanner, RopeSpeed, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACapturePointBanner, RopeMaterialInstance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACapturePointBanner, FlagMaterialInstance, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACapturePointBanner, 0x0248);
		}

		// class ASkeletalMeshCapturePointBanner : public ACapturePointBanner
		TEST_METHOD(Class__Mordhau__SkeletalMeshCapturePointBanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, SkeletalMeshComponent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, CapturingAudioComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, RaisingSound, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, LoweringSound, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, bAddWindActor, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, UnknownData_8K2X, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, WindDisabledIfLessThanProgress, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, WindStrength, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, WindSpeed, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, WindRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, WindMinGustAmount, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, WindMaxGustAmount, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, CurrentWindSpeed, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, WindActor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, WavingAudioComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, AudioVolumeByProgressIn, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, AudioVolumeByProgressOut, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, AudioPitchByProgressIn, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshCapturePointBanner, AudioPitchByProgressOut, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshCapturePointBanner, 0x02B8);
		}

		// class ASkeletalMeshMordhauActor : public AMordhauActor
		TEST_METHOD(Class__Mordhau__SkeletalMeshMordhauActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshMordhauActor, SkeletalMeshComponent, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshMordhauActor, 0x0380);
		}

		// class ASlaveProgressDriver : public AProgressDriver
		TEST_METHOD(Class__Mordhau__SlaveProgressDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASlaveProgressDriver, 0x0380);
		}

		// class USpawnActorCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__SpawnActorCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnActorCommand, 0x0080);
		}

		// class ASpawnGroup : public AActor
		TEST_METHOD(Class__Mordhau__SpawnGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnGroup, UnknownData_13W8, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnGroup, Spawns, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpawnGroup, 0x0238);
		}

		// class ASplineAudio : public AActor
		TEST_METHOD(Class__Mordhau__SplineAudio)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineAudio, MinDistance, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineAudio, NumInterpFrames, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineAudio, Curve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineAudio, UnknownData_C7VR, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineAudio, PC, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineAudio, Root, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineAudio, Spline, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineAudio, AudioComp, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineAudio, 0x0278);
		}

		// class USquadInfo : public UDataAsset
		TEST_METHOD(Class__Mordhau__SquadInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadInfo, bAddToSquadPool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadInfo, UnknownData_S2W0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadInfo, SpawnMinWave, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadInfo, SpawnMaxWave, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadInfo, MaxSquadsPerWave, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadInfo, Difficulty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadInfo, DelayBeforeSpawn, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadInfo, SpawnSound, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USquadInfo, Members, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USquadInfo, 0x00A0);
		}

		// class UAttackMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__AttackMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_JU5Y, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, VisualizeAttackAccelerationTraces, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, VisualizeAttackAccelerationDeltaTimes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bShowAutomaticBlendingDebug, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bShowAutomaticBlendingVisualDebug, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bShowWindUpSmoothingDebug, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bUsesTrail, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, PlayAttackYellTimeReleaseOffset, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, WooshTimeFactor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bWantsSlowLookSmoothingInRecovery, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_DFEA, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AnglingLimits, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AnglingAdditiveWindUp, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AnglingAdditiveRelease, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteAnglingAdditiveWindUp, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteAnglingAdditiveRelease, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ExperimentalLiveRecoveryDuration, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, LiveRecoveryHitsAreThuds, 0x0A44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bIncludeMissingDeltaTime, 0x0A45);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_2VXB, 0x0A46);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, WorldCollisionPercentageTriggerCurve, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, WorldCollisionAbsoluteTriggerCurve, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, TraceMemoryStayDuration, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MaxParryAngleForChamberAndActiveParry, 0x0A5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MaxParryWeaponAngleForChamberAndActiveParry, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ActiveParryStaminaCost, 0x0A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ActiveParryWindow, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bCanBeParriedInEarlyRelease, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bNoDamageInEarlyRelease, 0x0A6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bCanBeParriedByForwardCollider, 0x0A6E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bCanBeParriedByForwardColliderInEarlyRelease, 0x0A6F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ClashAngle, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, EarlyReleaseIsClashableAfter, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ChamberWindow, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ChamberStaminaRecover, 0x0A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ToChamberAttackAngleTolerance, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_NF73, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, GlanceDamageModifier, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bStopOnHitOnKills, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bCanTraceHitUsingShieldBlockCollider, 0x0A8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bStunsHeldBlock, 0x0A8E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bIsComboFromMiss, 0x0A8F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MinAngleToRearHorse, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MissTwiceStaminaCostMultiplier, 0x0A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteTradeDamageFactor, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteWindUpCanParryWindow, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bUseSeamlessCFTPInRecovery, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_1FJF, 0x0AA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, HitRecovery, 0x0AA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, HitStopRecovery, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ClashedRecovery, 0x0AAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MissRecoveryToPlayRate, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MissRecoveryPlayRateClamp, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RecoveryQueueWindow, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_3AFT, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, BounceMontage, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, BounceAdditive, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, WorldBounceCurve, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, WorldBounceScaleCurve, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ParryBounceCurve, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ParryLateBounceCurve, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ParryBounceScaleCurve, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, EarlyRelease, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, EarlyReleaseTimeFactor, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteEarlyRelease, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteEarlyReleaseTimeFactor, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, StrikeAnimationNormalizedRecoveryOffset, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_ONO8, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, SupersprintDurationByRangeCurve, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, SupersprintStartOffset, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, SupersprintDuration, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_NS7H, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, FeintWindow, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ComboFeintWindow, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bIsRiposteFeintable, 0x0B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bCanAttackFromFeintLockout, 0x0B6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_2MJM, 0x0B6E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, FeintAnimRate, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, FeintAnimDurationOffset, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, FeintAnimMinimumDuration, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bCanAutoFeintToAttack, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bRiposteAteFeintInput, 0x0B89);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_4XZL, 0x0B8A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MinWindUpTimeBeforeMorphing, 0x0B8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MorphWindow, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MorphWindupModifier, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MorphWindupCurve, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MaxMorphTotalTime, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MorphKickExtraTime, 0x0BA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ReleaseJumpBlockTime, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bPerformWeaponSlidingSparks, 0x0BAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RegularAttacksUseAutoBlendIn, 0x0BAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteAttacksUseAutoBlendIn, 0x0BAF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ComboAttacksUseAutoBlendIn, 0x0BB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, PostClashAttacksUseAutoBlendIn, 0x0BB3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MorphAttacksUseAutoBlendIn, 0x0BB5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_XQJA, 0x0BB7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AutoBlendInWeaponCurve, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AutoBlendConsiderUpVectorIfLargerThanAngle, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_BYAX, 0x0BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AutoBlendInSpineCurve, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AutoBlendOptimizeForwardSteps, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteAutoBlendOptimizeForwardSteps, 0x0BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AutoBlendOptimizeForwardStepSize, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, NormalBlendIn, 0x0BEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, NormalSlowBlendIn, 0x0BF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, NormalParrySlowBlendIn, 0x0BFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ComboBlendIn, 0x0C04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, PostClashBlendIn, 0x0C0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MorphBlendIn, 0x0C14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteBlendIn, 0x0C1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteWithShieldBlendIn, 0x0C24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_123M, 0x0C2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, BlendInCurve, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ComboBlendInCurve, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MorphBlendInCurve, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteBlendInCurve, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, BlendIn, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bUseAutomaticBlendIn, 0x0C5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_D41P, 0x0C5D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, Animation, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ComboAnimations, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, MorphAnimations, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteAnimation, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AltRiposteAnimation, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ClashAnimation, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, LeftTorsoMontage, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteLeftTorsoMontage, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, CurrentLeftTorsoAnimMontage, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, BlendOut, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, SuccessfulHitBlendOutAnimTime, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, SuccessfulHitPlayRate, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_PHA0, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, BlockedAttacks, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_3Z6D, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, EnableWindUpSmoothing, 0x0DDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_D9WS, 0x0DDE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, WindUpSmoothingExponentClamp, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, WindUpCurve, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ComboWindUpCurve, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AnimationTimeFor3PTransition, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_3FBX, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ReleaseCurve, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, RiposteReleaseCurve, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ComingFromMove, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_N1JQ, 0x0E19);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ComingFromAsParry, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AttackInfo, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, TargetAdditive, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, WindUpAdditive, 0x0FD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_UDXI, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, AngleTarget, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, LastReleaseNormalizedTime, 0x1074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, LastWindupNormalizedTime, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bHasHitFriendly, 0x107C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, Type, 0x107D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, Move, 0x107E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_06BP, 0x107F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, WindupEnd, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, ReleaseEnd, 0x1084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_HA1P, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, Montage, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, WindupSequenceUsed, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, QueuedAnimFor3PRelease, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, Weapon, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, PreviousLastAttackMotion, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bHasQueuedServerCombo, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_8042, 0x10C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, QueuedServerComboAngle, 0x10CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, QueuedServerComboMove, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bHasQueuedMove, 0x10D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_LPWP, 0x10D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, QueuedAngle, 0x10D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, QueuedMove, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, Stage, 0x10D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bHasHit, 0x10DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bHasHitIncludingCosmeticHit, 0x10DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, FirstHitTime, 0x10DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, FirstHitIncludingCosmeticReleaseNormalizedTime, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, bHasChambered, 0x10E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackMotion, UnknownData_2VN9, 0x10E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttackMotion, 0x10F0);
		}

		// class UStabMotion : public UAttackMotion
		TEST_METHOD(Class__Mordhau__StabMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStabMotion, AnimAngleCueAmount, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStabMotion, UnknownData_6SD1, 0x10FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStabMotion, AnimAngleCurve, 0x1100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStabMotion, 0x1108);
		}

		// class UStatComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__StatComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatComponent, UnknownData_8UMA, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatComponent, InitialStatValue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatComponent, MinStatValue, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatComponent, MaxStatValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatComponent, bIsRegenerable, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatComponent, UnknownData_QWP2, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatComponent, RegenerationStoppedDelay, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatComponent, RegenerationPerTick, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatComponent, RegenerationTickRate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatComponent, UnknownData_VZFU, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatComponent, 0x00D8);
		}

		// class UStaminaStatComponent : public UStatComponent
		TEST_METHOD(Class__Mordhau__StaminaStatComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaStatComponent, bPlaysOutOfBreathSound, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaStatComponent, UnknownData_T71C, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaStatComponent, BreathingSoundPlayBelowStamina, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaStatComponent, BreathingSoundMaxDistance, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaStatComponent, LastBreath, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaStatComponent, UnknownData_FI63, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaminaStatComponent, 0x00F0);
		}

		// class AStaticMeshCapturePointBanner : public ACapturePointBanner
		TEST_METHOD(Class__Mordhau__StaticMeshCapturePointBanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshCapturePointBanner, StaticMeshComponent, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshCapturePointBanner, 0x0250);
		}

		// class AStaticMeshMordhauActor : public AMordhauActor
		TEST_METHOD(Class__Mordhau__StaticMeshMordhauActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshMordhauActor, StaticMeshComponent, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshMordhauActor, 0x0380);
		}

		// class UStrikeMotion : public UAttackMotion
		TEST_METHOD(Class__Mordhau__StrikeMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, UnknownData_ZF1N, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, AnimAngleCueAmount, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, UnknownData_D2MQ, 0x1114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, AnimAngleCurve, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, ExtraEarlyReleaseForLookUpOverheads, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, ExtraEarlyReleaseForLookUpNonUndercuts, 0x1124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, CounterCompensateOverheadFixupTerm, 0x1128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, CounterCompensateOverheadFixupTiltTerm, 0x112C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, CounterCompensateWeight, 0x1130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, MaxTurnCompensation, 0x1134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, CounterCompensateLookTime, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, AngleToReleasePortionGlanceIn, 0x113C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, AngleToReleasePortionGlanceOut, 0x1144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, GlanceMinimumTurnAmount, 0x114C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, GlanceOppositeMinimumTurnAmount, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, GlanceBlockedMinimumTurnAmount, 0x1154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, GlanceBlockedOppositeMinimumTurnAmount, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStrikeMotion, UnknownData_S0DW, 0x115C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrikeMotion, 0x1160);
		}

		// class UStunMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__StunMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStunMotion, bWillDisarm, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStunMotion, UnknownData_VHWJ, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStunMotion, StunGracePeriodExtraTime, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStunMotion, StunDuration, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStunMotion, UnknownData_6ABR, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStunMotion, StunShakeEffect, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStunMotion, Animation, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStunMotion, 0x00C8);
		}

		// class ASubField : public AActor
		TEST_METHOD(Class__Mordhau__SubField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubField, Area, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubField, bIsSubFieldDeactivated, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubField, bIsSubFieldHidden, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubField, UnknownData_Q4WS, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubField, Master, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubField, UnknownData_GZVZ, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASubField, 0x0238);
		}

		// class UAdvProjectileMovementComponent : public UProjectileMovementComponent
		TEST_METHOD(Class__Mordhau__AdvProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvProjectileMovementComponent, DragDeceleration, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvProjectileMovementComponent, UnknownData_CU4F, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvProjectileMovementComponent, 0x01E0);
		}

		// class UAdvRichTextBlockImageDecorator : public URichTextBlockImageDecorator
		TEST_METHOD(Class__Mordhau__AdvRichTextBlockImageDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvRichTextBlockImageDecorator, 0x0030);
		}

		// class UAliveCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__AliveCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAliveCommand, 0x0080);
		}

		// class UArchetype : public UObject
		TEST_METHOD(Class__Mordhau__Archetype)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchetype, CharacterPoints, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchetype, UnknownData_I0HS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchetype, 0x0030);
		}

		// class UMordhauInventoryItem : public UObject
		TEST_METHOD(Class__Mordhau__MordhauInventoryItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInventoryItem, ItemIcon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInventoryItem, ItemDefID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInventoryItem, OriginalItemDefID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInventoryItem, ItemName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInventoryItem, ItemRarity, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauInventoryItem, UnknownData_OA5Q, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauInventoryItem, 0x0058);
		}

		// class UMordhauWearable : public UMordhauInventoryItem
		TEST_METHOD(Class__Mordhau__MordhauWearable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, UseColorsFromSlot, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, UnknownData_Q5JO, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, AlbedoMap, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, NormalMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, RoughnessMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, Albedo, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, Metallic, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, Roughness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, MetalAlbedoDarken, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, PDO, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, BloodOffsetA, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, BloodOffsetB, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, BloodMaskSizeFine, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, BloodMaskSizeSoft, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, BloodTextureSize, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, EmblemScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, EmblemOffset, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, EmblemRotation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHasEmblem, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bMuffleVoice, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bTreatAsMaster, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideIn1P, 0x00E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideEars, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, UnknownData_D9JX, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, HideEarsAmount, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideHair, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideBeard, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideNose, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, UnknownData_Y2J3, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, HideNoseAmount, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideLeftHand, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideRightHand, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideLeftFoot, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideRightFoot, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideLeftLeg, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideRightLeg, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideChest, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideLeftArm, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bHideRightArm, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, UnknownData_MH6T, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, Mesh, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, Mesh1POverride, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, AuxiliaryMesh, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, AuxiliaryMesh1POverride, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bRequiresFullArmAuxiliary, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bRequiresForearmAuxiliary, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bRequiresUpperChestAuxiliary, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, UnknownData_6LBQ, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, VertexCameraDisplacement, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, CharacterPointCost, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, ArmorClass, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bIsAllowedForPeasants, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, UnknownData_2EMR, 0x0136);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, SpeedFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, AccelerationFactor, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, Patterns, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, Pattern, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, UnknownData_C8MZ, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, Colors, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, ColorTables, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bIgnoreTeamColor1, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, bIgnoreTeamColor2, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, UnknownData_PQIY, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, DefaultColor1Temp, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, DefaultColor2Temp, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauWearable, UnknownData_C7WN, 0x019C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauWearable, 0x01A0);
		}

		// class UArmsWearable : public UMordhauWearable
		TEST_METHOD(Class__Mordhau__ArmsWearable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmsWearable, DefaultHands, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmsWearable, UnknownData_YTE2, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmsWearable, HandsWearables, 0x01A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArmsWearable, 0x01B8);
		}

		// class UTagSystemComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__TagSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTagSystemComponent, OwnTags, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTagSystemComponent, Tags, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTagSystemComponent, ParentTagSystemComponents, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTagSystemComponent, ChildrenTagSystemComponents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTagSystemComponent, ConditionDelegates, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTagSystemComponent, 0x0120);
		}

		// class UTeleportCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__TeleportCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeleportCommand, 0x0080);
		}

		// class UTestRconCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__TestRconCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestRconCommand, 0x0080);
		}

		// class UThudderComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__ThudderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, OnThud, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, bOnlyIfBoneIsSimulatingPhysics, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, UnknownData_3S83, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, MonitoredComponent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, MonitoredBone, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, MinTimeBetweenThuds, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, ThudMinVelocityThreshold, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, NextThudTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, PreviousVelocity, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, CurrentVelocity, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, bHasValidVelocity, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThudderComponent, UnknownData_L7O7, 0x00ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThudderComponent, 0x00F0);
		}

		// class ATurret : public AAdvancedCharacter
		TEST_METHOD(Class__Mordhau__Turret)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret, UnknownData_IQIK, 0x0AF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATurret, 0x0B00);
		}

		// class UUpperChestWearable : public UMordhauWearable
		TEST_METHOD(Class__Mordhau__UpperChestWearable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpperChestWearable, DefaultLowerChest, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpperChestWearable, UnknownData_I7RZ, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpperChestWearable, LowerChestWearables, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpperChestWearable, DefaultArms, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpperChestWearable, UnknownData_6OSB, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpperChestWearable, ArmsWearables, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpperChestWearable, DefaultShoulders, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpperChestWearable, UnknownData_P5VB, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpperChestWearable, ShouldersWearables, 0x01D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpperChestWearable, 0x01E8);
		}

		// class UVelocityBoxComponent : public UBoxComponent
		TEST_METHOD(Class__Mordhau__VelocityBoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVelocityBoxComponent, UnknownData_OV1C, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVelocityBoxComponent, TriggerVelocity, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVelocityBoxComponent, bUseVelocityAxis, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVelocityBoxComponent, UnknownData_PPCF, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVelocityBoxComponent, VelocityAxis, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVelocityBoxComponent, bVelocityAxisAccountForPawnVelocity, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVelocityBoxComponent, UnknownData_OGBO, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVelocityBoxComponent, OnTriggered, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVelocityBoxComponent, PreviousLocation, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVelocityBoxComponent, CurrentVelocity, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVelocityBoxComponent, UnknownData_97OQ, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVelocityBoxComponent, 0x0460);
		}

		// class UWebhookTypes : public UObject
		TEST_METHOD(Class__Mordhau__WebhookTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebhookTypes, 0x0028);
		}

		// class UWheeledVehicleAnimInstance : public UAdvancedCharacterAnimInstance
		TEST_METHOD(Class__Mordhau__WheeledVehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleAnimInstance, WheelCastDistance, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleAnimInstance, UnknownData_LMA1, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleAnimInstance, 0x0340);
		}

		// class UBadge : public UMordhauInventoryItem
		TEST_METHOD(Class__Mordhau__Badge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBadge, Texture, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBadge, 0x0060);
		}

		// class UBanListCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__BanListCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBanListCommand, 0x0080);
		}

		// class UBaseAttackMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__BaseAttackMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, bBlendInMultiplicative, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, UnknownData_GXD9, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, BlendIn, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, UnknownData_TA7D, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, BlendInCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, SlowBlendIn, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, ParrySlowBlendIn, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, RiposteBlendInWithShield, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, AnimationMap, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, CueAmount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, UnknownData_YL1U, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, CueCurve, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, AngleAdditive, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, AngleAdditiveWindUp, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, UnknownData_MARB, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, ReleaseCurve, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, FeintAnimRate, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, FeintAnimDurationOffset, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, MinimumFeintAnimDuration, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, WorldBounceCurve, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, WorldBounceScaleCurve, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, ParryBounceCurve, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, ParryLateBounceCurve, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAttackMotion, ParryBounceScaleCurve, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseAttackMotion, 0x0658);
		}

		// class UBlockedMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__BlockedMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, FromMove, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, bHasQueuedMove, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, UnknownData_DN84, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, QueuedAngle, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, QueuedMove, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, BlockResult, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, bHasFadedOutProcedural, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, bDoReleaseBounceProcedural, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, UnknownData_Z5GJ, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, FromAttackMontage, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, QueueWindow, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, QueueWindowHit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, MovementRestrictionHit, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, MovementRestrictionWorld, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, OriginalMovementRestriction, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, UnknownData_EYOV, 0x00CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ClashFadeOutTime, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ClashFadeOutTime3P, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabWorldFadeOutTime, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabWorldFadeOutTime3P, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabParryMinMaxRange, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabParryFadeOutTime, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabParryMinMaxRange3P, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabParryFadeOutTime3P, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabChamberedMinMaxRange, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabChamberedFadeOutTime, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabChamberedMinMaxRange3P, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabChamberedFadeOutTime3P, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ParriedRecoveryTimeOffset, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ParriedRecoveryTimeLimits, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ChamberedRecoveryTimeOffset, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ChamberedRecoveryTimeLimits, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, UnknownData_DS6P, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopBounceCurve, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopBounceScaleCurve, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopReleaseScaleCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopBounceCurve3P, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopBounceScaleCurve3P, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopReleaseScaleCurve3P, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopTimeUntilFade, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopBounceDuration, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopFadeOutTime, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopTimeUntilFade3P, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopBounceDuration3P, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralHitStopFadeOutTime3P, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabHitStopFadeOutTime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, StabHitStopFadeOutTime3P, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, KickHitStopBlendOutTime, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, KickHitStopAnimRate, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, WorldRecoveryTime, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, WorldMissStaminaFactor, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ReleaseScaleCurve, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ReleaseScaleCurve3P, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralParryMinMaxRange, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralParryTimeUntilFade, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralParryBounceDuration, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralParryFadeOutTime, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralChamberMinMaxRange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralChamberTimeUntilFade, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralChamberBounceDuration, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralChamberFadeOutTime, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralWorldTimeUntilFade, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralWorldBounceDuration, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralWorldFadeOutTime, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralParryMinMaxRange3P, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralParryTimeUntilFade3P, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralParryBounceDuration3P, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralParryFadeOutTime3P, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralChamberMinMaxRange3P, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralChamberTimeUntilFade3P, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralChamberBounceDuration3P, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralChamberFadeOutTime3P, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralWorldTimeUntilFade3P, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralWorldBounceDuration3P, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockedMotion, ProceduralWorldFadeOutTime3P, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlockedMotion, 0x0240);
		}

		// class UBotBehaviorProfile : public UObject
		TEST_METHOD(Class__Mordhau__BotBehaviorProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, DefaultTeam, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, FriendlyFireVoiceChance, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, HurtHelpVoiceChance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, WasDisarmedHelpVoiceChance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, DisarmedLaughVoiceChance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, ThanksOnAssistVoiceChance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, RespectOnKillVoiceChance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, IgnoreEnemiesWithAllyCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, RangedAccuracyDegreesMinMax, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, RangedAccuracyDistanceMinMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bPrefersAltMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, UnknownData_OW5X, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, BaseAttackHesitanceTime, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, AttackHesitanceVariance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, FootworkInsteadOfParryProbability, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, FootworkWithCrouchProbability, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, ParryTimingVariance, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, PerfectParryProbability, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, FeintTimingVariance, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, FallForFeintProbability, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, ComboProbability, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, DragProbability, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, AccelProbability, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, ChamberProbability, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, MorphProbability, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, GambleProbability, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, FeintProbability, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, RiposteProbability, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, BrawlProbability, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, MaxTurnRate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, MaxLookUpRate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, Random2DUnitVector, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillBrawl, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillRegularAttack, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillRiposte, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillFeint, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillGamble, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillMorph, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillChamber, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillAccel, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillDrag, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillCombo, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillFallForFeint, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, UnknownData_TPTI, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, FeintTimingRandom, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillPerfectParry, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, UnknownData_HNOU, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, ParryTimingRandom, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillFootwork, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, bWillFootworkWithCrouch, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, UnknownData_G0JQ, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, LastFootworkingEnemyMotion, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, AttackHesitanceRandom, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotBehaviorProfile, UnknownData_LOE7, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBotBehaviorProfile, 0x00E0);
		}

		// class UBotCommands : public URconCommand
		TEST_METHOD(Class__Mordhau__BotCommands)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBotCommands, 0x0080);
		}

		// class UBotProfile : public UObject
		TEST_METHOD(Class__Mordhau__BotProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, BotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, UseBotLoadoutProfileID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, UnknownData_K9J3, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, CharacterProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, BehaviorProfile, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, bRandomizeBehavior, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, bRandomizeName, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, bRandomizeAppearance, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, bRandomizeFace, 0x0103);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, bRandomizeVoice, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, bRandomizeSkills, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, bRandomizeEquipment, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBotProfile, bRandomizeWearables, 0x0107);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBotProfile, 0x0108);
		}

		// class UBTTask_Experimental : public UBTTaskNode
		TEST_METHOD(Class__Mordhau__BTTask_Experimental)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Experimental, UnknownData_K6QA, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Experimental, 0x0078);
		}

		// class UBTTask_FallForFeint : public UBTTaskNode
		TEST_METHOD(Class__Mordhau__BTTask_FallForFeint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FallForFeint, 0x0070);
		}

		// class UBTTask_MeleeAttack : public UBTTaskNode
		TEST_METHOD(Class__Mordhau__BTTask_MeleeAttack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MeleeAttack, 0x0070);
		}

		// class UBTTask_MeleeDefend : public UBTTaskNode
		TEST_METHOD(Class__Mordhau__BTTask_MeleeDefend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MeleeDefend, 0x0070);
		}

		// class UBTTask_RangedAttack : public UBTTaskNode
		TEST_METHOD(Class__Mordhau__BTTask_RangedAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RangedAttack, MaxProjectileFlightTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RangedAttack, UnknownData_5E2B, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RangedAttack, 0x0078);
		}

		// class UBTTask_SwitchEquipment : public UBTTaskNode
		TEST_METHOD(Class__Mordhau__BTTask_SwitchEquipment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SwitchEquipment, bMelee, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SwitchEquipment, UnknownData_I209, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SwitchEquipment, AllowedSubclasses, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SwitchEquipment, NotAllowedSubclasses, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SwitchEquipment, 0x0098);
		}

		// class UBTTask_VoiceOrEmote : public UBTTaskNode
		TEST_METHOD(Class__Mordhau__BTTask_VoiceOrEmote)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_VoiceOrEmote, VoiceCommandsList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_VoiceOrEmote, EmotesList, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_VoiceOrEmote, bForceEmote, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_VoiceOrEmote, UnknownData_LB4I, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_VoiceOrEmote, GlobalCooldown, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_VoiceOrEmote, Chance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_VoiceOrEmote, UnknownData_QKOS, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_VoiceOrEmote, 0x00A0);
		}

		// class UBuildableTraceBase : public UDataAsset
		TEST_METHOD(Class__Mordhau__BuildableTraceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableTraceBase, TraceObjectTypes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableTraceBase, bTraceComplex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableTraceBase, bIgnoreSelf, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableTraceBase, DrawType, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableTraceBase, UnknownData_7MWH, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableTraceBase, DrawColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableTraceBase, TraceTextForUI, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableTraceBase, ActorsToIgnore, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildableTraceBase, 0x0070);
		}

		// class UBuildableBoxTrace : public UBuildableTraceBase
		TEST_METHOD(Class__Mordhau__BuildableBoxTrace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableBoxTrace, ProfileName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableBoxTrace, StartTraceXAxisPercentage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableBoxTrace, UnknownData_252H, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildableBoxTrace, 0x0080);
		}

		// class UBuildableLineTrace : public UBuildableTraceBase
		TEST_METHOD(Class__Mordhau__BuildableLineTrace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableLineTrace, TraceStartOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableLineTrace, TraceEndOffset, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildableLineTrace, 0x0088);
		}

		// class UBuildablePlaneTrace : public UBuildableTraceBase
		TEST_METHOD(Class__Mordhau__BuildablePlaneTrace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, CheckActorsOnPlaneTraceHit, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, PlaneInfo, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, TraceAmount, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, UnknownData_Q9NF, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, ForbiddenHitActorsList, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, bInverseXYAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, UnknownData_4OCU, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, MaxAllowedPlacementAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, InverseXAxisMod, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, InverseYAxisMod, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, PlacementLocationOffset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildablePlaneTrace, PlacementRotationOffset, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildablePlaneTrace, 0x00E0);
		}

		// class UBuildableSphereOverlap : public UBuildableTraceBase
		TEST_METHOD(Class__Mordhau__BuildableSphereOverlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableSphereOverlap, SphereRadius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableSphereOverlap, StartTraceXAxisPercentage, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableSphereOverlap, bCheckOnlyLoadedEquipement, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableSphereOverlap, UnknownData_FPVO, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildableSphereOverlap, ActorClassFilter, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildableSphereOverlap, 0x0088);
		}

		// class UBuildingSystemComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__BuildingSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildingSystemComponent, SpawnableObjects, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildingSystemComponent, TraceList, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildingSystemComponent, PreviewMeshComponent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildingSystemComponent, PreviewMaterial, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildingSystemComponent, bShowPreview, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildingSystemComponent, UnknownData_XYBU, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildingSystemComponent, MordhauHUDWidgetComponent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildingSystemComponent, OnMeshPreviewCreated, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildingSystemComponent, OnMeshPreviewDestroyed, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildingSystemComponent, UnknownData_CV7O, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildingSystemComponent, 0x0118);
		}

		// class AVehicleBase : public AWheeledVehicle
		TEST_METHOD(Class__Mordhau__VehicleBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleBase, UnknownData_0W7H, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleBase, RestState, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleBase, UnknownData_L8B5, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleBase, NetTimeBehind, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleBase, NetPositionTolerance, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleBase, NetSendRate, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleBase, UnknownData_ELQ3, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVehicleBase, 0x0300);
		}

		// class ACatapult : public AVehicleBase
		TEST_METHOD(Class__Mordhau__Catapult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatapult, UnknownData_7U7D, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACatapult, 0x0308);
		}

		// class UCatapultMovementComponent : public USimpleWheeledVehicleMovementComponent
		TEST_METHOD(Class__Mordhau__CatapultMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatapultMovementComponent, DriveTorque, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatapultMovementComponent, DriveWheelAngle, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatapultMovementComponent, RotateFrontTorque, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatapultMovementComponent, RotateRearTorque, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatapultMovementComponent, RotateFrontWheelAngle, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatapultMovementComponent, RotateRearWheelAngle, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatapultMovementComponent, BrakeStrength, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatapultMovementComponent, Bias, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatapultMovementComponent, StuckVelocity, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatapultMovementComponent, UnknownData_NAW8, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCatapultMovementComponent, 0x02C8);
		}

		// class UChangeLevelCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__ChangeLevelCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChangeLevelCommand, 0x0080);
		}

		// class UChangeTeamCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__ChangeTeamCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChangeTeamCommand, 0x0080);
		}

		// class UCharacterFace : public UMordhauInventoryItem
		TEST_METHOD(Class__Mordhau__CharacterFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, Mesh, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, Albedo, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, Normal, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, AgedNormal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, PBRMap, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, TorsoAlbedo, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, TorsoNormal, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, TorsoPBRMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, Arms1PAlbedo, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, Arms1PNormal, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, Arms1PPBRMap, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, SkinColorTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, UnknownData_H2HL, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, EyebrowOffset, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, EyebrowScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, EyebrowDistance, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, EyebrowRotation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, EyeColorTable, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, UnknownData_ENOJ, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, Eyes, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, LeftArm, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, LeftArm1P, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, RightArm, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, RightArm1P, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, LeftHand, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, LeftHand1P, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, RightHand, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, RightHand1P, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, LeftLeg, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, RightLeg, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, LeftFoot, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, RightFoot, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, Torso, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, FullArmAuxiliaryMesh, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, FullArmAuxiliaryMesh1P, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, ForeArmAuxiliaryMesh, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, ForeArmAuxiliaryMesh1P, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, UpperChestAuxiliaryMesh, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, BloodOffsetA, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, BloodOffsetB, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, BloodMaskSizeFine, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, BloodMaskSizeSoft, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, BloodTextureSize, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, UnknownData_BU1R, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, Hair, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterFace, FacialHair, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterFace, 0x01D8);
		}

		// class UCharacterHair : public UMordhauInventoryItem
		TEST_METHOD(Class__Mordhau__CharacterHair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHair, Mesh, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHair, Albedo, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHair, Normal, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHair, HairColorTable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHair, UnknownData_20D8, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterHair, 0x0078);
		}

		// class ULODSkeletalMeshComponent : public USkeletalMeshComponent
		TEST_METHOD(Class__Mordhau__LODSkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, UnknownData_NQGI, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, UnknownData_GFF6, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, LODDeltaTime, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, LastLODDeltaTime, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, bHasSkippedThisFrame, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, UnknownData_WC8W, 0x0B49);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, FramesSinceLastLODTick, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, FramesUntilNextLODTick, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, bUseBoneRadiusBounds, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, UnknownData_BUFO, 0x0B55);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, BoneRadiusBoundsBoneName, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, BoneRadiusBoundsRadius, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, MaxLODDeltaTime, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, bSmoothClothLODTransition, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, UnknownData_MCRR, 0x0B69);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, ClothLODTransitionSpeed, 0x0B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, bSkipTransformUpdate, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, bPreventTicking, 0x0B71);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, bUpdateLODIfPreventTicking, 0x0B72);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, bForceNextTick, 0x0B73);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSkeletalMeshComponent, UnknownData_SY6D, 0x0B74);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSkeletalMeshComponent, 0x0B80);
		}

		// class UCharacterMeshComponent : public ULODSkeletalMeshComponent
		TEST_METHOD(Class__Mordhau__CharacterMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, UnknownData_OX0X, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, MaxWounds, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, UnknownData_O48X, 0x0B99);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, BloodReceivingSkeletalMeshes, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, BloodIntensityParamName, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, UnknownData_FURT, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, RagdollFallingFromPhysicsAsset, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, RagdollFallingProfileName, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, RagdollFallingPhysicsAsset, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, RagdollFallingBlendOutSpeed, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, RagdollFallingApplyForce, 0x0BFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, RagdollFallingApplyForceAir, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, RagdollFallingApplyForceBoneName, 0x0C14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, UnknownData_7GMU, 0x0C1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, DissolveMaterialInstances, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMeshComponent, UnknownData_5R5I, 0x0C38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMeshComponent, 0x0C40);
		}

		// class UCharacterProfileBPWrapper : public UObject
		TEST_METHOD(Class__Mordhau__CharacterProfileBPWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterProfileBPWrapper, Profile, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterProfileBPWrapper, 0x00E0);
		}

		// class UCharacterVoice : public UMordhauInventoryItem
		TEST_METHOD(Class__Mordhau__CharacterVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoice, VoiceCommands, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoice, Hurt, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoice, Death, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoice, AttackYell, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoice, Breathing, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoice, Screaming, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoice, PitchLimits, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoice, ClipCounts, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterVoice, 0x00A0);
		}

		// class UCharacterVoiceComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__CharacterVoiceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, UnknownData_EB8A, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, LastHurtYell, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, DeathScreamPtr, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, LastVoiceCommand, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, LastAttackYell, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, LastScream, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, CharacterVoice, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, LastRequestedVoiceCommandTime, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, VoiceCommandQueueDuration, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, MinDelayBetweenVoiceCommands, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, MinDelayBetweenBattlecries, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, VoicePitch, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, bIsVoiceMuffled, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, UnknownData_0VRM, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, MuffledVoiceLowPassFrequency, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, MuffledVoiceVolumeMultiplier, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, AttackYellVolumeMultiplierViewTarget, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, UnknownData_CA0Y, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, FaceAttackAnimation, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, FaceBattlecryAnimation, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, FaceTalkingAnimation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterVoiceComponent, FaceHurtAnimation, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterVoiceComponent, 0x0130);
		}

		// class UClimbingMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__ClimbingMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, ClimbSound, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, ClimbRecoveryDuration, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, ClimbAnimBlendOutOffset, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, AuthorityMoveUpStartTime, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, AuthorityMoveLateralStartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, AuthorityMoveLateralDuration, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, SlowClimbRecoveryDuration, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, SlowAuthorityMoveUpStartTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, SlowAuthorityMoveLateralStartTime, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, SlowAuthorityMoveLateralDuration, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, TurnCaps, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, bIsSlowClimb, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, UnknownData_Z959, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, ClimbOffset, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, LedgeOffset, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, LedgeNormal, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, ClimbStartMeshLocation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, AuthMoveStartLocation, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, bIsAuthMovingUp, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, bIsAuthMovingLaterally, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClimbingMotion, UnknownData_R5M4, 0x0116);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClimbingMotion, 0x0118);
		}

		// class UComboBoxText : public UWidget
		TEST_METHOD(Class__Mordhau__ComboBoxText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, DefaultOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, SelectedOption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, ItemStyle, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, ContentPadding, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, MaxListHeight, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, HasDownArrow, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, EnableGamepadNavigationMode, 0x0CFD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, UnknownData_D2RR, 0x0CFE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, Font, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, ForegroundColor, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, bIsFocusable, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, UnknownData_N9SF, 0x0D79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, OnGenerateWidgetEvent, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, UnknownData_FQD4, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, OnSelectionChanged, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, OnOpening, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxText, UnknownData_Z1B4, 0x0DB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxText, 0x0DF0);
		}

		// class UCompoundVehicleAnimInstance : public UAdvancedCharacterAnimInstance
		TEST_METHOD(Class__Mordhau__CompoundVehicleAnimInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompoundVehicleAnimInstance, 0x0330);
		}

		// class UConfigCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__ConfigCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfigCommand, ValueTypes, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConfigCommand, 0x00D0);
		}

		// class AControlPoint : public AActor
		TEST_METHOD(Class__Mordhau__ControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, OverlapsCache, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, Name, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bShouldPauseCaptureIfEnemyNear, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bIsHiddenPoint, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bIsCapturable, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bTeam1OwnsPrerequisites, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bTeam2OwnsPrerequisites, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bSpawnsDisabled, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, UnknownData_KCBN, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, DecalMaterialInstance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, SpawnsTeam, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, SpawnsToken, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, WidgetComponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bDoNotShowFloaterWidget, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bDoNotShowInTopBarWidget, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, UnknownData_WSKR, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, UIMaterial, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, UIMaterialInstance, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, LastSetUIIconColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, LastSetUIBorderColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, LastSetUIProgress, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, AwardScoreInterval, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, AwardScoreCapturing, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, AwardScoreCaptured, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, AwardScoreNeutralizing, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, AwardScoreNeutralized, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, Banners, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, CaptureArea, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, CaptureProgress, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, UnchangedCaptureProgressTime, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bBannersDoNotAnimateCaptureProgress, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, ReplicatedCaptureProgress, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, UnknownData_9796, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, NetworkSmoothTime, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, OwningTeam, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, CapturingTeam, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, UnknownData_7ZL0, 0x02E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, Team1PrerequisitePoints, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, Team2PrerequisitePoints, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, SpawnPoints, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, Team1Presence, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, Team2Presence, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bIsFlashing, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bPreventSpawningIfContested, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bHasEverReplicatedProgress, 0x0322);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, UnknownData_QY1W, 0x0323);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, UncaptureSpeed, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, NeutralizeSpeedCurve, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, CaptureSpeedCurve, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlPoint, 0x0338);
		}

		// class UCouchedAttackMotion : public UAttackMotion
		TEST_METHOD(Class__Mordhau__CouchedAttackMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCouchedAttackMotion, CouchingBlendFrom, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCouchedAttackMotion, CouchStage, 0x10F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCouchedAttackMotion, UnknownData_LPAQ, 0x10F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCouchedAttackMotion, CouchStart, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCouchedAttackMotion, CouchFeintLockOut, 0x10FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCouchedAttackMotion, MaxCouchTime, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCouchedAttackMotion, RecoveryDuration, 0x1104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCouchedAttackMotion, OriginalSecondaryTurnLimit, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCouchedAttackMotion, HorsePtr, 0x110C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCouchedAttackMotion, UnknownData_ZZH8, 0x1114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCouchedAttackMotion, 0x1118);
		}

		// class UCrowdObstacleComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__CrowdObstacleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdObstacleComponent, UnknownData_HJBU, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdObstacleComponent, bEnabledOnStart, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdObstacleComponent, UnknownData_33Y0, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdObstacleComponent, ObstacleRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdObstacleComponent, ObstacleHalfHeigth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdObstacleComponent, LocationOffset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdObstacleComponent, UnknownData_ARE4, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdObstacleComponent, 0x00D8);
		}

		// class ACustomizationReplicationActor : public AActor
		TEST_METHOD(Class__Mordhau__CustomizationReplicationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, bHasReplicatedAnything, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, LastRebuiltVersionTracker, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, UnknownData_LACV, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, LastAssignedProfile, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, RegisteredCharacters, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, bWasEverAssigned, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, bWillDestroyOnUnregister, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, UnknownData_DSRT, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, Cached1PMesh, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, Cached1PDeadMesh, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, CachedUnifiedMesh, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, ReplicatedFaceBonesTranslate, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, ReplicatedFaceBonesRotate, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, ReplicatedFaceBonesScale, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, ReplicatedAppearanceCustomization, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, ReplicatedSkillsCustomization, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, ReplicatedDefaultEquipmentId, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, DefaultEquipment, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, ReplicatedWearableId, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, ReplicatedWearableColor1, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, ReplicatedWearableColor2, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomizationReplicationActor, ReplicatedWearablePattern, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACustomizationReplicationActor, 0x0418);
		}

		// class UDamageableComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__DamageableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, LastDamageAgent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, LastDamageSource, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, LastDamageInstigator, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, TeamDamageModifier, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, FireDamageModifier, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, FallDamageModifier, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, RangedDamageModifier, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, DamageModifier, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, MaxDamage, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, DamageAbsorption, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, SpawnProtectionDuration, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, Surface, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, bStopsMeleeAttacks, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, UnknownData_9MGZ, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, NetDamage, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageableComponent, UnknownData_CEU2, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageableComponent, 0x0118);
		}

		// class UDisarmedMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__DisarmedMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisarmedMotion, RecoveryTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisarmedMotion, UnknownData_6BJU, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisarmedMotion, 0x00A8);
		}

		// class UDismemberableComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__DismemberableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, QueuedDismemberAgent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, SeparatedHead, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, SeparatedBodyParts, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, AttachedGoreMeshes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, DismemberedBones, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, DismemberWoundInfo, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, UnknownData_LYRL, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, BodyPart, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, DismembermentGore, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, BluntDismembermentGore, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, OutGoreMeshBlunt, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, OutGoreMesh, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, OutGoreMeshNeck, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, LimbExplosionParticle, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, MaxDistFromBoneForAnyDismember, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, MaxAngleDistFromBoneForAnyDismember, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, MaxDistFromBoneForFullDismember, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, MaxAngleDistFromBoneForFullDismember, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, RagdollMaxDistFromBoneForAnyDismember, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, RagdollMaxDistFromBoneForFullDismember, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, MinimumDamageToExplode, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, MinimumDamageToDismember, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, MinimumDamageToPartialDismember, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, DismemberArmsSpineYawPitchLimit, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDismemberableComponent, DismemberableBones, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDismemberableComponent, 0x0320);
		}

		// class UDriverComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__DriverComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDriverComponent, UnknownData_P61G, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDriverComponent, 0x0160);
		}

		// class UDropEquipmentMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__DropEquipmentMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropEquipmentMotion, bIsDroppingRightHand, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropEquipmentMotion, UnknownData_IWZ4, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropEquipmentMotion, DroppingEquipment, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropEquipmentMotion, Montage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropEquipmentMotion, DropTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropEquipmentMotion, bHasDropped, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropEquipmentMotion, UnknownData_C790, 0x00BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDropEquipmentMotion, 0x00C0);
		}

		// class AECSActor : public AActor
		TEST_METHOD(Class__Mordhau__ECSActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, TotalCharacters, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, PlaneTopLeft, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, PlaneBottomRight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, MoveVelocityMax, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, AnimTicksPerFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, UnknownData_UQCM, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, SkeletalMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, CollisionEnabled, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, UnknownData_JLG6, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, PhysicsAsset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, AnimInstance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, SkeletalMeshComponents, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, CharPhysics, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, CharMove, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, ManagedCharacters, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, ManagedCharPhysics, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, ManagedCharMove, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, DuringPhysicsTickFunction, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AECSActor, PostPhysicsTickFunction, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AECSActor, 0x0328);
		}

		// class UECSSkeletalMeshComponent : public USkeletalMeshComponent
		TEST_METHOD(Class__Mordhau__ECSSkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UECSSkeletalMeshComponent, AccumulatedDeltaTime, 0x0ABC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UECSSkeletalMeshComponent, 0x0AC0);
		}

		// class UEmblem : public UMordhauInventoryItem
		TEST_METHOD(Class__Mordhau__Emblem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmblem, Texture, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmblem, 0x0060);
		}

		// class UEmoteCancelMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__EmoteCancelMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmoteCancelMotion, 0x00A0);
		}

		// class UEmoteMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__EmoteMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, EmoteName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, Duration, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, CanEmoteAfter, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, CancelTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, CancelBlendTime, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, TurnCaps, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, TransitionInMontage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, Montage, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, TransitionOutMontage, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, FaceMontage, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, StartMontageTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, StartTransitionOutMontageTime, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, bForce3P, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, bHideLeftHand, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, bHideRightHand, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, bUnequipLeftHand, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, bUnequipRightHand, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, bDropLeftHand, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, UnknownData_9LAK, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, LeftHandDropForce, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, bDropRightHand, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, UnknownData_7YAU, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, RightHandDropForce, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, bWasIn1P, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, bHasStartedMainMontage, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, bHasStartedMainMontageTransitionOut, 0x011E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, UnknownData_I7EA, 0x011F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, HidLeft, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMotion, HidRight, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmoteMotion, 0x0130);
		}

		// class UEmoteSwitcherMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__EmoteSwitcherMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteSwitcherMotion, SwitchToID, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteSwitcherMotion, UnknownData_TQU8, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmoteSwitcherMotion, 0x00A8);
		}

		// class UEnterVehicleMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__EnterVehicleMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnterVehicleMotion, 0x00A0);
		}

		// class AEnvironmentMovable : public AActor
		TEST_METHOD(Class__Mordhau__EnvironmentMovable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnvironmentMovable, SwayMethod, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnvironmentMovable, UnknownData_SH7K, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnvironmentMovable, SwayingComponent, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnvironmentMovable, RollPitchYawFrequency, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnvironmentMovable, RollPitchYawMagnitude, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnvironmentMovable, RollPitchYawSpeed, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEnvironmentMovable, 0x0250);
		}

		// class UEnvQueryGenerator_Equipment : public UEnvQueryGenerator
		TEST_METHOD(Class__Mordhau__EnvQueryGenerator_Equipment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Equipment, UnknownData_KTXY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Equipment, 0x0058);
		}

		// class UEnvQueryGenerator_Objectives : public UEnvQueryGenerator
		TEST_METHOD(Class__Mordhau__EnvQueryGenerator_Objectives)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Objectives, UnknownData_18QL, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Objectives, 0x0058);
		}

		// class UEnvQueryTest_Objectives : public UEnvQueryTest
		TEST_METHOD(Class__Mordhau__EnvQueryTest_Objectives)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Objectives, UnknownData_H4OG, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Objectives, 0x0200);
		}

		// class UEquipmentModeSwitchMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__EquipmentModeSwitchMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, Stage1Duration, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, Stage2Duration, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, Montage, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, SwitchingEquipment, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, VirtualReparentLocation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, UnknownData_827F, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, VirtualReparentRotation, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, bIsSwitchingToAlt, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, SwitchType, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, UnknownData_1KZH, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, FirstStageEnd, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, SecondStageEnd, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, Stage, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, bHasFinishedSwitch, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentModeSwitchMotion, UnknownData_ZESP, 0x00EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEquipmentModeSwitchMotion, 0x00F0);
		}

		// class UEquipmentSwitchMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__EquipmentSwitchMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, UnhideAfterTimeIfDropped, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, UnknownData_XAFG, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, bHasFinishedSwitch, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, SwitchingToSlot, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, UnknownData_3F1J, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, SwitchingTo, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, HiddenLeft, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, HiddenRight, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, Montage, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, ReachEnd, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, Stage, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, UnknownData_GFI8, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, LocalVirtualReparentStart, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSwitchMotion, UnknownData_XFUR, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEquipmentSwitchMotion, 0x00D8);
		}

		// class UEquipmentSystemComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__EquipmentSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSystemComponent, UnknownData_45WF, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSystemComponent, PrevReplicatedEquipment, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSystemComponent, PrevReplicatedLeftHandEquipment, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSystemComponent, PrevReplicatedRightHandEquipment, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSystemComponent, QuiverStaticMeshComponent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSystemComponent, DeathEquipmentRagdollAngularFactor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentSystemComponent, DeathEquipmentRagdollTranslationalFactor, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEquipmentSystemComponent, 0x00F0);
		}

		// class UFaceCustomizationComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__FaceCustomizationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, UnknownData_X4CG, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, BoneToParentGroupIdx, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, BoneIdxToSculptableFaceBoneIdx, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, SelectionBoneIdxToSculptableFaceBoneIdx, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, BoneNameToSculptableFaceBoneIdx, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, BakedDefaultFaceValuesTranslate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, BakedDefaultFaceValuesRotate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, BakedDefaultFaceValuesScale, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, HideEarsAmount, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, HideNoseAmount, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, bRegenerateBakedDefaultFaceValues, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, bHasScaryFace, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, UnknownData_7Z4D, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, ScaryFaceRotationMultipliers, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, ScaryFaceTranslationMultipliers, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCustomizationComponent, ScaryFaceScaleMultipliers, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFaceCustomizationComponent, 0x0258);
		}

		// class UFeintedMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__FeintedMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, SpineSpaceAdditiveBlendOutTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, QueueWindow, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, SlowKickDuration, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, StrikeAndStabLockoutIn, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, StrikeAndStabLockoutOut, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, UnknownData_VHAL, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, StrikeAndStabLateFeintAdjustmentCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, ExtraStabLockout, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, ExtraStrikeLockout, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, UnknownData_VV9Z, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, Type, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, FromMove, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, bHasQueuedMove, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, QueuedMove, 0x00DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, QueuedAngle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeintedMotion, UnknownData_CQGO, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFeintedMotion, 0x00E8);
		}

		// class UFieldSpawnComponent : public USceneComponent
		TEST_METHOD(Class__Mordhau__FieldSpawnComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, SubFieldClass, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, bSnapLocationToGround, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, bSnapLocationToGroundDestroyIfNoGround, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, bSnapRotationToGroundNormal, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, UnknownData_TPFQ, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, MaxAllowedRotation, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, SnapGroundTraceOffsetZ, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, SnapGroundRadius, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, MaxDistanceSnapGround, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, bShouldCheckLineOfSight, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, UnknownData_78V5, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, LineOfSightRadiusCheck, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSpawnComponent, UnknownData_29QG, 0x0214);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSpawnComponent, 0x0220);
		}

		// class AVirtualWeapon : public AMordhauWeapon
		TEST_METHOD(Class__Mordhau__VirtualWeapon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVirtualWeapon, 0x1C20);
		}

		// class AFistsWeapon : public AVirtualWeapon
		TEST_METHOD(Class__Mordhau__FistsWeapon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFistsWeapon, 0x1C20);
		}

		// class UFlinchMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__FlinchMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlinchMotion, bHasDoneFlinchEffect, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlinchMotion, UnknownData_0VQL, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlinchMotion, FlinchDuration, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlinchMotion, ParryLockOutTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlinchMotion, FlinchDurationModifierToShakeScaleIn, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlinchMotion, FlinchDurationModifierToShakeScaleOut, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlinchMotion, UnknownData_PWCZ, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlinchMotion, 0x00C0);
		}

		// class UGameModeMetadata : public UObject
		TEST_METHOD(Class__Mordhau__GameModeMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeMetadata, Prefix, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeMetadata, Name, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeMetadata, Description, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeMetadata, Thumbnail, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeMetadata, Tips, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeMetadata, PlayerCount, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameModeMetadata, 0x00D0);
		}

		// class AGoreActor : public AActor
		TEST_METHOD(Class__Mordhau__GoreActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGoreActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGoreActor, ParticleSystemComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGoreActor, 0x0230);
		}

		// class UHeadWearable : public UMordhauWearable
		TEST_METHOD(Class__Mordhau__HeadWearable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadWearable, DefaultCoif, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadWearable, UnknownData_B491, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadWearable, CoifWearables, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadWearable, HelmetAOOffset, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadWearable, HelmetAOPower, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadWearable, HelmetAOIntensity, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadWearable, HelmetAOEyeIntensity, 0x01C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadWearable, 0x01C8);
		}

		// class UHealthStatComponent : public UStatComponent
		TEST_METHOD(Class__Mordhau__HealthStatComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatComponent, bPlaysHeartbeatSound, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatComponent, UnknownData_AC7F, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatComponent, HeartbeatSound, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatComponent, HeartbeatSoundPlayBelowHealth, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatComponent, LastHeartbeat, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatComponent, UnknownData_C9Z3, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthStatComponent, 0x00F8);
		}

		// class UHelpCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__HelpCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHelpCommand, 0x0080);
		}

		// class UHolsterMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__HolsterMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHolsterMotion, Mode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHolsterMotion, UnknownData_R791, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHolsterMotion, 0x00A8);
		}

		// class AHorse : public AMordhauVehicle
		TEST_METHOD(Class__Mordhau__Horse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, RecentKnockbacks, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, BumpCapsule, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, TurdSpawnInterval, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, TurdSpawnChance, 0x0C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, LastTurdSpawnCheck, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, FastFootstepParticlesMinVelocity, 0x0C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, FastFootstepParticles, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, SoundTrot, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, SoundCanter, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, SoundGallop, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, BumpDamageBySpeedModifierCurve, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, AttackDamageBySpeedModifierCurve, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, DesiredGear, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, UncontrolledGear, 0x0CD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, KnockbackForce, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, KnockbackForceVelocityFactor, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, KnockbackDamage, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, UnknownData_8O8M, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, KnockbackSound, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, RiderRearingCurve, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, RearingDuration, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, ReplicatedRearing, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, UnknownData_WJUQ, 0x0CFD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, ReplicatedRearingTimeOut, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, LastRearingTime, 0x0D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, LastRearingRealTime, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, bIsRearing, 0x0D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, MinimumGearToCouch, 0x0D0D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHorse, UnknownData_GWK3, 0x0D0E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHorse, 0x0D10);
		}

		// class UHorseAnimInstance : public UCreatureAnimInstance
		TEST_METHOD(Class__Mordhau__HorseAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, BackLimits, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, FrontLimits, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, RootOffsetTranslationToRotationFactor, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, UnknownData_6GHN, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, BackOffset, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, LeftBackLegOffset, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, RightBackLegOffset, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, FrontOffset, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, LeftFrontLegOffset, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, RightFrontLegOffset, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, bIsRearing, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, UnknownData_1YR0, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, CurrentForwardPrediction, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, ForwardPredictionUpdateSpeed, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, ForwardPredictionMaxPredictTime, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, BounceDuckLimit, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, StopTiltFactorLeftRight, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, StopTiltFactorForward, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, StopTiltFactorBack, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, StopBounceLimit, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, BounceInterpSpeed, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HeadStopTiltFactorLeftRight, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HeadStopTiltFactorForward, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HeadStopTiltFactorBack, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HeadStopBounceLimit, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HeadBounceInterpSpeed, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, FastVelocityLagTime, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, SlowVelocityLagTime, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, StopBounce, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, StopBounceWorld, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HeadStopBounce, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HeadStopBounceWorld, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, BounceDuck, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, FastVelocity, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, SlowVelocity, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, FastVelocityChangeVelocity, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, SlowVelocityChangeVelocity, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, PreviousMeshRotation, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, FrontBackLegsDistance, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, FeetShuffleWeight, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, FeetShuffleAnimRate, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HorseVelocity, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, UnknownData_5MEG, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, AnimatedHorseVelocity, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, StopSmoothSpeed, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, MovementAnimRate, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HorseDirection, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, UnknownData_QIPO, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, LeanFactor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, SmoothedDirectionSmoothTime, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, SmoothedDirectionSmoothTimeNoMovement, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, FrontHorseRotator, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, BackHorseRotator, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HorseLeanRotator, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HorseLeanOffset, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HorseHeadRotator, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, HasDriverFloat, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseAnimInstance, UnknownData_BN97, 0x051C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorseAnimInstance, 0x0520);
		}

		// class UPseudoVehicleMovementComponent : public UAdvancedCharacterMovement
		TEST_METHOD(Class__Mordhau__PseudoVehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPseudoVehicleMovementComponent, SecondaryComponents, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPseudoVehicleMovementComponent, SecondaryStepCapableComponents, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPseudoVehicleMovementComponent, TurningVelocity, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPseudoVehicleMovementComponent, UnknownData_JEKG, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPseudoVehicleMovementComponent, TurningBrakeAccelerationByVelocity, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPseudoVehicleMovementComponent, TurningFactorByVelocity, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPseudoVehicleMovementComponent, TurningAccelerationByVelocity, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPseudoVehicleMovementComponent, TurningFactorScaleAirborne, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPseudoVehicleMovementComponent, UnknownData_TXKE, 0x079C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPseudoVehicleMovementComponent, 0x07A0);
		}

		// class UHorseMovementComponent : public UPseudoVehicleMovementComponent
		TEST_METHOD(Class__Mordhau__HorseMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, HeadOnCollisionMinSpeedToRear, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, SoftBubbleEllipseRelativeLocation, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, SoftBubbleEllipseLength, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, SoftBubbleEllipseRadius, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, SoftBubbleMaxHeight, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, FrontAndRearCapsuleHalfHeight, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, FrontAndRearCapsuleRadius, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, FrontCapsuleRelativeLocation, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, RearCapsuleRelativeLocation, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, AvoidanceTurningAcceleration, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, Gear, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, UnknownData_4958, 0x07E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, GearInfo, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, DesiredGear, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, UnknownData_YZTK, 0x07F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, SpeedMultiplierOnBump, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, SpeedMultiplierOnReceivedMeleeDamage, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorseMovementComponent, UnknownData_7HRK, 0x0804);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorseMovementComponent, 0x0810);
		}

		// class UHumanMeshComponent : public UCharacterMeshComponent
		TEST_METHOD(Class__Mordhau__HumanMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnknownData_FO98, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, FPMesh, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, FPDeadMesh, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnifiedMesh, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, SlaveSkeletalMeshComponents, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, ClothBlendWeightInterpSpeed, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, FOVLODDistanceScaleIn, 0x0C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, FOVLODDistanceScaleOut, 0x0C84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, bForceInstantMeshUpdate, 0x0C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnknownData_H62R, 0x0C8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnifiedMeshDistance, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, SeparatedMeshDistance, 0x0C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, LODIncreaseDistance, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, LODDecreaseDistance, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, CurrentForcedLOD, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, bMeshesAreInitialized, 0x0CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, bMaterialsAreInitialized, 0x0CBD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, bHasInvisibleBody, 0x0CBE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnknownData_1MQ2, 0x0CBF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, OverrideMeshConstructionParts, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, SingleSlotMode, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnknownData_6A3E, 0x0CD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, SingleSlotModeWearableToUse, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, BodySkeleton, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, ShadowPhysicsAsset, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, bHasScaryBody, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnknownData_NNIT, 0x0CF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HelmetAOOffset, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HelmetAOPower, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HelmetAOIntensity, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HelmetAOEyeIntensity, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnknownData_T2MQ, 0x0D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, LODMasterMaterial, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UberMergeHighMaterial, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UberMergeLowMaterial, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HelmetCoifMaterial, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, ChestShouldersMaterial, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, ArmsGlovesMaterial, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, LowerChestMaterial, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, LegsBootsMaterial, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HelmetCoifChestMaterial, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, LegsBootsChestLowMaterial, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, ArmsGlovesShouldersMaterial, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedPreviewPoses, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedUpperBlendSpace1P, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedUpperAdditive1P, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedUpperBlendSpace, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedUpperAdditive, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedLowerAnimation, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedJumpAnimation, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedLandAnimation, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedFallingAnimation, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedJumpAnimation1P, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedLandAnimation1P, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnarmedFallingAnimation1P, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HorseUnarmedUpperBlendSpace1P, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HorseUnarmedUpperAdditive1P, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HorseUnarmedUpperBlendSpace, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HorseUnarmedUpperAdditive, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HorseUnarmedRearing, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HorseUnarmedRearing1P, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HorseUnarmedJump, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, HorseUnarmedJump1P, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, InteractWithAnimation, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, InteractWith1PAnimation, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, bIgnoreAngularVelocityAnimation, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnknownData_MQZM, 0x0E19);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, RiposteBlendInCurve, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanMeshComponent, UnknownData_3ZAC, 0x0E28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHumanMeshComponent, 0x0E30);
		}

		// class UIdleMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__IdleMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIdleMotion, 0x00A0);
		}

		// class UInteractionComponent : public UBoxComponent
		TEST_METHOD(Class__Mordhau__InteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, VisualMeshComponents, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, bIsInteractable, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, bIsHighlighted, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionComponent, UnknownData_YM7V, 0x042A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionComponent, 0x0430);
		}

		// class UInteractionSystemComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__InteractionSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSystemComponent, UnknownData_TLUR, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSystemComponent, RequestedInteractionTarget, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSystemComponent, NumberOfSweeps, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSystemComponent, SweepSphereRadius, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSystemComponent, SweepRadius, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSystemComponent, bDrawAllSections, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSystemComponent, UnknownData_SDCX, 0x00CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionSystemComponent, 0x00E8);
		}

		// class UInteractWithMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__InteractWithMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractWithMotion, UnknownData_5P6T, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractWithMotion, AnimPauseAt1P, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractWithMotion, AnimPauseAt3P, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractWithMotion, PlayOut1PAnimRate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractWithMotion, PlayOut3PAnimRate, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractWithMotion, Montage, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractWithMotion, Interact1PMontage, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractWithMotion, Interact3PMontage, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractWithMotion, UnknownData_970N, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractWithMotion, 0x00D8);
		}

		// class UItemPattern : public UMordhauInventoryItem
		TEST_METHOD(Class__Mordhau__ItemPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemPattern, Texture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemPattern, bHasColor1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemPattern, bHasColor2, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemPattern, bHasColor3, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemPattern, UnknownData_BSW0, 0x0063);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemPattern, 0x0068);
		}

		// class UKickMotion : public UAttackMotion
		TEST_METHOD(Class__Mordhau__KickMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKickMotion, KickDamageModifierTier3Legs, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKickMotion, JumpKickStaminaDrain, 0x10F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKickMotion, JumpKickExtraWindup, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKickMotion, JumpKickAirMovementRestriction, 0x10FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKickMotion, UnknownData_GPXB, 0x10FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKickMotion, MaxAirborneTimeForJumpKickAnim, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKickMotion, bIsAirKick, 0x1104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKickMotion, UnknownData_LOF6, 0x1105);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKickMotion, 0x1108);
		}

		// class AKickWeapon : public AVirtualWeapon
		TEST_METHOD(Class__Mordhau__KickWeapon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKickWeapon, 0x1C20);
		}

		// class UKillCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__KillCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillCommand, 0x0080);
		}

		// class ULateTickComponent : public UActorComponent
		TEST_METHOD(Class__Mordhau__LateTickComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULateTickComponent, LODDeltaTime, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULateTickComponent, UnknownData_9XPB, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULateTickComponent, 0x00B8);
		}

		// class ULeaveVehicleMotion : public UMordhauMotion
		TEST_METHOD(Class__Mordhau__LeaveVehicleMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaveVehicleMotion, 0x00A0);
		}

		// class ULegsWearable : public UMordhauWearable
		TEST_METHOD(Class__Mordhau__LegsWearable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegsWearable, DefaultFeet, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegsWearable, UnknownData_QWAI, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegsWearable, FeetWearables, 0x01A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegsWearable, 0x01B8);
		}

		// class ALODStaticMeshActor : public AActor
		TEST_METHOD(Class__Mordhau__LODStaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODStaticMeshActor, StaticMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODStaticMeshActor, 0x0228);
		}

		// class ULODStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Mordhau__LODStaticMeshComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODStaticMeshComponent, 0x0480);
		}

		// class ULogCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__LogCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogCommand, UnknownData_OBRN, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogCommand, 0x00D0);
		}

		// class UManageAdminCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__ManageAdminCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManageAdminCommand, 0x0080);
		}

		// class UManageMatchCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__ManageMatchCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManageMatchCommand, 0x0080);
		}

		// class AMapCameraActor : public ACameraActor
		TEST_METHOD(Class__Mordhau__MapCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapCameraActor, Team, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapCameraActor, AtmosphericFogMultiplierOverride, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapCameraActor, UnknownData_3QDZ, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMapCameraActor, 0x07A0);
		}

		// class UMapListCommand : public URconCommand
		TEST_METHOD(Class__Mordhau__MapListCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapListCommand, 0x0080);
		}

		// class UMapMetadataBase : public UObject
		TEST_METHOD(Class__Mordhau__MapMetadataBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMetadataBase, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMetadataBase, Maps, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMetadataBase, Thumbnail, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMetadataBase, BackgroundImages, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMetadataBase, ForegroundImages, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMetadataBase, Tips, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMetadataBase, 0x0098);
		}

		// class UMapMetadataOverride : public UMapMetadataBase
		TEST_METHOD(Class__Mordhau__MapMetadataOverride)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMetadataOverride, 0x0098);
		}

		// class UMapMetadata : public UMapMetadataBase
		TEST_METHOD(Class__Mordhau__MapMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMetadata, Overrides, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMetadata, 0x00A8);
		}

		// class AMasterField : public AActor
		TEST_METHOD(Class__Mordhau__MasterField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, UnknownData_JYDF, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, CreatedTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, DeactivatedTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, DeactivationStartedTime, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, bAreSubfieldsHidden, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, bIsFieldActive, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, bHasBegunDeactivation, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, UnknownData_ZGPD, 0x028B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, SubFieldSpawns, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, SubFields, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, CombinedBoundsBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, FieldLifeTime, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, FieldDeactivationTime, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, FieldFadeOutTime, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, CollisionFilter, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMasterField, ActorPresenceTickCount, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMasterField, 0x0338);
		}

		// class UCreateMatchmakingTicket : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__CreateMatchmakingTicket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateMatchmakingTicket, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateMatchmakingTicket, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateMatchmakingTicket, UnknownData_XTFE, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateMatchmakingTicket, QueueName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateMatchmakingTicket, Attributes, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateMatchmakingTicket, Members, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateMatchmakingTicket, Timeout, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateMatchmakingTicket, UnknownData_8FYH, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateMatchmakingTicket, 0x00E0);
		}

		// class UJoinMatchmakingTicket : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__JoinMatchmakingTicket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMatchmakingTicket, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMatchmakingTicket, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMatchmakingTicket, UnknownData_8JH4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMatchmakingTicket, QueueName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMatchmakingTicket, TicketId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMatchmakingTicket, Attributes, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinMatchmakingTicket, 0x00D8);
		}

		// class UCancelMatchmakingTicket : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__CancelMatchmakingTicket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelMatchmakingTicket, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelMatchmakingTicket, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelMatchmakingTicket, UnknownData_UKLJ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelMatchmakingTicket, QueueName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCancelMatchmakingTicket, 0x0068);
		}

		// class UGetMatchmakingTicket : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__GetMatchmakingTicket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingTicket, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingTicket, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingTicket, UnknownData_N021, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingTicket, QueueName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingTicket, TicketId, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetMatchmakingTicket, 0x0078);
		}

		// class UGetMatchmakingMatch : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__GetMatchmakingMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingMatch, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingMatch, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingMatch, UnknownData_S6VM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingMatch, QueueName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMatchmakingMatch, MatchId, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetMatchmakingMatch, 0x0078);
		}

		// class UGetGameServers : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__GetGameServers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServers, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServers, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServers, UnknownData_DE1Y, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServers, Filter, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetGameServers, 0x00A0);
		}

		// class UGetGameServer : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__GetGameServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServer, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServer, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServer, UnknownData_1GMN, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServer, ServerId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServer, IPV4Address, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServer, Port, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServer, UnknownData_A109, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetGameServer, 0x0080);
		}

		// class UReserveServerSlots : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__ReserveServerSlots)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveServerSlots, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveServerSlots, OnFull, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveServerSlots, onFailure, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveServerSlots, UnknownData_O1CH, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveServerSlots, ConnectString, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveServerSlots, BeaconClient, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveServerSlots, World, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveServerSlots, ServerDetails, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReserveServerSlots, Players, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReserveServerSlots, 0x00C0);
		}

		// class UJoinMatchmakingMatch : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__JoinMatchmakingMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMatchmakingMatch, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMatchmakingMatch, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMatchmakingMatch, UnknownData_5776, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinMatchmakingMatch, Match, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinMatchmakingMatch, 0x0100);
		}

		// class ULeaveMatchmakingMatch : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__LeaveMatchmakingMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaveMatchmakingMatch, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaveMatchmakingMatch, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaveMatchmakingMatch, UnknownData_B0K2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaveMatchmakingMatch, Match, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaveMatchmakingMatch, 0x0100);
		}

		// class UUpdateMatchmakingMatch : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mordhau__UpdateMatchmakingMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMatchmakingMatch, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMatchmakingMatch, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMatchmakingMatch, UnknownData_7DOW, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMatchmakingMatch, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMatchmakingMatch, Match, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMatchmakingMatch, GroupID, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMatchmakingMatch, GroupName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMatchmakingMatch, Group, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateMatchmakingMatch, 0x0190);
		}

		// class UMordhauColor : public UMordhauInventoryItem
		TEST_METHOD(Class__Mordhau__MordhauColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauColor, Color, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauColor, DisplayColor, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauColor, 0x0078);
		}

		// class UMordhauCrowdFollowingComponent : public UCrowdFollowingComponent
		TEST_METHOD(Class__Mordhau__MordhauCrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCrowdFollowingComponent, PheromoneDepositAmount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCrowdFollowingComponent, PheromoneDepositInterval, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauCrowdFollowingComponent, UnknownData_X7QN, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauCrowdFollowingComponent, 0x02A8);
		}

		// class UMordhauCustomizationTypes : public UObject
		TEST_METHOD(Class__Mordhau__MordhauCustomizationTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauCustomizationTypes, 0x0028);
		}

		// class UMordhauDialog : public UUserWidget
		TEST_METHOD(Class__Mordhau__MordhauDialog)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauDialog, 0x0230);
		}

		// class UMordhauEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Mordhau__MordhauEngineMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauEngineMessage, 0x0028);
		}

		// class AMordhauEQSTestingPawn : public AEQSTestingPawn
		TEST_METHOD(Class__Mordhau__MordhauEQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEQSTestingPawn, Team, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauEQSTestingPawn, UnknownData_PLYG, 0x0551);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauEQSTestingPawn, 0x0560);
		}

		// class UMordhauEquipmentPart : public UMordhauInventoryItem
		TEST_METHOD(Class__Mordhau__MordhauEquipmentPart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauEquipmentPart, SkeletalMesh, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauEquipmentPart, AuxiliarySkeletalMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauEquipmentPart, TrailFactor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauEquipmentPart, SecondTrailFactor, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauEquipmentPart, bHasColor1, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauEquipmentPart, bHasColor2, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauEquipmentPart, bHasColor3, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauEquipmentPart, UnknownData_WK86, 0x0073);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauEquipmentPart, 0x0078);
		}

		// class UMordhauGameInstance : public UGameInstance
		TEST_METHOD(Class__Mordhau__MordhauGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, UnknownData_T2MX, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, ServerSession, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, ServerInfo, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, ServerDetails, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, ServerPassword, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, bServerFull, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, UnknownData_JY87, 0x08C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, ChangeLevelCounter, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, NetworkErrorText, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, UnknownData_VWA1, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, GameModeMetadata, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, MapMetadata, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, Tips, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, OnPartyUpdated, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, CurrentMatchmakingRegion, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, UnknownData_4QVQ, 0x0A49);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, CurrentMatchmakingGameModes, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, OnMatchmakingRegionsDetermined, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, UnknownData_DZHS, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, StartupMap, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, CasualMatchmakingRegions, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, RankedMatchmakingRegions, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMordhauGameInstance, OnPlayerInformationReceived, 0x0B70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMordhauGameInstance, 0x0B80);
		}

		// class AMordhauGameMode : public AGameMode
		TEST_METHOD(Class__Mordhau__MordhauGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, MapPrefixes, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, MapRotation, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, MapGameModeOverrides, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, MOTDURL, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bIsThirdPersonCameraDisabled, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, UnknownData_M7VM, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, ConstrainAspectRatio, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bIsHitStopOnTeamHitsDisabled, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bDisableClientMods, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, UnknownData_VYLS, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, SpawnServerActorsOnMapLoad, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bLogKillfeed, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bLogChat, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bLogScore, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bAllowSpawningServerActorsOnMapLoad, 0x03AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bAllowAdminChat, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bAllowWhisperChat, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, UnknownData_AXCB, 0x03AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, SpawnQueue, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, CurrentlySpawningController, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, CurrentlySpawningPlayerStart, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, CurrentlySpawningStage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bMatchTimeRanOut, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, UnknownData_8SQC, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, PlayerRespawnTime, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bUsesSlowPlayerSpawning, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, UnknownData_CSJ2, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, AutoKickOnTeamKillAmount, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bPlayersSpawnInWaves, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bPlayersDropAllGearOnDeath, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bEquipmentDoesNotDespawn, 0x03E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, UnknownData_397U, 0x03E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, OverrideEquipmentDespawnTime, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, BallistaRespawnTime, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, CatapultRespawnTime, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, HorseRespawnTime, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, MapVoteMaps, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, OfficialServerVisibility, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, UnknownData_N46O, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, DamageFactor, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, TeamDamageFactor, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, TeamDamageFlinch, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, SpawnProtectionDuration, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bDisableDamage, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bDisableStamina, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bIsScoringDisabled, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, UnknownData_7EC9, 0x041F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, AssistScoreFactor, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, AssistDamageToCountAsKill, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, UnknownData_ILUV, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, KillScoreChange, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, KillTeamScoreChange, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, TeamKillScoreChange, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, TeamKillTeamScoreChange, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bTeamKillsDecrementKillerKills, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bTeamKillsIncrementKilledDeaths, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, bSuicideDecrementsKills, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, UnknownData_5KIN, 0x043B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, ChatMessages, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, MessageTypeMap, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, PlayerMessagesMap, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, OnRconStringCommand, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, RconEvents, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, OnMessageBroadcasted, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, OnAfterLogin, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, OnBeforeLogout, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, ChatCommands, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameMode, UnknownData_11EF, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauGameMode, 0x05A0);
		}

		// class AMordhauGameSession : public AGameSession
		TEST_METHOD(Class__Mordhau__MordhauGameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, UnknownData_ZILO, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, MaxSlots, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, ServerName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, UnknownData_284U, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, ServerPassword, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, Mods, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, AdminPassword, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, RconPassword, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, RconTimeout, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, RconPort, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, bRconTieredAdmins, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, bAllowHttpRequests, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, UnknownData_GP77, 0x061A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, MaxNetSkip, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, FriendlyNetSkipOffset, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, UnknownData_JU8T, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, Admins, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, BannedPlayers, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, UnknownData_T06P, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, MutedPlayers, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, UnknownData_5A4G, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, LegacyAdmins, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, LegacyBannedPlayers, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, LegacyMutedPlayers, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, bAdvertiseServerViaSteam, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, bUseLegacyPakMounting, 0x08C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, bUseOfficialBanList, 0x08CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, bUseOfficialMuteList, 0x08CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, UnknownData_W4L6, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, OnRequestBan, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, OnRequestUnban, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, OnRequestMute, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, OnRequestUnmute, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, OnRequestKick, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, OnMatchStateChanged, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, bAllowJsonForRconClients, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, UnknownData_J5DH, 0x0931);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, MaxRconPacketSize, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, bUseAdminTierSystem, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, UnknownData_FPXD, 0x0939);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, AdminActionWebhookURL, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, AdminActionChatColor, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, AdminPunishmentWebhookURL, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, AdminPunishmentColor, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, AdminChatCommandWebhookURL, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, AdminChatCommandColor, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, ServerLagReportsWebhookURL, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, ServerLagReportColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, ServerLagReportColor2, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, ChatFeedWebhookURL, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, ChatFeedColor, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, RconCommands, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, RconFlags, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMordhauGameSession, UnknownData_VUOP, 0x0A50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMordhauGameSession, 0x0B50);
		}

		// class ABP_Knife_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Knife__BP_Knife_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Knife_C, 0x1C28);
		}

		// class UBP_RockPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RockPart__BP_RockPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RockPart_C, 0x0078);
		}

		// class ABP_LongbowArrowFire_C : public ABP_LongbowArrow_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LongbowArrowFire__BP_LongbowArrowFire_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LongbowArrowFire_C, 0x07C4);
		}

		// class UClothConfigCommon : public UClothConfigBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigCommon, 0x0028);
		}

		// class UClothSharedConfigCommon : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothSharedConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedConfigCommon, 0x0028);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// class UClothingAssetCommon : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfigs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSharedSimConfig, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSimConfig, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ChaosClothSimConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothLODData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LODData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LodMap, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneIndices, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ReferenceBoneIndex, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_X47D, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, customData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfig, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_JZH5, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCommon, 0x01F0);
		}

		// class UClothLODDataCommon_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothLODDataCommon_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, PhysicalMeshData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, ClothPhysicalMeshData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, CollisionData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, UnknownData_NUIA, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothLODDataCommon_Legacy, 0x0188);
		}

		// class ABP_ThrownSpinningProjectileCleaver_C : public ABP_ThrownWeaponProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownSpinningProjectileCleaver__BP_ThrownSpinningProjectileCleaver_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownSpinningProjectileCleaver_C, 0x07D0);
		}

		// class UBP_CorsescaWingedBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CorsescaWingedBlade__BP_CorsescaWingedBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CorsescaWingedBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CorsescaWingedBlade_C, 0x0080);
		}

		// class UBP_Polehammer_Spike3_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Spike3__BP_Polehammer_Spike3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Spike3_C, 0x0078);
		}

		// class UBP_Polehammer_Spike2_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Spike2__BP_Polehammer_Spike2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Spike2_C, 0x0078);
		}

		// class UBP_Polehammer_Shaft5_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Shaft5__BP_Polehammer_Shaft5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Shaft5_C, 0x0078);
		}

		// class UBP_Cloth37_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth37__BP_Cloth37_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth37_C, 0x0078);
		}

		// class UBP_Cloth24_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth24__BP_Cloth24_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth24_C, 0x0078);
		}

		// class UBP_Cloth12_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth12__BP_Cloth12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth12_C, 0x0078);
		}

		// class UBP_HairColor17_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor17__BP_HairColor17_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor17_C, 0x0078);
		}

		// class UBP_HairColor16_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor16__BP_HairColor16_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor16_C, 0x0078);
		}

		// class UBP_FurColor11_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor11__BP_FurColor11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor11_C, 0x0078);
		}

		// class UBP_FurColor10_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor10__BP_FurColor10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor10_C, 0x0078);
		}

		// class UBP_Cloth49_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth49__BP_Cloth49_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth49_C, 0x0078);
		}

		// class UBP_Cloth42_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth42__BP_Cloth42_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth42_C, 0x0078);
		}

		// class UBP_Surfing_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Surfing__BP_Surfing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Surfing_C, 0x0130);
		}

		// class UBP_Squat_V2_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Squat_V2__BP_Squat_V2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Squat_V2_C, 0x0130);
		}

		// class UBP_Point_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Point__BP_Point_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Point_C, 0x0130);
		}

		// class UBP_Facepalm_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Facepalm__BP_Facepalm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Facepalm_C, 0x0130);
		}

		// class UBP_RangedDrawMotion_C : public URangedDrawMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_RangedDrawMotion__BP_RangedDrawMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RangedDrawMotion_C, 0x0150);
		}

		// class UBP_InteractWithMotion_C : public UInteractWithMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_InteractWithMotion__BP_InteractWithMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InteractWithMotion_C, 0x00D8);
		}

		// class UBP_StrikeMotion_C : public UStrikeMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_StrikeMotion__BP_StrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StrikeMotion_C, 0x1160);
		}

		// class UBP_SoclalMediaButtonEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SoclalMediaButtonEntry__BP_SoclalMediaButtonEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SoclalMediaButtonEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SoclalMediaButtonEntry_C, HoverAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SoclalMediaButtonEntry_C, Image_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SoclalMediaButtonEntry_C, TextBlock_3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SoclalMediaButtonEntry_C, TextOfficialWebs, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SoclalMediaButtonEntry_C, WebsiteButton, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SoclalMediaButtonEntry_C, Icon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SoclalMediaButtonEntry_C, Site_to_open, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SoclalMediaButtonEntry_C, Title, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SoclalMediaButtonEntry_C, Website_Text, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SoclalMediaButtonEntry_C, 0x0328);
		}

		// class UBP_LeatherPads_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherPads__BP_LeatherPads_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherPads_C, 0x01A0);
		}

		// class UBP_ChainPadLeft_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainPadLeft__BP_ChainPadLeft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainPadLeft_C, 0x01A0);
		}

		// class UBP_VeteransPauldronsTrimPartial_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransPauldronsTrimPartial__BP_VeteransPauldronsTrimPartial_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransPauldronsTrimPartial_C, 0x01A0);
		}

		// class ABP_DestroyableDeploySpikeWall_C : public ABP_DestroyableActor_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DestroyableDeploySpikeWall__BP_DestroyableDeploySpikeWall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableDeploySpikeWall_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableDeploySpikeWall_C, Box, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableDeploySpikeWall_C, ImpalePoint, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableDeploySpikeWall_C, PhysicsHandle, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableDeploySpikeWall_C, MinVelocityToTrigger, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableDeploySpikeWall_C, MinHealthToActivate, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableDeploySpikeWall_C, UnknownData_3MDO, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableDeploySpikeWall_C, ImpalementSound, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableDeploySpikeWall_C, VelocityDamageFactor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableDeploySpikeWall_C, HorseDamageFactor, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DestroyableDeploySpikeWall_C, PlanterController, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DestroyableDeploySpikeWall_C, 0x04A0);
		}

		// class UBOT_TemplarGS_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_TemplarGS__BOT_TemplarGS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_TemplarGS_C, 0x0108);
		}

		// class UBP_BrawlGameModeMetadata_C : public UGameModeMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_BrawlGameModeMetadata__BP_BrawlGameModeMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BrawlGameModeMetadata_C, 0x00D0);
		}

		// class UBP_MenuContentWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MenuContentWidget__BP_MenuContentWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuContentWidget_C, LastDialogPopup, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MenuContentWidget_C, 0x0238);
		}

		// class UAB_Catapult_C : public UWheeledVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Catapult__AB_Catapult_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, UberGraphFrame, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_Root, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_ModifyBone_6, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_ModifyBone_5, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_ModifyBone_4, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_ModifyBone_3, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_ApplyAdditive, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_TransitionResult_4, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_TransitionResult_3, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_TransitionResult_2, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_TransitionResult, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_IdentityPose_2, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_StateResult_3, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_SequencePlayer, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_StateResult_2, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_ComponentToLocalSpace, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_LocalToComponentSpace, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_ModifyBone_2, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_IdentityPose, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_StateResult, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_StateMachine, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_MeshRefPose, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_ModifyBone, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, AnimGraphNode_RotateAroundPivot, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, State, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, UnknownData_8GS7, 0x0E61);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, Wheels, 0x0E64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Catapult_C, Arm, 0x0E68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Catapult_C, 0x0E6C);
		}

		// class UBOTBEHAVIOR_Worthless_C : public UBP_BotBehaviorProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOTBEHAVIOR_Worthless__BOTBEHAVIOR_Worthless_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOTBEHAVIOR_Worthless_C, 0x00E0);
		}

		// class UBP_JackChains_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JackChains__BP_JackChains_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JackChains_C, 0x01B8);
		}

		// class UBP_BearPelt_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BearPelt__BP_BearPelt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BearPelt_C, 0x01A0);
		}

		// class UBP_WolfChainPelt_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WolfChainPelt__BP_WolfChainPelt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WolfChainPelt_C, 0x01A0);
		}

		// class UBP_Gothic_Gloves_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Gothic_Gloves__BP_Gothic_Gloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gothic_Gloves_C, 0x01A0);
		}

		// class UBP_Leather_Gloves_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Leather_Gloves__BP_Leather_Gloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Leather_Gloves_C, 0x01A0);
		}

		// class UBP_Leather_Gloves2_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Leather_Gloves2__BP_Leather_Gloves2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Leather_Gloves2_C, 0x01A0);
		}

		// class UBP_Hussar_Open_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Hussar_Open__BP_Hussar_Open_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Hussar_Open_C, 0x01C8);
		}

		// class UBP_GallowglassHelm_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GallowglassHelm__BP_GallowglassHelm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GallowglassHelm_C, 0x01C8);
		}

		// class UBP_ReinforcedGreathelm_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ReinforcedGreathelm__BP_ReinforcedGreathelm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ReinforcedGreathelm_C, 0x01C8);
		}

		// class UBP_ReusableNavTabButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ReusableNavTabButton__BP_ReusableNavTabButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, Button, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, ButtonLabel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, SizeBox_7, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, LabelText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, LabelSelectedColor, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, LabelDeselectedColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, SelectedButtonStyle, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, DeselectedButtonStyle, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, isSelected, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, UnknownData_S8QA, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, ButtonSelected, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, ButtonSize, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, ButtonDeselected, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ReusableNavTabButton_C, hasBeenVisited, 0x07A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ReusableNavTabButton_C, 0x07A9);
		}

		// class UBP_ItalianArmet_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ItalianArmet__BP_ItalianArmet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItalianArmet_C, 0x01C8);
		}

		// class UBP_ItalianArmetWrapper_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ItalianArmetWrapper__BP_ItalianArmetWrapper_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItalianArmetWrapper_C, 0x01C8);
		}

		// class UBP_BarbutePainted_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BarbutePainted__BP_BarbutePainted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BarbutePainted_C, 0x01C8);
		}

		// class UBP_RaisedBarbutePainted_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RaisedBarbutePainted__BP_RaisedBarbutePainted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RaisedBarbutePainted_C, 0x01C8);
		}

		// class UBP_SpawnInfo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SpawnInfo__BP_SpawnInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SpawnInfo_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SpawnInfo_C, BP_ButtonPrompt_Primary, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SpawnInfo_C, Image_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SpawnInfo_C, Image_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SpawnInfo_C, LoadoutText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SpawnInfo_C, Overlay_6, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SpawnInfo_C, SpawnInfoText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SpawnInfo_C, VerticalBox_3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SpawnInfo_C, SelectedMercName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SpawnInfo_C, SpawnTimerText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SpawnInfo_C, Spawn_Timer, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SpawnInfo_C, 0x02A4);
		}

		// class UBP_Tier3HeadWearable_C : public UBP_HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier3HeadWearable__BP_Tier3HeadWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier3HeadWearable_C, 0x01C8);
		}

		// class UBP_Bascinet_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bascinet__BP_Bascinet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bascinet_C, 0x01C8);
		}

		// class UBP_AventailSpiked_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AventailSpiked__BP_AventailSpiked_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AventailSpiked_C, 0x01A0);
		}

		// class UBP_AventailSpikedLowered_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AventailSpikedLowered__BP_AventailSpikedLowered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AventailSpikedLowered_C, 0x01A0);
		}

		// class UBP_AventailLowered_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AventailLowered__BP_AventailLowered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AventailLowered_C, 0x01A0);
		}

		// class UBP_HoodCoifWide_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HoodCoifWide__BP_HoodCoifWide_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HoodCoifWide_C, 0x01A0);
		}

		// class UBP_Rapier_RobustHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rapier_RobustHandle__BP_Rapier_RobustHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rapier_RobustHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rapier_RobustHandle_C, 0x0080);
		}

		// class UBP_Rapier_TenaciousHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rapier_TenaciousHandle__BP_Rapier_TenaciousHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rapier_TenaciousHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rapier_TenaciousHandle_C, 0x0080);
		}

		// class ABP_Rapier_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rapier__BP_Rapier_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Rapier_C, 0x1C28);
		}

		// class UBP_falchion_SinuousGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_falchion_SinuousGuard__BP_falchion_SinuousGuard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_falchion_SinuousGuard_C, 0x0078);
		}

		// class UBP_Axe_WrappedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Axe_WrappedHandle__BP_Axe_WrappedHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Axe_WrappedHandle_C, 0x0078);
		}

		// class UBP_PostMatchScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PostMatchScreen__BP_PostMatchScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PostMatchScreen_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PostMatchScreen_C, MapCount, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PostMatchScreen_C, CurrentGold, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PostMatchScreen_C, CurrentXP, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PostMatchScreen_C, EarnedGold, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PostMatchScreen_C, EarnedXP, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PostMatchScreen_C, UnknownData_TZ60, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PostMatchScreen_C, Tab_Buttons, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PostMatchScreen_C, isShowing, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PostMatchScreen_C, UnknownData_OAOB, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PostMatchScreen_C, EndScreenWidget, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PostMatchScreen_C, 0x0270);
		}

		// class UBP_ChoiceMenu_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ChoiceMenu__BP_ChoiceMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, Background, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, Border_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, ChoiceList, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, Container, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, Page, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, TextBlock_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, Choices, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, ChoicesPerPage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, UnknownData_XPCR, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, Entries, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, CurrentPage, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, UnknownData_CURL, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, MenuTitle, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenu_C, PageText, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChoiceMenu_C, 0x02C8);
		}

		// class UBP_EmoteMenu_C : public UBP_ChoiceMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EmoteMenu__BP_EmoteMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Emotes, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EmoteMenu_C, 0x02E0);
		}

		// class UBP_Greatsword_TigerClawGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_TigerClawGuard__BP_Greatsword_TigerClawGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Greatsword_TigerClawGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_TigerClawGuard_C, 0x0080);
		}

		// class ABP_Warhammer_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer__BP_Warhammer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Warhammer_C, 0x1C28);
		}

		// class UBP_Warhammer_Bohemian_HeadofSacrifice_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_Bohemian_HeadofSacrifice__BP_Warhammer_Bohemian_HeadofSacrifice_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_Bohemian_HeadofSacrifice_C, 0x0078);
		}

		// class UBP_Warhammer_Bohemian_PragmaticHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_Bohemian_PragmaticHandle__BP_Warhammer_Bohemian_PragmaticHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_Bohemian_PragmaticHandle_C, 0x0078);
		}

		// class ABP_TwoHandedSword_C : public ABP_MordhauWeapon_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TwoHandedSword__BP_TwoHandedSword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TwoHandedSword_C, 0x1C28);
		}

		// class UBP_BastardSword_BowGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword_BowGuard__BP_BastardSword_BowGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BastardSword_BowGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BastardSword_BowGuard_C, 0x0080);
		}

		// class UBP_BastardSword_SwiftBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword_SwiftBlade__BP_BastardSword_SwiftBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BastardSword_SwiftBlade_C, 0x0078);
		}

		// class UBP_KettleHelmet_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KettleHelmet__BP_KettleHelmet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KettleHelmet_C, 0x01C8);
		}

		// class UBP_SultanCuirass_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SultanCuirass__BP_SultanCuirass_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SultanCuirass_C, 0x01E8);
		}

		// class UARSessionConfig : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateMeshDataFromTrackedGeometry, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateCollisionForMeshData, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateNavMeshForMeshData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseMeshDataForOcclusion, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bRenderMeshDataInWireframe, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bTrackSceneObjects, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUsePersonSegmentationForOcclusion, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldAlignment, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SessionType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneDetectionMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bHorizontalPlaneDetection, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bVerticalPlaneDetection, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutoFocus, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, LightEstimationMode, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FrameSyncMode, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraOverlay, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraTracking, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetCameraTracking, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetTrackedObjects, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_9E2F, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateImages, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumSimultaneousImagesTracked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentCaptureProbeType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_OC6S, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldMapData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DesiredVideoFormat, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingDirection, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingUpdate, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_NQ0E, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SerializedARCandidateImageDatabase, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnabledSessionTrackingFeature, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_DZ3K, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSessionConfig, 0x00A8);
		}

		// class UARLightEstimate : public UObject
		TEST_METHOD(Class__AugmentedReality__ARLightEstimate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLightEstimate, 0x0028);
		}

		// class UARBasicLightEstimate : public UARLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARBasicLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientIntensityLumens, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColorTemperatureKelvin, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBasicLightEstimate, 0x0040);
		}

		// class UARCandidateImage : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, CandidateTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, FriendlyName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Width, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Height, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Orientation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, UnknownData_MESQ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateImage, 0x0058);
		}

		// class UARBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintLibrary, 0x0028);
		}

		// class UARTraceResultLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARTraceResultLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultLibrary, 0x0028);
		}

		// class UARBaseAsyncTaskBlueprintProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AugmentedReality__ARBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBaseAsyncTaskBlueprintProxy, UnknownData_3CVJ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBaseAsyncTaskBlueprintProxy, 0x0050);
		}

		// class UARSaveWorldAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARSaveWorldAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, UnknownData_6CXH, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSaveWorldAsyncTaskBlueprintProxy, 0x0080);
		}

		// class UARGetCandidateObjectAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARGetCandidateObjectAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, UnknownData_6UDL, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, 0x0098);
		}

		// class AAROriginActor : public AActor
		TEST_METHOD(Class__AugmentedReality__AROriginActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAROriginActor, 0x0220);
		}

		// class UARPin : public UObject
		TEST_METHOD(Class__AugmentedReality__ARPin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackedGeometry, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, PinnedComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_F4VZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_7Q0B, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTrackingStateChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTransformUpdated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_WI59, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPin, 0x00F0);
		}

		// class AARSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, BufferSizePerChunk, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, UnknownData_RPKJ, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameMode, 0x0370);
		}

		// class AARSharedWorldGameState : public AGameState
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesTotal, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesTotal, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesDelivered, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesDelivered, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, UnknownData_TXZ5, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameState, 0x02C8);
		}

		// class AARSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldPlayerController, UnknownData_9A4H, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldPlayerController, 0x0578);
		}

		// class AARSkyLight : public ASkyLight
		TEST_METHOD(Class__AugmentedReality__ARSkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, CaptureProbe, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, UnknownData_5FN1, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSkyLight, 0x0240);
		}

		// class UARTexture : public UTexture
		TEST_METHOD(Class__AugmentedReality__ARTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, TextureType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, UnknownData_T3AX, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Timestamp, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, ExternalTextureGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Size, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTexture, 0x00D8);
		}

		// class UARTextureCameraImage : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraImage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraImage, 0x00D8);
		}

		// class UARTextureCameraDepth : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthAccuracy, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, bIsTemporallySmoothed, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, UnknownData_2I9V, 0x00DB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraDepth, 0x00E0);
		}

		// class UAREnvironmentCaptureProbeTexture : public UTextureCube
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, TextureType, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, UnknownData_LU46, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Timestamp, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, ExternalTextureGuid, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Size, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbeTexture, 0x0130);
		}

		// class UARTraceResultDummy : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTraceResultDummy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultDummy, 0x0028);
		}

		// class UARTrackedGeometry : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTrackedGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UniqueId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_OY4V, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_DZIR, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnderlyingMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, ObjectClassification, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_MOTA, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LastUpdateFrameNumber, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_PZ9O, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, DebugName, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedGeometry, 0x00E8);
		}

		// class UARPlaneGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARPlaneGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_ZBB3, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Center, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Extent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_R4XY, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, SubsumedBy, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneGeometry, 0x0120);
		}

		// class UARTrackedPoint : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPoint, UnknownData_YENP, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPoint, 0x00F0);
		}

		// class UARTrackedImage : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, DetectedImage, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, EstimatedSize, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedImage, 0x00F8);
		}

		// class UARTrackedQRCode : public UARTrackedImage
		TEST_METHOD(Class__AugmentedReality__ARTrackedQRCode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, QRCode, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, Version, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, UnknownData_Y5MY, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedQRCode, 0x0110);
		}

		// class UARFaceGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARFaceGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LookAtTarget, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, bIsTracked, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_JU8C, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, BlendShapes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_1HP3, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceGeometry, 0x01E0);
		}

		// class UAREnvironmentCaptureProbe : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_P9Q7, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_W3PO, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, EnvironmentCaptureTexture, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbe, 0x0100);
		}

		// class UARTrackedObject : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, DetectedObject, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedObject, 0x00F0);
		}

		// class UARTrackedPose : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_CTM8, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_6RFS, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPose, 0x0140);
		}

		// class UARTrackableNotifyComponent : public UActorComponent
		TEST_METHOD(Class__AugmentedReality__ARTrackableNotifyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedGeometry, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedGeometry, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedGeometry, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPlane, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPlane, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPlane, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPoint, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPoint, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPoint, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedImage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedImage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedImage, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedFace, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedFace, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedFace, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedEnvProbe, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedEnvProbe, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedEnvProbe, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedObject, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedObject, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedObject, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackableNotifyComponent, 0x0200);
		}

		// class UARTypesDummyClass : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTypesDummyClass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTypesDummyClass, 0x0028);
		}

		// class UARCandidateObject : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, CandidateObjectData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, FriendlyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, BoundingBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, UnknownData_N87K, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateObject, 0x0070);
		}

		// class UBP_maulBohemian_SentryNail_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maulBohemian_SentryNail__BP_maulBohemian_SentryNail_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maulBohemian_SentryNail_C, 0x0078);
		}

		// class UBP_StickCandyCane_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_StickCandyCane__BP_StickCandyCane_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StickCandyCane_C, 0x0078);
		}

		// class UBP_LutePart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LutePart__BP_LutePart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LutePart_C, 0x0078);
		}

		// class UBP_HeavyHandaxe_PiercerSpike_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeavyHandaxe_PiercerSpike__BP_HeavyHandaxe_PiercerSpike_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeavyHandaxe_PiercerSpike_C, 0x0078);
		}

		// class UBP_HeavyHandaxe_CourtHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeavyHandaxe_CourtHandle__BP_HeavyHandaxe_CourtHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeavyHandaxe_CourtHandle_C, 0x0078);
		}

		// class ABP_ThrownMaceProjectile_Club_C : public ABP_ThrownSpinningProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownMaceProjectile_Club__BP_ThrownMaceProjectile_Club_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownMaceProjectile_Club_C, 0x07D0);
		}

		// class ABP_BucklerShield_C : public ABP_MordhauShield_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BucklerShield__BP_BucklerShield_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BucklerShield_C, 0x1C48);
		}

		// class ABP_FryingPan_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FryingPan__BP_FryingPan_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FryingPan_C, 0x1C28);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// class UMagicLeapAudioFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAudio__MagicLeapAudioFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapAudioFunctionLibrary, 0x0028);
		}

		// class UAndroidPermissionCallbackProxy : public UObject
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_DMN3, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0048);
		}

		// class UAndroidPermissionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0028);
		}

		// class UBP_Jormungandr_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Jormungandr__BP_Jormungandr_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Jormungandr_C, 0x0060);
		}

		// class UBP_Clover01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Clover01__BP_Clover01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Clover01_C, 0x0060);
		}

		// class UBP_Bear01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Bear01__BP_Bear01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bear01_C, 0x0060);
		}

		// class UBP_WoodColor5_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor5__BP_WoodColor5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor5_C, 0x0078);
		}

		// class UBP_WoodColor4_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor4__BP_WoodColor4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor4_C, 0x0078);
		}

		// class UBP_SkinColor1_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_SkinColor1__BP_SkinColor1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SkinColor1_C, 0x0078);
		}

		// class UBP_PlateColor4_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor4__BP_PlateColor4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor4_C, 0x0078);
		}

		// class UBP_PlateColor14_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor14__BP_PlateColor14_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor14_C, 0x0078);
		}

		// class UBOT_Bastard_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Bastard__BOT_Bastard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Bastard_C, 0x0108);
		}

		// class UBP_GodEmperor_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_GodEmperor__BP_GodEmperor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GodEmperor_C, 0x0060);
		}

		// class UBP_Patchwork1_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Patchwork1_Banner__BP_Patchwork1_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Patchwork1_Banner_C, 0x0060);
		}

		// class UBP_Fleur2_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Fleur2__BP_Fleur2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Fleur2_C, 0x0060);
		}

		// class UBP_Chain2_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Chain2__BP_Chain2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Chain2_C, 0x0060);
		}

		// class UBP_MonkCutMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_MonkCutMale02__BP_MonkCutMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MonkCutMale02_C, 0x0078);
		}

		// class UBP_BowlCutMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_BowlCutMale02__BP_BowlCutMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BowlCutMale02_C, 0x0078);
		}

		// class UBP_BackslickMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_BackslickMale02__BP_BackslickMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BackslickMale02_C, 0x0078);
		}

		// class UStunShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__StunShake__StunShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStunShake_C, 0x0160);
		}

		// class ABP_SpawnProtectionBox_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_SpawnProtectionBox__BP_SpawnProtectionBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SpawnProtectionBox_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SpawnProtectionBox_C, Box, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SpawnProtectionBox_C, AllowedTeam, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SpawnProtectionBox_C, UsesNavmesh, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SpawnProtectionBox_C, 0x0235);
		}

		// class UBP_StatusBar_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StatusBar__BP_StatusBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, FullHealthPulse, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, FullStaminaPulse, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, LowStaminaPulse, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, LowHealthPulse, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, FadeOut, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, Border_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, BorderPulseImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, BorderPulseImage_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, container_Image, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, FullBorderPulseImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, FullBorderPulseImage_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, HealthIcon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, Image_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, Image_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, Image_5, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, ProgressBar_DelayedHealth, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, ProgressBar_DelayedStam, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, ProgressBar_DisplayedHealth, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, ProgressBar_DisplayedStam, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, RetainerBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, RetainerBox_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, StaminaIcon, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, StatusBarWrapper, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, TextBlock_3, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, TextBlock_6, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, VehicleHealthBar, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, VehicleHealthBar2, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, VehicleNameText, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, VerticalBox_2, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, DisplayedHealth, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, DisplayedStamina, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, ObservedHealth, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, ObservedStamina, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, UnknownData_ZDUJ, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, ObservedCharacter, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, DelayedHealth, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, DelayedStamina, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, LastObservedHealth, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, LastObservedStamina, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, UnknownData_RH7P, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, DelayedStaminaWait, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, DelayedHealthWait, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, DelayedHealthTarget, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, DelayedStaminaTarget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, UnknownData_IHMK, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, DynamicStaminaMat, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, DynamicHealthMat, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusBar_C, RegenPulseIntensity, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StatusBar_C, 0x036C);
		}

		// class UBP_HoveredSetting_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_HoveredSetting__BP_HoveredSetting_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HoveredSetting_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HoveredSetting_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HoveredSetting_C, Image_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HoveredSetting_C, SettingImage, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HoveredSetting_C, TextCPUImpact, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HoveredSetting_C, TextGPUImpact, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HoveredSetting_C, TextSettingDescription, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HoveredSetting_C, TextSettingText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HoveredSetting_C, TextVRAMImpact, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HoveredSetting_C, VerticalBox_1, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HoveredSetting_C, 0x0280);
		}

		// class UBP_DiscreteSlider_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_DiscreteSlider__BP_DiscreteSlider_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DiscreteSlider_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DiscreteSlider_C, Image_2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DiscreteSlider_C, ProgressBar_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DiscreteSlider_C, Slider, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DiscreteSlider_C, OnValueChanged, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DiscreteSlider_C, NumOfIndices, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DiscreteSlider_C, PrevValue, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DiscreteSlider_C, SnapToDiscreteValues, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DiscreteSlider_C, UnknownData_EX6X, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DiscreteSlider_C, OnStartedTouching, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DiscreteSlider_C, 0x0280);
		}

		// class UBP_Squat_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Squat__BP_Squat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Squat_C, 0x0130);
		}

		// class ABP_MordhauCustomizationObserver_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauCustomizationObserver__BP_MordhauCustomizationObserver_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationObserver_C, PurchaseEffectSpawn, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationObserver_C, Camera, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationObserver_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauCustomizationObserver_C, 0x0238);
		}

		// class UBP_ColorPickerContainer_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ColorPickerContainer__BP_ColorPickerContainer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, ColorContainer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, Image_1857, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, Test, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, ColorPickerWrapper, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, Parent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, ColorPickerElement, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, WidgetSize, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, ColorsPerRow, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, MaxColorPickerHeight, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, MaxColorPickerWidth, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, ColorElementHeight, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, ApproximateColorPickerPadding, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerContainer_C, ColorElementWidth, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ColorPickerContainer_C, 0x0288);
		}

		// class UBP_ChainTabardChest_C : public UBP_Tier2UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainTabardChest__BP_ChainTabardChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainTabardChest_C, 0x01E8);
		}

		// class UBP_CoatOfPlates_ChestLowAlt_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CoatOfPlates_ChestLowAlt__BP_CoatOfPlates_ChestLowAlt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CoatOfPlates_ChestLowAlt_C, 0x01A0);
		}

		// class UBP_MOTD_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MOTD__BP_MOTD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, HideAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, ShowAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, CloseButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, Image_7, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, Image_9, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, SizeBox_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, TextBlock_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, WebBrowser_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, WasShown, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MOTD_C, WasClosed, 0x0281);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MOTD_C, 0x0282);
		}

		// class ABP_MordhauHUD_C : public AMordhauHUD
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauHUD__BP_MordhauHUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, Widgets, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, HUD, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, Scoreboard, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, ChatBox, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, KillFeed, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, StatusBar, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, MainMenu, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, IsHUDMinimal, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, UnknownData_RLQS, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, Crosshair, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, TargetInfo, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, ProfileSelect, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, TeamSelect, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, EmoteMenu, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, Announcement, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, Watermark, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, bShowWatermark, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, UnknownData_UK85, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, QueuedDialogs, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, CurrentDialog, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, EquipmentDisplay, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, SpawnInfo, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, NetIndicator, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, Tips, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, ScoreFeed, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, EquipmentInfoDisplay, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, VoiceMenu, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, SpawnScreen, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, Objectives, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, KilledByPanel, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, SpawnScreenWidgetClass, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, End_Screen, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, VoteKickMenu, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, ContextPopupWrapper, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, MOTD, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, HUDButtonPrompts, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, On_Player_Killed_Event, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauHUD_C, ContextPopupWrapper_Interface, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauHUD_C, 0x0470);
		}

		// class ABP_Tier3HelmetPickup_C : public ABP_HelmetPickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier3HelmetPickup__BP_Tier3HelmetPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tier3HelmetPickup_C, 0x0408);
		}

		// class ABP_Tier2TorsoPickup_C : public ABP_TorsoPickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier2TorsoPickup__BP_Tier2TorsoPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tier2TorsoPickup_C, 0x0408);
		}

		// class ABP_Tier1TorsoPickup_C : public ABP_TorsoPickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier1TorsoPickup__BP_Tier1TorsoPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tier1TorsoPickup_C, 0x0408);
		}

		// class UBP_EquipmentSkinMod_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__BP_EquipmentSkinMod__BP_EquipmentSkinMod_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentSkinMod_C, EquipmentModInfos, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EquipmentSkinMod_C, 0x0038);
		}

		// class UBP_SkinList_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SkinList__BP_SkinList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SkinList_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SkinList_C, Button_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SkinList_C, Image_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SkinList_C, ScrollBox_1, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SkinList_C, 0x0250);
		}

		// class ABP_ClientSkinModule_C : public ACharacter
		TEST_METHOD(BlueprintGeneratedClass__BP_ClientSkinModule__BP_ClientSkinModule_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, UnknownData_YD2G, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, WeaponMods, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, ArmorMods, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, ArmorLoaded, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, EquipmentLoaded, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, UnknownData_OQAD, 0x04EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, EquipmentModClasses, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, ArmorModClasses, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, AutoloadMods, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, UnknownData_OG1O, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, SkinList, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, DisableSkinList, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, UnknownData_SP4F, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ClientSkinModule_C, SkinListWidgetStayTime, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ClientSkinModule_C, 0x0528);
		}

		// class UBP_Italian_Gauntlets1x1_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Italian_Gauntlets1x1__BP_Italian_Gauntlets1x1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Italian_Gauntlets1x1_C, 0x01A0);
		}

		// class UBP_CuirassierGauntlets_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CuirassierGauntlets__BP_CuirassierGauntlets_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CuirassierGauntlets_C, 0x01A0);
		}

		// class AMainMenu_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__MainMenu__MainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, CursorActor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, Characters, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, GameInstance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, PartySizeOverride, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, UnknownData_PU7T, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, PawnTransforms, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, FocalDistances, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, TestingModeEnabled, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, UnknownData_JB22, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, UpdateAllMeshesAtFrame, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, RandomPoseInt, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, UnknownData_9A71, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, BP_RandomProfileDoll_507_ExecuteUbergraph_MainMenu_RefProperty, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, BP_CharacterDoll_2_ExecuteUbergraph_MainMenu_RefProperty, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, BP_CharacterDoll2_ExecuteUbergraph_MainMenu_RefProperty, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, BP_CharacterDoll3_ExecuteUbergraph_MainMenu_RefProperty, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, BP_MordhauMainMenuPawn_64_ExecuteUbergraph_MainMenu_RefProperty, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, BP_CharacterDoll4_ExecuteUbergraph_MainMenu_RefProperty, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, BP_CharacterDoll5_ExecuteUbergraph_MainMenu_RefProperty, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, _2Players_ExecuteUbergraph_MainMenu_RefProperty, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, _3Players_ExecuteUbergraph_MainMenu_RefProperty, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, _4Players_ExecuteUbergraph_MainMenu_RefProperty, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, _5Players_ExecuteUbergraph_MainMenu_RefProperty, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, _6Players_ExecuteUbergraph_MainMenu_RefProperty, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenu_C, 0x02E8);
		}

		// class ABP_Ummmmm_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Ummmmm__BP_Ummmmm_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ummmmm_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ummmmm_C, NiceHelmetStatic, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ummmmm_C, Pants, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ummmmm_C, Nice_helmet, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ummmmm_C, UMA_Master, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ummmmm_C, DefaultSceneRoot, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Ummmmm_C, 0x0250);
		}

		// class UBP_GermanSalletBuffetRaisedPlume_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletBuffetRaisedPlume__BP_GermanSalletBuffetRaisedPlume_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletBuffetRaisedPlume_C, 0x01C8);
		}

		// class UBP_VanguardsKettleStrap_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VanguardsKettleStrap__BP_VanguardsKettleStrap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VanguardsKettleStrap_C, 0x01C8);
		}

		// class UBP_NormanCasqueNoNasal_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NormanCasqueNoNasal__BP_NormanCasqueNoNasal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NormanCasqueNoNasal_C, 0x01C8);
		}

		// class UBP_KlappvisierStandardUp_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KlappvisierStandardUp__BP_KlappvisierStandardUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KlappvisierStandardUp_C, 0x01C8);
		}

		// class UBP_PeasantHat_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PeasantHat__BP_PeasantHat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PeasantHat_C, 0x01C8);
		}

		// class UBP_claymore_CourtsideHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_claymore_CourtsideHandle__BP_claymore_CourtsideHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_claymore_CourtsideHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_claymore_CourtsideHandle_C, 0x0080);
		}

		// class UBP_BattleAxe_ContinentalHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BattleAxe_ContinentalHead__BP_BattleAxe_ContinentalHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BattleAxe_ContinentalHead_C, 0x0078);
		}

		// class UBP_BattleAxe_gallowglass_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BattleAxe_gallowglass__BP_BattleAxe_gallowglass_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BattleAxe_gallowglass_C, 0x0078);
		}

		// class UBP_BattleAxe_HeavyShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BattleAxe_HeavyShaft__BP_BattleAxe_HeavyShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BattleAxe_HeavyShaft_C, 0x0078);
		}

		// class ABP_BattleAxe_C : public ABP_Polearm_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BattleAxe__BP_BattleAxe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BattleAxe_C, 0x1C28);
		}

		// class ABP_Poleaxe_C : public ABP_Polearm_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe__BP_Poleaxe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Poleaxe_C, 0x1C28);
		}

		// class UBP_Poleaxe_CampaignShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_CampaignShaft__BP_Poleaxe_CampaignShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_CampaignShaft_C, 0x0078);
		}

		// class UBP_ArmingSword_KnightlyBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_KnightlyBlade__BP_ArmingSword_KnightlyBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_KnightlyBlade_C, 0x0078);
		}

		// class UBP_2HSwordAnimationProfile_C : public UBP_MeleeWeaponAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2HSwordAnimationProfile__BP_2HSwordAnimationProfile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2HSwordAnimationProfile_C, 0x00C0);
		}

		// class UBP_Feitoria64Override_C : public UMapMetadataOverride
		TEST_METHOD(BlueprintGeneratedClass__BP_Feitoria64Override__BP_Feitoria64Override_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Feitoria64Override_C, 0x0098);
		}

		// class UBP_LeatherColor32_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor32__BP_LeatherColor32_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor32_C, 0x0078);
		}

		// class UChaosClothConfig : public UClothConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MassMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_XMD6, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UniformMass, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TotalMass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Density, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MinPerParticleMass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, EdgeStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, BendingStiffness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AreaStiffness, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, VolumeStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, StrainLimitingStiffness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LimitScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGeodesicDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_W2RZ, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, ShapeTargetStiffness, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, CollisionThickness, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, FrictionCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DampingCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DragCoefficient, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AnimDriveSpringStiffness, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseBendingElements, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseTetrahedralConstraints, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseThinShellVolumeConstraints, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseSelfCollisions, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseContinuousCollisionDetection, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_OZBJ, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LinearVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AngularVelocityScale, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothConfig, 0x0088);
		}

		// class UChaosClothSharedSimConfig : public UClothSharedConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothSharedSimConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, IterationCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SubdivisionCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SelfCollisionThickness, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, CollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseDampingOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_OR16, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Damping, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseGravityOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_Y3UE, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, GravityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Gravity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseLocalSpaceSimulation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseXPBDConstraints, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_SLGZ, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothSharedSimConfig, 0x0058);
		}

		// class UChaosClothingSimulationFactory : public UClothingSimulationFactory
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationFactory, 0x0028);
		}

		// class UChaosClothingSimulationInteractor : public UClothingSimulationInteractor
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothingSimulationInteractor, UnknownData_I87J, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationInteractor, 0x0040);
		}

		// class UBP_KickMotion_C : public UKickMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_KickMotion__BP_KickMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KickMotion_C, 0x1108);
		}

		// class ABP_BaseProgressActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_BaseProgressActor__BP_BaseProgressActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, Audio, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, EndSound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, StartSound, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, StartSoundTriggerTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, EndSoundTriggerTime, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, LastProgress, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, UnknownData_O7W0, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, ProgressCurveRaise, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, ProgressCurveLower, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseProgressActor_C, Driver, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BaseProgressActor_C, 0x0270);
		}

		// class UBP_NavFilter_Team2_C : public UMordhauNavigationQueryFilter
		TEST_METHOD(BlueprintGeneratedClass__BP_NavFilter_Team2__BP_NavFilter_Team2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavFilter_Team2_C, 0x0048);
		}

		// class UBP_NavArea_Climb_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__BP_NavArea_Climb__BP_NavArea_Climb_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavArea_Climb_C, 0x0048);
		}

		// class UBP_MapEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MapEntry__BP_MapEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, HoverAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, BP_RadialGradient, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, EntryButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, GameModeName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, Image_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, Image_5, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, MapName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, TeamImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, Thumbnail, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, VoteCount, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, SelectedStyle, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, DeselectedStyle, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, Selected, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, bIsSelected, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, UnknownData_9MSM, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, GameModeMapName, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntry_C, bIsInvasion, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MapEntry_C, 0x03C1);
		}

		// class ABP_FireBomb_C : public ABP_ThrowableEquipment_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FireBomb__BP_FireBomb_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FireBomb_C, 0x0CD8);
		}

		// class UBP_LandsknechtMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_LandsknechtMale02__BP_LandsknechtMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LandsknechtMale02_C, 0x0078);
		}

		// class UBP_HorseshoeMoustache2_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_HorseshoeMoustache2__BP_HorseshoeMoustache2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HorseshoeMoustache2_C, 0x0078);
		}

		// class UBP_HorseshoeMoustache_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_HorseshoeMoustache__BP_HorseshoeMoustache_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HorseshoeMoustache_C, 0x0078);
		}

		// class UBP_PolearmAnimationProfile_C : public UBP_MeleeWeaponAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PolearmAnimationProfile__BP_PolearmAnimationProfile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PolearmAnimationProfile_C, 0x00C0);
		}

		// class UBP_PolearmLong_RightStabMotion_C : public UBP_Polearm_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PolearmLong_RightStabMotion__BP_PolearmLong_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PolearmLong_RightStabMotion_C, 0x1108);
		}

		// class UBP_FlatFaceBascinet_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlatFaceBascinet__BP_FlatFaceBascinet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlatFaceBascinet_C, 0x01C8);
		}

		// class UBP_PigFaceVisorUp_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PigFaceVisorUp__BP_PigFaceVisorUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PigFaceVisorUp_C, 0x01C8);
		}

		// class UBP_Horse1H_LeftStrikeMotion_C : public UBP_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Horse1H_LeftStrikeMotion__BP_Horse1H_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Horse1H_LeftStrikeMotion_C, 0x1160);
		}

		// class ABP_ThrownSpinningProjectile1HSword_C : public ABP_ThrownWeaponProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownSpinningProjectile1HSword__BP_ThrownSpinningProjectile1HSword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownSpinningProjectile1HSword_C, 0x07D0);
		}

		// class UBP_WanderersVest_C : public UBP_Tier0UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WanderersVest__BP_WanderersVest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WanderersVest_C, 0x01E8);
		}

		// class UBP_VeteranCuirass_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteranCuirass__BP_VeteranCuirass_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteranCuirass_C, 0x01E8);
		}

		// class UBP_maulBohemian_TrustyHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maulBohemian_TrustyHandle__BP_maulBohemian_TrustyHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maulBohemian_TrustyHandle_C, 0x0078);
		}

		// class UBP_VikingRoundShield_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingRoundShield__BP_VikingRoundShield_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingRoundShield_C, 0x0078);
		}

		// class ULiveLinkMagicLeapHandTrackingSourceFactory : public ULiveLinkSourceFactory
		TEST_METHOD(Class__MagicLeapHandTracking__LiveLinkMagicLeapHandTrackingSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkMagicLeapHandTrackingSourceFactory, 0x0028);
		}

		// class UMagicLeapHandTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandTracking__MagicLeapHandTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandTrackingFunctionLibrary, 0x0028);
		}

		// class UBP_Scot_C : public UCharacterVoice
		TEST_METHOD(BlueprintGeneratedClass__BP_Scot__BP_Scot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Scot_C, 0x00A0);
		}

		// class UBP_FleshWoundPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FleshWoundPerk__BP_FleshWoundPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FleshWoundPerk_C, 0x0068);
		}

		// class UBP_DodgePerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DodgePerk__BP_DodgePerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DodgePerk_C, 0x0068);
		}

		// class UBP_MaleEyebrow02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_MaleEyebrow02__BP_MaleEyebrow02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MaleEyebrow02_C, 0x0078);
		}

		// class UBP_MaleEyebrow01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_MaleEyebrow01__BP_MaleEyebrow01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MaleEyebrow01_C, 0x0078);
		}

		// class UBP_Emblem_Tree_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Tree__BP_Emblem_Tree_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Tree_C, 0x0060);
		}

		// class UBP_Emblem_Sinclair_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Sinclair__BP_Emblem_Sinclair_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Sinclair_C, 0x0060);
		}

		// class UBP_Emblem_Praise_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Praise__BP_Emblem_Praise_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Praise_C, 0x0060);
		}

		// class UBP_MetalDetailColor21_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor21__BP_MetalDetailColor21_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor21_C, 0x0078);
		}

		// class UBP_MetalDetailColor18_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor18__BP_MetalDetailColor18_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor18_C, 0x0078);
		}

		// class UBP_MetalDetailColor17_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor17__BP_MetalDetailColor17_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor17_C, 0x0078);
		}

		// class UBP_MetalDetailColor16_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor16__BP_MetalDetailColor16_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor16_C, 0x0078);
		}

		// class UBP_LeatherColor4_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor4__BP_LeatherColor4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor4_C, 0x0078);
		}

		// class UBP_LeatherColor33_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor33__BP_LeatherColor33_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor33_C, 0x0078);
		}

		// class UBP_LeatherColor10_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor10__BP_LeatherColor10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor10_C, 0x0078);
		}

		// class UBP_LeatherColor1_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor1__BP_LeatherColor1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor1_C, 0x0078);
		}

		// class UBP_HairColor9_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor9__BP_HairColor9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor9_C, 0x0078);
		}

		// class UBP_Short2Male01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Short2Male01__BP_Short2Male01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Short2Male01_C, 0x0078);
		}

		// class UBP_MuttonchopsMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_MuttonchopsMale01__BP_MuttonchopsMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MuttonchopsMale01_C, 0x0078);
		}

		// class UBP_GoateeMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_GoateeMale01__BP_GoateeMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GoateeMale01_C, 0x0078);
		}

		// class UBP_Ladder1H_RightStrikeMotion_C : public UBP_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Ladder1H_RightStrikeMotion__BP_Ladder1H_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Ladder1H_RightStrikeMotion_C, 0x1160);
		}

		// class UBP_Ladder1H_RightStabMotion_C : public UBP_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Ladder1H_RightStabMotion__BP_Ladder1H_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Ladder1H_RightStabMotion_C, 0x1108);
		}

		// class UBP_Ladder1H_LeftStrikeMotion_C : public UBP_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Ladder1H_LeftStrikeMotion__BP_Ladder1H_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Ladder1H_LeftStrikeMotion_C, 0x1160);
		}

		// class ABP_MordhauActor_C : public AMordhauActor
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauActor__BP_MordhauActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauActor_C, UnknownData_GOWQ, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauActor_C, 0x0380);
		}

		// class UAB_Bow_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Bow__AB_Bow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Bow_C, UnknownData_2IVE, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Bow_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Bow_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Bow_C, AnimGraphNode_Slot, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Bow_C, AnimGraphNode_LocalRefPose, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Bow_C, AnimGraphNode_TwoWayBlend, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Bow_C, AnimGraphNode_SequenceEvaluator, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Bow_C, LoadedIn1P, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Bow_C, 0x041C);
		}

		// class UBTTask_BackOff_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_BackOff__BTTask_BackOff_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BackOff_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BackOff_C, RightOffset, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BackOff_C, OriginalAngle, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BackOff_C, RequiresInitialization, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BackOff_C, UnknownData_S5JR, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BackOff_C, RandomSide, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BackOff_C, Distance, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BackOff_C, 0x00C4);
		}

		// class ABP_BaseCustomizationSpot_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_BaseCustomizationSpot__BP_BaseCustomizationSpot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseCustomizationSpot_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseCustomizationSpot_C, DebugDisplayMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseCustomizationSpot_C, AttachComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseCustomizationSpot_C, Arrow, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseCustomizationSpot_C, DefaultSceneRoot, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BaseCustomizationSpot_C, 0x0248);
		}

		// class UBP_VelvetPauldrons_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VelvetPauldrons__BP_VelvetPauldrons_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VelvetPauldrons_C, 0x01A0);
		}

		// class UBP_VeteransFoldedGlove_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransFoldedGlove__BP_VeteransFoldedGlove_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransFoldedGlove_C, 0x01A0);
		}

		// class UBP_WorkersGloves_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WorkersGloves__BP_WorkersGloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WorkersGloves_C, 0x01A0);
		}

		// class UBP_HussarHelmetComb_noMask_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarHelmetComb_noMask__BP_HussarHelmetComb_noMask_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarHelmetComb_noMask_C, 0x01C8);
		}

		// class UBP_Vaalsgard_FullyClosed_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Vaalsgard_FullyClosed__BP_Vaalsgard_FullyClosed_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Vaalsgard_FullyClosed_C, 0x01C8);
		}

		// class UBP_Vaalsgard_faceplate_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Vaalsgard_faceplate__BP_Vaalsgard_faceplate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Vaalsgard_faceplate_C, 0x01C8);
		}

		// class UBP_BlackSalletTilted_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BlackSalletTilted__BP_BlackSalletTilted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlackSalletTilted_C, 0x01C8);
		}

		// class UBP_BlackSalletCoveredTilted_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BlackSalletCoveredTilted__BP_BlackSalletCoveredTilted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlackSalletCoveredTilted_C, 0x01C8);
		}

		// class ABP_CatapultProjectileFire_C : public ABP_CatapultProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CatapultProjectileFire__BP_CatapultProjectileFire_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CatapultProjectileFire_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CatapultProjectileFire_C, 0x07D8);
		}

		// class UBP_Spear_PikeHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Spear_PikeHead__BP_Spear_PikeHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Spear_PikeHead_C, 0x0078);
		}

		// class UBP_HomeScoreboardContainer_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_HomeScoreboardContainer__BP_HomeScoreboardContainer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScoreboardContainer_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScoreboardContainer_C, Background, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScoreboardContainer_C, CanvasPanel_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScoreboardContainer_C, Container, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScoreboardContainer_C, Image_9, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScoreboardContainer_C, Scoreboard, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScoreboardContainer_C, showBackground, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScoreboardContainer_C, Use_Gamestate_Entry_Type, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScoreboardContainer_C, Scoreboard_Entry_Type, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScoreboardContainer_C, Should_Keep_Local_Entry_in_View, 0x026B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HomeScoreboardContainer_C, 0x026C);
		}

		// class UBP_Halberd_DevoutHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Halberd_DevoutHead__BP_Halberd_DevoutHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Halberd_DevoutHead_C, 0x0078);
		}

		// class UBP_Bare_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bare__BP_Bare_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bare_C, 0x01A0);
		}

		// class UBP_Tier1HeadWearable_C : public UBP_HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier1HeadWearable__BP_Tier1HeadWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier1HeadWearable_C, 0x01C8);
		}

		// class UBP_HeadWearable_C : public UHeadWearable
		TEST_METHOD(BlueprintGeneratedClass__BP_HeadWearable__BP_HeadWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeadWearable_C, 0x01C8);
		}

		// class UBP_FootsoldierLegs_C : public UBP_Tier3LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FootsoldierLegs__BP_FootsoldierLegs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FootsoldierLegs_C, 0x01B8);
		}

		// class UBP_ShieldAnimationRoundShieldNew_C : public UBP_ShieldAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShieldAnimationRoundShieldNew__BP_ShieldAnimationRoundShieldNew_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShieldAnimationRoundShieldNew_C, 0x00C0);
		}

		// class UBP_ColorPickerWrapper_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ColorPickerWrapper__BP_ColorPickerWrapper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerWrapper_C, Image_1796, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPickerWrapper_C, ColorPickerContainer, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ColorPickerWrapper_C, 0x0240);
		}

		// class ABP_EquipmentCustomizationSpot_C : public ABP_BaseCustomizationSpot_C
		TEST_METHOD(BlueprintGeneratedClass__BP_EquipmentCustomizationSpot__BP_EquipmentCustomizationSpot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EquipmentCustomizationSpot_C, 0x0248);
		}

		// class UBP_Emblem_Crestofthelegion_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Crestofthelegion__BP_Emblem_Crestofthelegion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Crestofthelegion_C, 0x0060);
		}

		// class UBP_Emblem_BoaringHead_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_BoaringHead__BP_Emblem_BoaringHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_BoaringHead_C, 0x0060);
		}

		// class UBP_raven01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_raven01__BP_raven01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_raven01_C, 0x0060);
		}

		// class UBP_LongSkirt_Single_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LongSkirt_Single__BP_LongSkirt_Single_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongSkirt_Single_C, 0x01A0);
		}

		// class UBP_CuirassierPauldrons_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CuirassierPauldrons__BP_CuirassierPauldrons_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CuirassierPauldrons_C, 0x01A0);
		}

		// class UBP_RoyalFlatTop_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RoyalFlatTop__BP_RoyalFlatTop_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RoyalFlatTop_C, 0x01C8);
		}

		// class UBP_Greathelm_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greathelm__BP_Greathelm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greathelm_C, 0x01C8);
		}

		// class UBP_messer_SwissSaber_blade1_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_SwissSaber_blade1__BP_messer_SwissSaber_blade1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_SwissSaber_blade1_C, 0x0078);
		}

		// class UBP_messer_SwissSaber_blade3_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_SwissSaber_blade3__BP_messer_SwissSaber_blade3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_SwissSaber_blade3_C, 0x0078);
		}

		// class ABP_2Hmace_C : public ABP_BattleAxe_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2Hmace__BP_2Hmace_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_2Hmace_C, 0x1C28);
		}

		// class ABP_TargeShield_C : public ABP_MordhauShield_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TargeShield__BP_TargeShield_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TargeShield_C, 0x1C48);
		}

		// class UBP_Halberd_RivetedShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Halberd_RivetedShaft__BP_Halberd_RivetedShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Halberd_RivetedShaft_C, 0x0078);
		}

		// class UBP_maul_HorsemanHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maul_HorsemanHandle__BP_maul_HorsemanHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maul_HorsemanHandle_C, 0x0078);
		}

		// class UBP_JavelinWarDart_AmentumShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JavelinWarDart_AmentumShaft__BP_JavelinWarDart_AmentumShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JavelinWarDart_AmentumShaft_C, 0x0078);
		}

		// class UBP_BasicShouldersRound_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BasicShouldersRound__BP_BasicShouldersRound_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BasicShouldersRound_C, 0x01A0);
		}

		// class UBP_FlutedKnightPauldrons2x2_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlutedKnightPauldrons2x2__BP_FlutedKnightPauldrons2x2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlutedKnightPauldrons2x2_C, 0x01A0);
		}

		// class UBP_FlutedKnightPauldrons1x1_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlutedKnightPauldrons1x1__BP_FlutedKnightPauldrons1x1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlutedKnightPauldrons1x1_C, 0x01A0);
		}

		// class UBP_ArmetWedge_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmetWedge__BP_ArmetWedge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmetWedge_C, 0x01C8);
		}

		// class UBP_TruceMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_TruceMapMetadata__BP_TruceMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TruceMapMetadata_C, 0x00A8);
		}

		// class UBP_TourneyMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_TourneyMapMetadata__BP_TourneyMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TourneyMapMetadata_C, 0x00A8);
		}

		// class UBP_ItalianChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ItalianChest__BP_ItalianChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItalianChest_C, 0x01E8);
		}

		// class UBP_PaddedChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PaddedChest__BP_PaddedChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PaddedChest_C, 0x01E8);
		}

		// class UBP_maul_BoneCrusherHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maul_BoneCrusherHead__BP_maul_BoneCrusherHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maul_BoneCrusherHead_C, 0x0078);
		}

		// class UBP_maul_SupremeHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maul_SupremeHead__BP_maul_SupremeHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maul_SupremeHead_C, 0x0078);
		}

		// class UBP_FlatFaceVisorUp_Plume_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlatFaceVisorUp_Plume__BP_FlatFaceVisorUp_Plume_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlatFaceVisorUp_Plume_C, 0x01C8);
		}

		// class UBP_claymore_AncestralHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_claymore_AncestralHandle__BP_claymore_AncestralHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_claymore_AncestralHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_claymore_AncestralHandle_C, 0x0080);
		}

		// class ABP_Greatsword_C : public ABP_TwoHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword__BP_Greatsword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Greatsword_C, 0x1C28);
		}

		// class UBP_FencingDoubletLeather_C : public UBP_Tier1UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FencingDoubletLeather__BP_FencingDoubletLeather_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FencingDoubletLeather_C, 0x01E8);
		}

		// class UBP_SultansBoots_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SultansBoots__BP_SultansBoots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SultansBoots_C, 0x01A0);
		}

		// class UBP_WanderersSkirt_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WanderersSkirt__BP_WanderersSkirt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WanderersSkirt_C, 0x01A0);
		}

		// class UBP_Riders_Boots_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Riders_Boots__BP_Riders_Boots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Riders_Boots_C, 0x01A0);
		}

		// class ABP_Estoc_C : public ABP_TwoHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Estoc__BP_Estoc_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Estoc_C, 0x1C28);
		}

		// class UBP_Executioner_TwistedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Executioner_TwistedHandle__BP_Executioner_TwistedHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Executioner_TwistedHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Executioner_TwistedHandle_C, 0x0080);
		}

		// class UBP_waraxe_double_ElderShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_waraxe_double_ElderShaft__BP_waraxe_double_ElderShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_waraxe_double_ElderShaft_C, 0x0078);
		}

		// class UBTNode : public UObject
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_3N2F, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_61VQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0058);
		}

		// class UBTTaskNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_1Z01, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0070);
		}

		// class UEnvQueryNode : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_K3H3, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0030);
		}

		// class UEnvQueryGenerator : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_5NOW, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0050);
		}

		// class UEnvQueryTest : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_YPE7, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_5GYY, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_O9GS, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_V4ZU, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_Y4L8, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_RQYO, 0x01F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01F8);
		}

		// class AAIController : public AController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_NTXL, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_OKV1, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_U6E3, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0328);
		}

		// class UPathFollowingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_56KM, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_Y5I2, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_GUTS, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x0258);
		}

		// class UCrowdFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_CBZQ, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CharacterMovement, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_YS7B, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x0298);
		}

		// class AEQSTestingPawn : public ACharacter
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_14F2, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_DBJ3, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_HYTU, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_KPDM, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, NavAgentProperties, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_3EPF, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x0550);
		}

		// class UAIAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_OM1V, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0068);
		}

		// class UAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// class UAIDataProvider : public UObject
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0028);
		}

		// class UAIDataProvider_QueryParams : public UAIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_Q41E, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0040);
		}

		// class UAIDataProvider_Random : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_956G, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0050);
		}

		// class UAIHotSpotManager : public UObject
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0028);
		}

		// class UAIPerceptionComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_G8XV, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_ILYF, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x0180);
		}

		// class UAIPerceptionListenerInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// class UAIPerceptionStimuliSourceComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_L6Y1, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x00C8);
		}

		// class UAISubsystem : public UObject
		TEST_METHOD(Class__AIModule__AISubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, UnknownData_GHBH, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, AISystem, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISubsystem, 0x0038);
		}

		// class UAIPerceptionSystem : public UAISubsystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_569M, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_9FFT, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0138);
		}

		// class UAIResourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// class UAIResource_Movement : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0038);
		}

		// class UAIResource_Logic : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0038);
		}

		// class UAISense : public UObject
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_HAW5, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_CDXT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_LXTS, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0080);
		}

		// class UAISense_Blueprint : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00A8);
		}

		// class UAISense_Damage : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0090);
		}

		// class UAISense_Hearing : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_QFVA, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00E8);
		}

		// class UAISense_Prediction : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0090);
		}

		// class UAISense_Sight : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_RUC9, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_Q985, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_MHL2, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0170);
		}

		// class UAISense_Team : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0090);
		}

		// class UAISense_Touch : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0090);
		}

		// class UAISenseBlueprintListener : public UUserDefinedStruct
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x0108);
		}

		// class UAISenseConfig : public UObject
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_E5TH, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0048);
		}

		// class UAISenseConfig_Blueprint : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0050);
		}

		// class UAISenseConfig_Damage : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0050);
		}

		// class UAISenseConfig_Hearing : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_GA37, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0060);
		}

		// class UAISenseConfig_Prediction : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0048);
		}

		// class UAISenseConfig_Sight : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_9CM8, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0068);
		}

		// class UAISenseConfig_Team : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0048);
		}

		// class UAISenseConfig_Touch : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0048);
		}

		// class UAISenseEvent : public UObject
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0028);
		}

		// class UAISenseEvent_Damage : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0058);
		}

		// class UAISenseEvent_Hearing : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0058);
		}

		// class UAISightTargetInterface : public UInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// class UAISystem : public UAISystemBase
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bForgetStaleActors, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_HI5G, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_3ZFJ, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0130);
		}

		// class UAITask : public UGameplayTask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0070);
		}

		// class UAITask_LockLogic : public UAITask
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0070);
		}

		// class UAITask_MoveTo : public UAITask
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_AZMH, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0110);
		}

		// class UAITask_RunEQS : public UAITask
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_0M0W, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x00E8);
		}

		// class UBehaviorTree : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_NZQ1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_FDV2, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0068);
		}

		// class UBrainComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_E6MX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_2C3S, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0110);
		}

		// class UBehaviorTreeComponent : public UBrainComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_V5DI, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_Z9D9, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, DefaultBehaviorTreeAsset, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x0270);
		}

		// class UBehaviorTreeManager : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_MM3Z, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// class UBehaviorTreeTypes : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// class UBlackboardAssetProvider : public UInterface
		TEST_METHOD(Class__AIModule__BlackboardAssetProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardAssetProvider, 0x0028);
		}

		// class UBlackboardComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, DefaultBlackboardAsset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_0ZSS, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_W78Q, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01B0);
		}

		// class UBlackboardData : public UDataAsset
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_5X0B, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0050);
		}

		// class UBlackboardKeyType : public UObject
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_65TP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// class UBlackboardKeyType_Bool : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// class UBlackboardKeyType_Class : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// class UBlackboardKeyType_Enum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_X935, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0050);
		}

		// class UBlackboardKeyType_Float : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// class UBlackboardKeyType_Int : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// class UBlackboardKeyType_Name : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// class UBlackboardKeyType_NativeEnum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0048);
		}

		// class UBlackboardKeyType_Object : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// class UBlackboardKeyType_Rotator : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// class UBlackboardKeyType_String : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0040);
		}

		// class UBlackboardKeyType_Vector : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// class UBTAuxiliaryNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_KOSI, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0060);
		}

		// class UBTCompositeNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_73M4, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_MVD4, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0090);
		}

		// class UBTComposite_Selector : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0090);
		}

		// class UBTComposite_Sequence : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0090);
		}

		// class UBTComposite_SimpleParallel : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_MN1G, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x0098);
		}

		// class UBTDecorator : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_1FRX, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_4839, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0068);
		}

		// class UBTDecorator_BlackboardBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// class UBTDecorator_Blackboard : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_NYFK, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// class UBTDecorator_BlueprintBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_LMH5, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_15F7, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A0);
		}

		// class UBTDecorator_CheckGameplayTagsOnActor : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_JYO1, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00C8);
		}

		// class UBTDecorator_CompareBBEntries : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_EZL5, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// class UBTDecorator_ConditionalLoop : public UBTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// class UBTDecorator_ConeCheck : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_3N6Z, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_CRKF, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F0);
		}

		// class UBTDecorator_Cooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_3YVN, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0070);
		}

		// class UBTDecorator_DoesPathExist : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_REB6, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_8LTV, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C8);
		}

		// class UBTDecorator_ForceSuccess : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0068);
		}

		// class UBTDecorator_IsAtLocation : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_GAHG, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_Z6U1, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_04NV, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D8);
		}

		// class UBTDecorator_IsBBEntryOfClass : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x0098);
		}

		// class UBTDecorator_KeepInCone : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_YMJM, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_2LSZ, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C8);
		}

		// class UBTDecorator_Loop : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_GG4J, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_NGY9, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0078);
		}

		// class UBTDecorator_ReachedMoveGoal : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0068);
		}

		// class UBTDecorator_SetTagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_VQNC, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0078);
		}

		// class UBTDecorator_TagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_JZ2P, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0078);
		}

		// class UBTDecorator_TimeLimit : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_GNT7, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0070);
		}

		// class UBTFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// class UBTService : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_W7TM, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0070);
		}

		// class UBTService_BlackboardBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0098);
		}

		// class UBTService_BlueprintBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_280X, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_MDD1, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0098);
		}

		// class UBTService_DefaultFocus : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_IIZ3, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A0);
		}

		// class UBTService_RunEQS : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_X6X1, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x00F0);
		}

		// class UBTTask_BlackboardBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0098);
		}

		// class UBTTask_BlueprintBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, TickInterval, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_OZKG, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_7FFS, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A8);
		}

		// class UBTTask_FinishWithResult : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, Result, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_Q1C0, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0078);
		}

		// class UBTTask_GameplayTaskBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_LFPG, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0078);
		}

		// class UBTTask_MakeNoise : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_CT5J, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0078);
		}

		// class UBTTask_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_WK5F, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_NX89, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B0);
		}

		// class UBTTask_MoveDirectlyToward : public UBTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_EE4F, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B8);
		}

		// class UBTTask_PawnActionBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0070);
		}

		// class UBTTask_PlayAnimation : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_OFZZ, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_8QQ9, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B0);
		}

		// class UBTTask_PlaySound : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0078);
		}

		// class UBTTask_PushPawnAction : public UBTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0078);
		}

		// class UBTTask_RotateToFaceBBEntry : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_ZCY6, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A0);
		}

		// class UBTTask_RunBehavior : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0078);
		}

		// class UBTTask_RunBehaviorDynamic : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0088);
		}

		// class UBTTask_RunEQSQuery : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_8JSZ, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_XS04, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_UZDM, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0150);
		}

		// class UBTTask_SetTagCooldown : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_1SM4, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0080);
		}

		// class UBTTask_Wait : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0078);
		}

		// class UBTTask_WaitBlackboardTime : public UBTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A0);
		}

		// class UCrowdAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// class UCrowdManager : public UCrowdManagerBase
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_DOJI, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F0);
		}

		// class ADetourCrowdAIController : public AAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0328);
		}

		// class UEnvQuery : public UDataAsset
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0048);
		}

		// class UEnvQueryContext : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// class UEnvQueryContext_BlueprintBase : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_DU4R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// class UEnvQueryContext_Item : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// class UEnvQueryContext_Querier : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// class UEnvQueryDebugHelpers : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// class UEnvQueryGenerator_ActorsOfClass : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00D0);
		}

		// class UEnvQueryGenerator_BlueprintBase : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_AANC, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0080);
		}

		// class UEnvQueryGenerator_Composite : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_1ABQ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0070);
		}

		// class UEnvQueryGenerator_ProjectedPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0080);
		}

		// class UEnvQueryGenerator_Cone : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_PC6I, 0x0169);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0170);
		}

		// class UEnvQueryGenerator_CurrentLocation : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0058);
		}

		// class UEnvQueryGenerator_Donut : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_N9M6, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_7JD7, 0x01C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01D0);
		}

		// class UEnvQueryGenerator_OnCircle : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_W1D4, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_HUA0, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_SX4Y, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_OFKS, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x0210);
		}

		// class UEnvQueryGenerator_SimpleGrid : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00F8);
		}

		// class UEnvQueryGenerator_PathingGrid : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0170);
		}

		// class UEnvQueryInstanceBlueprintWrapper : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_J6C8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_MIBX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_VO4G, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0078);
		}

		// class UEnvQueryItemType : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_T0Y1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// class UEnvQueryItemType_VectorBase : public UEnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// class UEnvQueryItemType_ActorBase : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// class UEnvQueryItemType_Actor : public UEnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// class UEnvQueryItemType_Direction : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// class UEnvQueryItemType_Point : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// class UEnvQueryManager : public UAISubsystem
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_Q6H3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_APYS, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_OBO8, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0140);
		}

		// class UEnvQueryOption : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// class UEnvQueryTest_Distance : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_9QW0, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x0208);
		}

		// class UEnvQueryTest_Dot : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_ABZU, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0240);
		}

		// class UEnvQueryTest_GameplayTags : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_0SVW, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0268);
		}

		// class UEnvQueryTest_Overlap : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x0218);
		}

		// class UEnvQueryTest_Pathfinding : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_G5Y6, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0280);
		}

		// class UEnvQueryTest_PathfindingBatch : public UEnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x02B8);
		}

		// class UEnvQueryTest_Project : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x0228);
		}

		// class UEnvQueryTest_Random : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01F8);
		}

		// class UEnvQueryTest_Trace : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x02D8);
		}

		// class UEnvQueryTest_Volume : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Volume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeContext, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeClass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, UnknownData_VZZ2, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Volume, 0x0210);
		}

		// class UEnvQueryTypes : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// class UEQSQueryResultSourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// class UEQSRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_XQ35, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0430);
		}

		// class UGenericTeamAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// class AGridPathAIController : public AAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0328);
		}

		// class UGridPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_XDDP, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x0288);
		}

		// class UNavFilter_AIControllerDefault : public UNavigationQueryFilter
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0048);
		}

		// class ANavLinkProxy : public AActor
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_H9U5, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_9RPK, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x0270);
		}

		// class UNavLocalGridManager : public UObject
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_6H37, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0058);
		}

		// class UPathFollowingManager : public UObject
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0028);
		}

		// class UPawnAction : public UObject
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_KKY1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_OBQE, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x0098);
		}

		// class UPawnAction_BlueprintBase : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x0098);
		}

		// class UPawnAction_Move : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_U1PJ, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00E8);
		}

		// class UPawnAction_Repeat : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_GNZF, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00B8);
		}

		// class UPawnAction_Sequence : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_TVZQ, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_ICNV, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C0);
		}

		// class UPawnAction_Wait : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_RP2A, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00A8);
		}

		// class UPawnActionsComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_LOOL, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x00E8);
		}

		// class UPawnSensingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_1XY7, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x00F8);
		}

		// class UVisualLoggerExtension : public UObject
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// class UInputBehavior : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehavior, UnknownData_X19P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehavior, 0x0030);
		}

		// class UAnyButtonInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__AnyButtonInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyButtonInputBehavior, UnknownData_09G0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyButtonInputBehavior, 0x0080);
		}

		// class UInteractiveGizmoBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoBuilder, 0x0028);
		}

		// class UAxisAngleGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmoBuilder, 0x0028);
		}

		// class UInteractiveGizmo : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, UnknownData_H832, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, InputBehaviors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmo, 0x0038);
		}

		// class UAxisAngleGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_RF0Q, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AngleSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, bInInteraction, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_U4L5, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartAngle, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurAngle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_825Q, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmo, 0x00F0);
		}

		// class UAxisPositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmoBuilder, 0x0028);
		}

		// class UAxisPositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_FL9I, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bInInteraction, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_CDOZ, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartPoint, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurPoint, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartParameter, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurParameter, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSign, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_V46D, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmo, 0x00D8);
		}

		// class UGizmoConstantAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, UnknownData_JFZG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Direction, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantAxisSource, 0x0048);
		}

		// class UGizmoConstantFrameAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantFrameAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, UnknownData_LIBM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Direction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantFrameAxisSource, 0x0060);
		}

		// class UGizmoWorldAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoWorldAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, UnknownData_MRQK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, AxisIndex, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoWorldAxisSource, 0x0040);
		}

		// class UGizmoComponentAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_0TW7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, AxisIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, bLocalAxes, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_Z2ME, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentAxisSource, 0x0040);
		}

		// class UInteractiveToolPropertySet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_QTMY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, CachedProperties, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, bIsPropertySetEnabled, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_D9RH, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolPropertySet, 0x0050);
		}

		// class UBrushBaseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__InteractiveToolsFramework__BrushBaseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bSpecifyRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_H7IG, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushStrength, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushFalloffAmount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowStrength, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowFalloff, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_AVWD, 0x0066);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBaseProperties, 0x0068);
		}

		// class UInteractiveTool : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_HSL6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, InputBehaviors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, ToolPropertyObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_0YCU, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveTool, 0x0080);
		}

		// class USingleSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleSelectionTool, UnknownData_PUV4, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleSelectionTool, 0x0088);
		}

		// class UMeshSurfacePointTool : public USingleSelectionTool
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointTool, UnknownData_L0DF, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointTool, 0x00C0);
		}

		// class UBaseBrushTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__InteractiveToolsFramework__BaseBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, bInBrushStroke, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_U1OE, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, LastBrushStamp, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_QDCF, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, PropertyClass, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushStampIndicator, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBrushTool, 0x01B8);
		}

		// class UBrushStampIndicatorBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicatorBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicatorBuilder, 0x0028);
		}

		// class UBrushStampIndicator : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushFalloff, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushNormal, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawIndicatorLines, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawRadiusCircle, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawFalloffCircle, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_9YAZ, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SampleStepCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDepthTested, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawSecondaryLines, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_X0SH, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineThickness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_DPTW, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, AttachedComponent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_IE07, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicator, 0x00B0);
		}

		// class UClickDragInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_UKEN, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, bUpdateModifiersDuringDrag, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_RD99, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragInputBehavior, 0x0140);
		}

		// class ULocalClickDragInputBehavior : public UClickDragInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__LocalClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalClickDragInputBehavior, UnknownData_QQJA, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalClickDragInputBehavior, 0x0280);
		}

		// class UInteractiveToolBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolBuilder, 0x0028);
		}

		// class UClickDragToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragToolBuilder, 0x0028);
		}

		// class UClickDragTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragTool, UnknownData_M0N9, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragTool, 0x0088);
		}

		// class AInternalToolFrameworkActor : public AActor
		TEST_METHOD(Class__InteractiveToolsFramework__InternalToolFrameworkActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInternalToolFrameworkActor, 0x0220);
		}

		// class AGizmoActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGizmoActor, 0x0220);
		}

		// class UGizmoBaseComponent : public UPrimitiveComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, Color, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, HoverSizeMultiplier, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, PixelHitDistanceThreshold, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, UnknownData_97MY, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseComponent, 0x0410);
		}

		// class UGizmoArrowComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Direction, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Gap, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Length, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Thickness, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, UnknownData_QL8D, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoArrowComponent, 0x0430);
		}

		// class UGizmoBoxComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Origin, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_V8IN, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Rotation, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Dimensions, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, LineThickness, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bRemoveHiddenLines, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bEnableAxisFlip, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_IUP8, 0x0442);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBoxComponent, 0x0450);
		}

		// class UGizmoCircleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoCircleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Normal, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Radius, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Thickness, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, NumSides, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bViewAligned, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bOnlyAllowFrontFacingHits, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, UnknownData_HB44, 0x042A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoCircleComponent, 0x0430);
		}

		// class UGizmoTransformSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformSource, 0x0028);
		}

		// class UGizmoAxisSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisSource, 0x0028);
		}

		// class UGizmoClickTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoClickTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoClickTarget, 0x0028);
		}

		// class UGizmoStateTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoStateTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoStateTarget, 0x0028);
		}

		// class UGizmoFloatParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoFloatParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoFloatParameterSource, 0x0028);
		}

		// class UGizmoVec2ParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoVec2ParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoVec2ParameterSource, 0x0028);
		}

		// class UGizmoLineHandleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLineHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Normal, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, HandleSize, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Thickness, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Direction, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Length, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, bImageScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, UnknownData_XBKL, 0x0435);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLineHandleComponent, 0x0440);
		}

		// class UGizmoRectangleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoRectangleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionX, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionY, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetX, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetY, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthX, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthY, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, Thickness, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, SegmentFlags, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, UnknownData_DLQB, 0x043D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoRectangleComponent, 0x0440);
		}

		// class UGizmoLambdaHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaHitTarget, UnknownData_D4UQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaHitTarget, 0x00B0);
		}

		// class UGizmoComponentHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_F5MY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_9DAR, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentHitTarget, 0x0080);
		}

		// class UInputBehaviorSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehaviorSet, Behaviors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSet, 0x0038);
		}

		// class UInputBehaviorSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSource, 0x0028);
		}

		// class UInputRouter : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputRouter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnHover, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnCapture, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_M5J0, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, ActiveInputBehaviors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_C57B, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputRouter, 0x00B0);
		}

		// class UInteractionMechanic : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionMechanic, UnknownData_I2YY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionMechanic, 0x0030);
		}

		// class UInteractiveGizmoManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_UMWR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, ActiveGizmos, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_GV6N, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, GizmoBuilders, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_2EG2, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoManager, 0x00B8);
		}

		// class UToolContextTransactionProvider : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolContextTransactionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolContextTransactionProvider, 0x0028);
		}

		// class UInteractiveToolManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_GR1I, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveLeftTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveRightTool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_E239, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ToolBuilders, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_XYV6, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolManager, 0x0138);
		}

		// class UToolFrameworkComponent : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolFrameworkComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolFrameworkComponent, 0x0028);
		}

		// class UInteractiveToolsContext : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolsContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, UnknownData_NANB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, InputRouter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, GizmoManager, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManagerClass, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolsContext, 0x0098);
		}

		// class AIntervalGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, UpIntervalComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, DownIntervalComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, ForwardIntervalComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIntervalGizmoActor, 0x0238);
		}

		// class UIntervalGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoBuilder, UnknownData_FDHR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmoBuilder, 0x00C0);
		}

		// class UIntervalGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, StateTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_CCNP, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, TransformProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveComponents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveGizmos, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_AFYS, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisYSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisZSource, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_6SJ4, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmo, 0x0130);
		}

		// class UGizmoBaseFloatParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseFloatParameterSource, UnknownData_40UM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseFloatParameterSource, 0x0048);
		}

		// class UGizmoAxisIntervalParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisIntervalParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, FloatParameterSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MinParameter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MaxParameter, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisIntervalParameterSource, 0x0060);
		}

		// class UKeyAsModifierInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__KeyAsModifierInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyAsModifierInputBehavior, UnknownData_5LES, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyAsModifierInputBehavior, 0x0110);
		}

		// class UMeshSurfacePointToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointToolBuilder, UnknownData_X663, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointToolBuilder, 0x0030);
		}

		// class UMouseHoverBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MouseHoverBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseHoverBehavior, UnknownData_N2X1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHoverBehavior, 0x0098);
		}

		// class UMultiClickSequenceInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MultiClickSequenceInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiClickSequenceInputBehavior, UnknownData_40NL, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiClickSequenceInputBehavior, 0x0130);
		}

		// class UMultiSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__MultiSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiSelectionTool, UnknownData_QCK2, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiSelectionTool, 0x0090);
		}

		// class UGizmoLocalFloatParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, LastChange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, UnknownData_C7IT, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalFloatParameterSource, 0x0058);
		}

		// class UGizmoBaseVec2ParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseVec2ParameterSource, UnknownData_IQBW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseVec2ParameterSource, 0x0048);
		}

		// class UGizmoLocalVec2ParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, LastChange, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalVec2ParameterSource, 0x0060);
		}

		// class UGizmoAxisTranslationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_J43V, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_60CZ, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisTranslationParameterSource, 0x0110);
		}

		// class UGizmoPlaneTranslationParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_AR83, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, LastChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationNormal, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_LOAI, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneTranslationParameterSource, 0x0130);
		}

		// class UGizmoAxisRotationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisRotationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, Angle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, LastChange, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationOrigin, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_XUO0, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisRotationParameterSource, 0x00C0);
		}

		// class UGizmoUniformScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoUniformScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, LastChange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleNormal, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisY, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, UnknownData_TZCW, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, InitialTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoUniformScaleParameterSource, 0x00F0);
		}

		// class UGizmoAxisScaleParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, LastChange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleAxis, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisScaleParameterSource, 0x00C0);
		}

		// class UGizmoPlaneScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_VZ5N, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, ScaleMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, Parameter, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, LastChange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleOrigin, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleNormal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisX, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_6RKX, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneScaleParameterSource, 0x0130);
		}

		// class UPlanePositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmoBuilder, 0x0028);
		}

		// class UPlanePositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_YQF7, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipX, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipY, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bInInteraction, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionNormal, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartParameter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurParameter, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSigns, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_AG4N, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmo, 0x0100);
		}

		// class USelectionSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__SelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectionSet, UnknownData_RZEV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectionSet, 0x0040);
		}

		// class UMeshSelectionSet : public USelectionSet
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Vertices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Edges, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Faces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Groups, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionSet, 0x0080);
		}

		// class USingleClickInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_HRJ6, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, HitTestOnRelease, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_61UZ, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickInputBehavior, 0x0130);
		}

		// class USingleClickToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickToolBuilder, 0x0028);
		}

		// class USingleClickTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickTool, UnknownData_YSPQ, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickTool, 0x0088);
		}

		// class UGizmoNilStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoNilStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoNilStateTarget, UnknownData_GM5N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoNilStateTarget, 0x0030);
		}

		// class UGizmoLambdaStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaStateTarget, UnknownData_WJ8H, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaStateTarget, 0x00B0);
		}

		// class UGizmoObjectModifyStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoObjectModifyStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoObjectModifyStateTarget, UnknownData_5911, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoObjectModifyStateTarget, 0x0058);
		}

		// class UGizmoTransformChangeStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformChangeStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_NR58, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, TransactionManager, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_T9VA, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformChangeStateTarget, 0x00E0);
		}

		// class ATransformGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateY, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateZ, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateYZ, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXZ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXY, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateY, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateZ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, UniformScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleY, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleZ, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleYZ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXY, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformGizmoActor, 0x02A0);
		}

		// class UTransformGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoBuilder, UnknownData_IZ4M, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmoBuilder, 0x00C0);
		}

		// class UTransformGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_WRLV, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveTarget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldGrid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bUseContextCoordinateSystem, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_6GTG, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CurrentCoordinateSystem, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_HNLC, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_HXNR, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, NonuniformScaleComponents, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveGizmos, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_FQUS, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CameraAxisSource, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisXSource, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisYSource, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisZSource, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisXSource, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisYSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisZSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, StateTarget, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ScaledTransformSource, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_JOYM, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmo, 0x0180);
		}

		// class UTransformProxy : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__TransformProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_XWKJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bRotatePerObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bSetPivotMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_CBTK, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, SharedTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, InitialSharedTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformProxy, 0x00F0);
		}

		// class UGizmoBaseTransformSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseTransformSource, UnknownData_DAP9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseTransformSource, 0x0048);
		}

		// class UGizmoComponentWorldTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentWorldTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, Component, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, bModifyComponentOnTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, UnknownData_I2AC, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentWorldTransformSource, 0x0058);
		}

		// class UGizmoScaledTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoScaledTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, ChildTransformSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, UnknownData_40OI, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoScaledTransformSource, 0x00E0);
		}

		// class UGizmoTransformProxyTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformProxyTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformProxyTransformSource, Proxy, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformProxyTransformSource, 0x0050);
		}

		// class UBP_Buckler_RightStabMotion_C : public UBP_Shield_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Buckler_RightStabMotion__BP_Buckler_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Buckler_RightStabMotion_C, 0x1108);
		}

		// class UBP_ShieldAnimationProfileBuckler_C : public UBP_MeleeWeaponAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShieldAnimationProfileBuckler__BP_ShieldAnimationProfileBuckler_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShieldAnimationProfileBuckler_C, 0x00C0);
		}

		// class UBP_Polehammer_Head2_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Head2__BP_Polehammer_Head2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Head2_C, 0x0078);
		}

		// class UBP_Polehammer_Head1_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Head1__BP_Polehammer_Head1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Head1_C, 0x0078);
		}

		// class ABP_RoundShield_C : public ABP_MordhauShield_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RoundShield__BP_RoundShield_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RoundShield_C, 0x1C48);
		}

		// class UInAppPurchaseComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeap__InAppPurchaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, InAppPurchaseLogMessage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsSuccess, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsFailure, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationSuccess, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationFailure, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistorySuccess, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistoryFailure, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, UnknownData_KIJG, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseComponent, 0x0128);
		}

		// class ULuminApplicationLifecycleComponent : public UApplicationLifecycleComponent
		TEST_METHOD(Class__MagicLeap__LuminApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceHasReactivatedDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillEnterRealityModeDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillGoInStandbyDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusLostDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusGainedDelegate, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminApplicationLifecycleComponent, 0x0190);
		}

		// class UMagicLeapHeadTrackingNotificationsComponent : public UVRNotificationsComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapHeadTrackingNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingLost, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecovered, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecoveryFailed, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingNewSessionStarted, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, UnknownData_KS1X, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHeadTrackingNotificationsComponent, 0x01D0);
		}

		// class UMagicLeapHMDFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapHMDFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHMDFunctionLibrary, 0x0028);
		}

		// class UMagicLeapMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_6EPU, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, OnMeshTrackerUpdated, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, ScanWorld, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MeshType, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_PKXZ, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BoundingVolume, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, LevelOfDetail, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_M8BU, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, PerimeterOfGapsToFill, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, Planarize, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_E8F6, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, DisconnectedSectionArea, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestNormals, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestVertexConfidence, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorMode, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_U120, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BlockVertexColors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RemoveOverlappingTriangles, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_51O1, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MRMesh, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BricksPerFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_PAZW, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshTrackerComponent, 0x0280);
		}

		// class UMagicLeapSettings : public UObject
		TEST_METHOD(Class__MagicLeap__MagicLeapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bEnableZI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseVulkanForZI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseMLAudioForZI, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, UnknownData_83P3, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSettings, 0x0030);
		}

		// class UMagicLeapMeshBlockSelectorInterface : public UInterface
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshBlockSelectorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshBlockSelectorInterface, 0x0028);
		}

		// class UMagicLeapRaycastComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapRaycastComponent, UnknownData_PDPZ, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastComponent, 0x0118);
		}

		// class UMagicLeapRaycastFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastFunctionLibrary, 0x0028);
		}

		// class UMagicLeapControllerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapController__MagicLeapControllerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapControllerFunctionLibrary, 0x0028);
		}

		// class UMagicLeapTouchpadGesturesComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapController__MagicLeapTouchpadGesturesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_KHCB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureStart, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureContinue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureEnd, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_3J15, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapTouchpadGesturesComponent, 0x0140);
		}

		// class UBP_Englishman_C : public UCharacterVoice
		TEST_METHOD(BlueprintGeneratedClass__BP_Englishman__BP_Englishman_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Englishman_C, 0x00A0);
		}

		// class UBP_CruelKnight_C : public UCharacterVoice
		TEST_METHOD(BlueprintGeneratedClass__BP_CruelKnight__BP_CruelKnight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CruelKnight_C, 0x00A0);
		}

		// class UBP_PeasantPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PeasantPerk__BP_PeasantPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PeasantPerk_C, 0x0068);
		}

		// class UBP_MaleFace02Scar_C : public UCharacterFace
		TEST_METHOD(BlueprintGeneratedClass__BP_MaleFace02Scar__BP_MaleFace02Scar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MaleFace02Scar_C, 0x01D8);
		}

		// class UBP_MaleFace02GoldTeeth_C : public UCharacterFace
		TEST_METHOD(BlueprintGeneratedClass__BP_MaleFace02GoldTeeth__BP_MaleFace02GoldTeeth_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MaleFace02GoldTeeth_C, 0x01D8);
		}

		// class UBP_Fleur3_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Fleur3__BP_Fleur3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Fleur3_C, 0x0060);
		}

		// class UBP_ModDownloadDialog_C : public UMordhauDialog
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ModDownloadDialog__BP_ModDownloadDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, BP_OneButtonDialog, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, Loading, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, TextBlock_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, WidgetSwitcher_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, AllModsRequired, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, AllModsRequiredFileSizes, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, PreviouslyDownloadedRequiredMods, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, DownloadCompleted, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, AllModsRequiredToModFileMap, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, CurrentDownloaded, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, TotalDownloadSize, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, RemainingDownload, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, UnknownData_PCMR, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, CurrentlyInstalledModsToLastModFileMap, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, AllModsInstalled, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, Finished, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, Canceled, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, UnknownData_CBU0, 0x038B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, DownloadCanceled, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, DownloadFailed, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, DOWNLOADING, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, UnknownData_RQM8, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModDownloadDialog_C, CurrentlyGettingModInfoIdx, 0x03B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ModDownloadDialog_C, 0x03B8);
		}

		// class UAppleImageUtilsBaseAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AppleImageUtils__AppleImageUtilsBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_ONUI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_CGIF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, ConversionResult, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_46NV, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, 0x0088);
		}

		// class UAppleImageInterface : public UInterface
		TEST_METHOD(Class__AppleImageUtils__AppleImageInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageInterface, 0x0028);
		}

		// class UWheeledVehicleMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_9UX9, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_JR51, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_JQXA, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_7Z5F, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_C7I0, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_5XEJ, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_BQO6, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_MVAV, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, OverrideController, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x0290);
		}

		// class USimpleWheeledVehicleMovementComponent : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x0290);
		}

		// class UTireConfig : public UDataAsset
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_7N6G, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_39AX, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0050);
		}

		// class UVehicleAnimInstance : public UAnimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_GVC4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_P4ZK, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_KPLO, 0x0978);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x0980);
		}

		// class UVehicleWheel : public UObject
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_V6QX, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_B2LW, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_KN1M, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_KK5O, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_4ZC0, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_3NTZ, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F0);
		}

		// class AWheeledVehicle : public APawn
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x0290);
		}

		// class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0408);
		}

		// class USoundfieldEncodingSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEncodingSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEncodingSettingsBase, 0x0028);
		}

		// class UAudioEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__AudioEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEndpointSettingsBase, 0x0028);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// class USoundModulationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundModulationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundModulationPluginSourceSettingsBase, 0x0028);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// class USoundfieldEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSettingsBase, 0x0028);
		}

		// class USoundfieldEffectSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectSettingsBase, 0x0028);
		}

		// class USoundfieldEffectBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEffectBase, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectBase, 0x0030);
		}

		// class UBP_MetalDetailColor24_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor24__BP_MetalDetailColor24_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor24_C, 0x0078);
		}

		// class UBP_MetalDetailColor20_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor20__BP_MetalDetailColor20_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor20_C, 0x0078);
		}

		// class UBP_MetalDetailColor2_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor2__BP_MetalDetailColor2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor2_C, 0x0078);
		}

		// class UBP_LeatherColor6_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor6__BP_LeatherColor6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor6_C, 0x0078);
		}

		// class UBP_LeatherColor5_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor5__BP_LeatherColor5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor5_C, 0x0078);
		}

		// class UBP_LeatherColor13_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor13__BP_LeatherColor13_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor13_C, 0x0078);
		}

		// class UBP_LeatherColor12_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor12__BP_LeatherColor12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor12_C, 0x0078);
		}

		// class UBP_LeatherColor11_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor11__BP_LeatherColor11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor11_C, 0x0078);
		}

		// class UBP_BunMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_BunMale01__BP_BunMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BunMale01_C, 0x0078);
		}

		// class UBP_BraidUndercutMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_BraidUndercutMale01__BP_BraidUndercutMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BraidUndercutMale01_C, 0x0078);
		}

		// class UBP_FriendlyMuttonchopsMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_FriendlyMuttonchopsMale01__BP_FriendlyMuttonchopsMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FriendlyMuttonchopsMale01_C, 0x0078);
		}

		// class UBP_HomeScreen_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_HomeScreen__BP_HomeScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, ShowNews, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, HideNews, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, BP_PartyMembers, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, Image_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, Image_5, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, Image_7, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, Image_9, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, InviteButton, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, InviteButtonContainer, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, LeavePartyButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, Overlay_9, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, SizeBox_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, TextBlock_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, TextBlock_15, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, ToggleNewsButton, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, WebBrowser_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, GameInstance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, bIsNewsVisible, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, UnknownData_FCZV, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, ContentSwitcher, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, PlayerRank, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, PlayerBanner, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, UnknownData_5PCY, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, PlayerProfile, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, ProfileChanged, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, UnknownData_NX0D, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, GoldCompensationDialog, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, MainMenu, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HomeScreen_C, RankDisplayType, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HomeScreen_C, 0x03C1);
		}

		// class UBP_1HParryMotion_C : public UBP_ParryMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_1HParryMotion__BP_1HParryMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_1HParryMotion_C, 0x0570);
		}

		// class UBP_Ladder1H_LeftStabMotion_C : public UBP_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Ladder1H_LeftStabMotion__BP_Ladder1H_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Ladder1H_LeftStabMotion_C, 0x1108);
		}

		// class UBP_TargetInfo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TargetInfo__BP_TargetInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, BP_CasualRankDiamond, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, HeadText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, HorizontalBox_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, Image_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, Image_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, Overlay_RankIndicator, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, ProgressBar_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, ProgressBar_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, SizeBox_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, TargetNameText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, TextBlock_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, VerticalBox_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, TargetName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, TargetDistance, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, Interval, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, Color, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, SpectatingPlayer, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, UnknownData_G672, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, TargetTeam, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, LastPlayerState, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, CanMute, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, IsAlive, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, UnknownData_HAO7, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, Health, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, Stamina, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, IsDestructible, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, HasBuilder, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, isPlayer, 0x02E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TargetInfo_C, isFreeCam, 0x02E7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TargetInfo_C, 0x02E8);
		}

		// class UBTTask_PickupItem_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_PickupItem__BTTask_PickupItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PickupItem_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PickupItem_C, TargetItem, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PickupItem_C, 0x00D8);
		}

		// class UBP_BodyCustomization_C : public UBP_CustomizationTab_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BodyCustomization__BP_BodyCustomization_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, UnknownData_ALCK, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, Button_1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, Button_2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, Button_3, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, Button_4, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, Button_5, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, CheckBox_3, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, EntryCheckbox, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, FatSlider, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, Image_2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, SkinColorPicker, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, SkinnySlider, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BodyCustomization_C, StrongSlider, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BodyCustomization_C, 0x0398);
		}

		// class UBP_CustomizationPreview_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CustomizationPreview__BP_CustomizationPreview_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, Image_482, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, OnDrag, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, OnMouseWheelScrolling, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, OnMouseAxis, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, OnLMBPressed, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, OnLMBReleased, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, OnRMBPressed, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, OnRMBReleased, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, OnMMBPressed, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, OnMMBReleased, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, StoredMousePosition, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, CatchLMB, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, CatchMMB, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, UnknownData_9JFT, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, OnKeyPressed, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, HasMouseOver, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationPreview_C, MoveRecursionStop, 0x02F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CustomizationPreview_C, 0x02F2);
		}

		// class UBP_ScoreboardEntry_C : public UBP_ScoreboardEntryParent_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ScoreboardEntry__BP_ScoreboardEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, UnknownData_9KSL, 0x037F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, BP_CasualRankDiamond, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, BP_RankIcon, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, Button_1, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, Image_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, Image_6, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, Image_14, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, Image_50, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, Image_NameIcon, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, Overlay_10, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, RankIconContainer, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, SizeBox_8, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, SizeBox_10, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, SizeBox_11, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, SizeBox_UserIcon, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, TextBlock_787, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, TextBlock_788, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, TextBlock_789, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, TextBlock_790, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, TextBlock_791, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, TextBlock_792, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, WidgetSwitcher_1, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, BackgroundColor, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, HighlightedBackgroundColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, DeadNameColor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntry_C, AliveNameColor, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScoreboardEntry_C, 0x04A0);
		}

		// class UBP_KeyBindingsSettings_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_KeyBindingsSettings__BP_KeyBindingsSettings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ApplyAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ApplyButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Battlecry, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Choose1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Choose2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Choose3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Choose4, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Choose5, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Choose6, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Choose7, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Choose8, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Choose9, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ChooseExitHidden, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ControlsButton, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Crouch, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, CycleCamera, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Drop, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, EquipSlot1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, EquipSlot2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, EquipSlot3, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, EquipSlot4, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, EquipSlot5, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, EquipSlot6, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, EquipSlot7, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, EquipSlot8, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, EquipSlot9, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Feint, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, FeintOrParry, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Fire, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, FlipAttackSide, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Holster, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Jump, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Kick, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, LeftLowerStrike, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, LeftStab, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, LeftStrike, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, LeftUpperStrike, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, LookDown, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, LookUp, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, LowerCatapultArm, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, MoveBackward, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, MoveForward, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, MoveLeft, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, MoveRight, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, MuteTarget, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, NextEquipment, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Parry, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, PreviousEquipment, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, PrimarySpectatorAction, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, RaiseCatapultArm, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, RangedCancel, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ResetButton, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, RightLowerStrike, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, RightStab, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, RightStrike, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, RightUpperStrike, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ScrollBox_2, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, SecondarySpectatorAction, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ShowChat, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ShowConsole, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ShowEmoteMenu, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ShowMainMenuHidden, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ShowProfileSelect, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ShowScoreboard, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ShowTeamChat, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ShowTeamSelect, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ShowVoiceMenu, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, SkipDialog, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, SpectatorFlyDown, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, SpectatorFlyUp, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Sprint, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Stab, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Strike, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Suicide, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, TertiarySpectatorAction, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, TextBlock_14, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, ToggleUIMarkers, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, TurnLeft, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, TurnRight, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, Use, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, VoteNo, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, VoteYes, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, WeaponModeReload, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, SelectedWidget, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, NoneKey, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, BindingWidgets, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, DuplicateWidget, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingsSettings_C, DuplicateBindingDialog, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KeyBindingsSettings_C, 0x0558);
		}

		// class UBP_VeteransPauldronsTrim_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransPauldronsTrim__BP_VeteransPauldronsTrim_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransPauldronsTrim_C, 0x01A0);
		}

		// class UBP_Tips_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Tips__BP_Tips_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tips_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tips_C, Blink, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tips_C, Background, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tips_C, Border_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tips_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tips_C, Image_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tips_C, RichTextBlock_1, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tips_C, 0x0268);
		}

		// class UBP_TwoTeamSelect_C : public UBP_TeamSelect_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TwoTeamSelect__BP_TwoTeamSelect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, AutoAssignButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, Button_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, CloseButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, Image_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, Image_9, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, Image_195, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, Image_196, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, Image_197, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, spectateIcon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, SpectatorButton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, Team1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, Team2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, TextBlock_30, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamSelect_C, TextBlock_34, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TwoTeamSelect_C, 0x02A8);
		}

		// class UBP_MutedPlayerEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MutedPlayerEntry__BP_MutedPlayerEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MutedPlayerEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MutedPlayerEntry_C, Button, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MutedPlayerEntry_C, Image_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MutedPlayerEntry_C, TextBlock_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MutedPlayerEntry_C, Chatbox_Ref, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MutedPlayerEntry_C, Hover_Tooltip_Text, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MutedPlayerEntry_C, Player, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MutedPlayerEntry_C, 0x02D0);
		}

		// class UBP_Horse1H_RightStabMotion_C : public UBP_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Horse1H_RightStabMotion__BP_Horse1H_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Horse1H_RightStabMotion_C, 0x1108);
		}

		// class UBP_ThumbsDown_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_ThumbsDown__BP_ThumbsDown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ThumbsDown_C, 0x0130);
		}

		// class UBP_PointBack_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_PointBack__BP_PointBack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PointBack_C, 0x0130);
		}

		// class UBP_ParryMotion_C : public UParryMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_ParryMotion__BP_ParryMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ParryMotion_C, 0x0570);
		}

		// class UBP_AbilityMotion_C : public UMordhauMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_AbilityMotion__BP_AbilityMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AbilityMotion_C, 0x00A0);
		}

		// class UBP_HairColor20_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor20__BP_HairColor20_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor20_C, 0x0078);
		}

		// class UBP_HairColor2_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor2__BP_HairColor2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor2_C, 0x0078);
		}

		// class UBP_HairColor19_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor19__BP_HairColor19_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor19_C, 0x0078);
		}

		// class UBP_HairColor15_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor15__BP_HairColor15_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor15_C, 0x0078);
		}

		// class UBP_FurColor4_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor4__BP_FurColor4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor4_C, 0x0078);
		}

		// class UBP_FurColor14_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor14__BP_FurColor14_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor14_C, 0x0078);
		}

		// class UBP_FurColor13_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor13__BP_FurColor13_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor13_C, 0x0078);
		}

		// class UBP_FurColor1_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor1__BP_FurColor1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor1_C, 0x0078);
		}

		// class UBP_SubNavButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SubNavButton__BP_SubNavButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, BP_ButtonPrompt, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, BP_ButtonPrompt_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, SubNavButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, SubNavButtonText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, Text, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, OnClick, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, ContentSwitcher, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, BoundWidget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, IsArmorySubTab, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, IsHordeBRCustomization, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, isSelected, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SubNavButton_C, Hide_tab_on_console, 0x0293);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SubNavButton_C, 0x0294);
		}

		// class UBP_2HSword_LeftStrikeMotion_C : public UBP_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2HSword_LeftStrikeMotion__BP_2HSword_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2HSword_LeftStrikeMotion_C, 0x1160);
		}

		// class UBP_NavButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_NavButton__BP_NavButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, BP_ButtonPrompt, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, BP_ButtonPrompt_C_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, IconSlot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, NavButton, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, NavText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, Text, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, OnClick, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, SubNavSwitcher, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, BoundWidget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, Icon, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, IconVisibility, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, UnknownData_2L9T, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, IconPadding, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, IconNeutralColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, IconPressedColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, UnknownData_G8GS, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, MainMenu, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, isSelected, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, HideLeftPrompt, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NavButton_C, HideRightPrompt, 0x02E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavButton_C, 0x02E3);
		}

		// class UBP_OneTeamSelectEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_OneTeamSelectEntry__BP_OneTeamSelectEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, ClickedAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, HoverAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, Banner, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, Button, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, GlowInside, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, GlowOutside, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, HoverFire, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, Image_7, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, Image_8, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, Team1Canvas, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, team1Players_H_Box, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, TextBlock_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, TextBlock_7, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, TextBlock_94, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, Team, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, UnknownData_0QO5, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, TeamSelectWidget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, PlayerEntries, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, TeamColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, TeamImageBrush, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, Players, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, TotalTeams, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, UnknownData_IX18, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, TeamImageBrushBig, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, NormalRibbon, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, DisabledRibbon, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, HoveredRibbon, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, IsHovered_2, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, IsEnabled, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelectEntry_C, isOnThisTeam, 0x059A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_OneTeamSelectEntry_C, 0x059B);
		}

		// class UBP_PlayerBanner_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PlayerBanner__BP_PlayerBanner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerBanner_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerBanner_C, BannerImage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerBanner_C, Image_Size, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerBanner_C, 0x0248);
		}

		// class UBP_PlayerAvatar_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PlayerAvatar__BP_PlayerAvatar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatar_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatar_C, AvatarImage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatar_C, DefaultAvatar, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatar_C, Image_Size, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatar_C, bRequestingInfo, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatar_C, UnknownData_2ZBX, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatar_C, Player, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerAvatar_C, 0x02B8);
		}

		// class UBP_TwoTeamScoreboard_C : public UBP_Scoreboard_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TwoTeamScoreboard__BP_TwoTeamScoreboard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, UnknownData_TD10, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, FadeOut, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, FadeIn, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Image_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Image_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Image_3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Image_4, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Image_5, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Image_6, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Image_9, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Image_10, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Image_11, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Image_12, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Image_13, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, SizeBox_11, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, SizeBox_5841, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, t1Score_Text, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Team1, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, Team2, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_5, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_6, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_14, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_15, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_16, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_17, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_18, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_19, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_20, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_21, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_22, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_23, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TwoTeamScoreboard_C, TextBlock_24, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TwoTeamScoreboard_C, 0x0380);
		}

		// class AM_WidgetPanel_Inst_C : public ABP_PommelProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__M_WidgetPanel_Inst__M_WidgetPanel_Inst_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AM_WidgetPanel_Inst_C, 0x07D0);
		}

		// class UBP_EquipmentDisplay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EquipmentDisplay__BP_EquipmentDisplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Border_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, BP_ButtonPrompt, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, BP_ButtonPrompt_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, HorizontalBox_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, HorizontalBox_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, NextHintText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, PrevHintText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Slot1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Slot2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Slot3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Slot4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Slot5, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Slot6, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Slot7, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Slot8, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Slot9, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Showing, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, UnknownData_UHJJ, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, ShowStart, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, SlotArray, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, PreviousSlotOccupants, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplay_C, Hint_Text, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EquipmentDisplay_C, 0x02F8);
		}

		// class UBP_DefeatPopup_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_DefeatPopup__BP_DefeatPopup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, ExitAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, EntryAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, BackGlow, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, CanvasPanel_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, Image_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, LensFlare, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, PrimaryHeader, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, SecondaryHeader, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, TextGlow, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, Primary_Text, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, Secondary_Text, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DefeatPopup_C, Showing_Popup, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DefeatPopup_C, 0x02B1);
		}

		// class UBP_Crosshair_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Crosshair__BP_Crosshair_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, DamageTakenAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, HitmarkerAnim_Legs, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, HitmarkerAnim_Headshot_X, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, HitmarkerAnim_Torso_X, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, HitmarkerAnim_Torso, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, HitmarkerAnim_Headshot_old, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, HitmarkerAnim_Headshot, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, ShieldEntryAnim, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, HitmarkerAnim, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, HitmarkerAnim_old, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, AngleIndicator, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, AngleIndicatorContainer, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, BottomLeft, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, BottomRight, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, BP_CircleTimer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, BP_StatePopupText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, DamageIndicator, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, DamageIndicatorContainer, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, Dot, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, DotContainer, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, HitmarkerContainer, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, Left, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, MeleeCrosshairContainer, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, Overlay_1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, RangeDot, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, RangeDotContainer, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, Right, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, ShieldContainer, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, ShieldFill, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, ShieldOutline, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, TopLeft, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, TopRight, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, Crosshair_Dot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, Crosshair_Dot_Outline, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, CrosshairMode, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, UnknownData_TMA3, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, TargetInfo, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, LastCrosshairTypeSettings, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, ShieldContainerVisible, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, AngleIndicatorVisible, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Crosshair_C, MeleeDotVisible, 0x045E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Crosshair_C, 0x045F);
		}

		// class UBP_HussarPeltRegular_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarPeltRegular__BP_HussarPeltRegular_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarPeltRegular_C, 0x01A0);
		}

		// class UBP_SkinItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SkinItem__BP_SkinItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SkinItem_C, Image_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SkinItem_C, TextBlock_2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SkinItem_C, ModNumber, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SkinItem_C, 0x0244);
		}

		// class UBP_ArmorSkinMod_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmorSkinMod__BP_ArmorSkinMod_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorSkinMod_C, ArmorModInfos, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmorSkinMod_C, 0x0038);
		}

		// class UBP_SupporterGauntlets_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SupporterGauntlets__BP_SupporterGauntlets_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SupporterGauntlets_C, 0x01A0);
		}

		// class UBP_VeteransArmoredGlovesSingle_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransArmoredGlovesSingle__BP_VeteransArmoredGlovesSingle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransArmoredGlovesSingle_C, 0x01A0);
		}

		// class ABP_RandomProfileDoll_C : public ABP_CharacterDoll_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RandomProfileDoll__BP_RandomProfileDoll_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RandomProfileDoll_C, UberGraphFrame, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RandomProfileDoll_C, CurrentProfileStored, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RandomProfileDoll_C, RerolledFrame, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RandomProfileDoll_C, SkippedFirstFrame, 0x1394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RandomProfileDoll_C, HasStoredProfile, 0x1395);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RandomProfileDoll_C, 0x1396);
		}

		// class UBP_Eisenhut_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Eisenhut__BP_Eisenhut_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Eisenhut_C, 0x01C8);
		}

		// class UBP_FootsoldierGorget_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FootsoldierGorget__BP_FootsoldierGorget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FootsoldierGorget_C, 0x01A0);
		}

		// class UBP_ShortSwordCurvedGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortSwordCurvedGuard__BP_ShortSwordCurvedGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortSwordCurvedGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortSwordCurvedGuard_C, 0x0080);
		}

		// class UBP_ShortSwordSegmentedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortSwordSegmentedHandle__BP_ShortSwordSegmentedHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortSwordSegmentedHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortSwordSegmentedHandle_C, 0x0080);
		}

		// class UBP_Shield_LeftStrikeMotion_C : public UBP_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shield_LeftStrikeMotion__BP_Shield_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shield_LeftStrikeMotion_C, 0x1160);
		}

		// class UBP_HorseShield_RightStrikeMotion_C : public UBP_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HorseShield_RightStrikeMotion__BP_HorseShield_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HorseShield_RightStrikeMotion_C, 0x1160);
		}

		// class ABP_Tier3LegsPickup_C : public ABP_LegsPickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier3LegsPickup__BP_Tier3LegsPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tier3LegsPickup_C, 0x0408);
		}

		// class ABP_Tier2HelmetPickup_C : public ABP_HelmetPickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier2HelmetPickup__BP_Tier2HelmetPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tier2HelmetPickup_C, 0x0408);
		}

		// class UBP_VikingSword_CrudeBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingSword_CrudeBlade__BP_VikingSword_CrudeBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VikingSword_CrudeBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingSword_CrudeBlade_C, 0x0080);
		}

		// class UBP_VikingSword_EngravedHilt_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingSword_EngravedHilt__BP_VikingSword_EngravedHilt_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VikingSword_EngravedHilt_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingSword_EngravedHilt_C, 0x0080);
		}

		// class UBP_Shortspear_ViperShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shortspear_ViperShaft__BP_Shortspear_ViperShaft_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shortspear_ViperShaft_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shortspear_ViperShaft_C, 0x0080);
		}

		// class UBP_SpanishKettle_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SpanishKettle__BP_SpanishKettle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SpanishKettle_C, 0x01C8);
		}

		// class UBP_PeasantLeatherShoes_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PeasantLeatherShoes__BP_PeasantLeatherShoes_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PeasantLeatherShoes_C, 0x01A0);
		}

		// class UAnimSharingStateInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingStateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, AnimationToPlay, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PermutationTimeOffset, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PlayRate, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, bStateBool, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_DNJ5, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, Instance, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_K4PP, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingStateInstance, 0x0290);
		}

		// class UAnimSharingTransitionInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingTransitionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, FromComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, ToComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, BlendTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, bBlendBool, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, UnknownData_46Y2, 0x027D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingTransitionInstance, 0x0280);
		}

		// class UAnimSharingAdditiveInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingAdditiveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, BaseComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, AdditiveAnimation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, Alpha, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, bStateBool, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, UnknownData_SG1U, 0x027D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingAdditiveInstance, 0x0280);
		}

		// class UAnimSharingInstance : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimSharingInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, RegisteredActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_3009, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateProcessor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_RINS, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UsedAnimationSequences, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_HO4I, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateEnum, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, SharingActor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_K8S0, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingInstance, 0x0138);
		}

		// class UAnimationSharingManager : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, Skeletons, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, PerSkeletonData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, UnknownData_XCNA, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingManager, 0x0088);
		}

		// class UAnimationSharingSetup : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, SkeletonSetups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, ScalabilitySettings, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingSetup, 0x0048);
		}

		// class UAnimationSharingStateProcessor : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingStateProcessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingStateProcessor, AnimationStateEnum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingStateProcessor, 0x0050);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_73AX, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_GS2T, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_KGJ3, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_8GZ2, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_ZSLJ, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E0);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_24GD, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, bIsEvalDisabled, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_DT9E, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0058);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0058);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, PrecompiledEvaluationTemplate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bPlayableDirectly, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_NL30, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0348);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_AP8E, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_LHGD, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_RGFY, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_P2XY, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_M6Q2, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_MMEK, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, NetSyncProps, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackClient, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_PVRJ, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x0888);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_IIWX, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0158);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0068);
		}

		// class UMovieSceneCustomClockSource : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneCustomClockSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCustomClockSource, 0x0028);
		}

		// class UMovieScenePlaybackClient : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePlaybackClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePlaybackClient, 0x0028);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, BindingGroups, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_E2JD, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CustomClockSourcePath, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MarkedFrames, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0148);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_UXLS, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0090);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_QCDI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_J7I5, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_1DB7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_XT31, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_8DHE, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0070);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E0);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0350);
		}

		// class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSubTrack, SectionArray, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubTrack, 0x0078);
		}

		// class UTestMovieSceneSubSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubSection, 0x0158);
		}

		// class UMovieSceneGeometryCacheSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0120);
		}

		// class UMovieSceneGeometryCacheTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0068);
		}

		// class UTemplateSequence : public UMovieSceneSequence
		TEST_METHOD(Class__TemplateSequence__TemplateSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundPreviewActor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorComponents, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequence, 0x03F0);
		}

		// class UCameraAnimationSequence : public UTemplateSequence
		TEST_METHOD(Class__TemplateSequence__CameraAnimationSequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimationSequence, 0x03F0);
		}

		// class ATemplateSequenceActor : public AActor
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_1X47, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, PlaybackSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_JFUM, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, SequencePlayer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, TemplateSequence, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, BindingOverride, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_CC2F, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATemplateSequenceActor, 0x0270);
		}

		// class UTemplateSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__TemplateSequence__TemplateSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequencePlayer, UnknownData_LPKP, 0x0888);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequencePlayer, 0x0890);
		}

		// class UTemplateSequenceSection : public UMovieSceneSubSection
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSection, 0x0158);
		}

		// class UTemplateSequenceTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceTrack, 0x0068);
		}

		// class UBP_ItalianHarness_C : public UBP_Tier3LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ItalianHarness__BP_ItalianHarness_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItalianHarness_C, 0x01B8);
		}

		// class UBP_maulBohemian_RivetedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maulBohemian_RivetedHandle__BP_maulBohemian_RivetedHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maulBohemian_RivetedHandle_C, 0x0078);
		}

		// class UBP_maulBohemian_GargoyleHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maulBohemian_GargoyleHead__BP_maulBohemian_GargoyleHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maulBohemian_GargoyleHead_C, 0x0078);
		}

		// class UBP_waraxe_double_WhiskerHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_waraxe_double_WhiskerHead__BP_waraxe_double_WhiskerHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_waraxe_double_WhiskerHead_C, 0x0078);
		}

		// class UBP_CourtMinstrelsLute_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CourtMinstrelsLute__BP_CourtMinstrelsLute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CourtMinstrelsLute_C, 0x0078);
		}

		// class UDividedLongbow_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__DividedLongbow__DividedLongbow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDividedLongbow_C, 0x0078);
		}

		// class UDefaultLongbow_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__DefaultLongbow__DefaultLongbow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLongbow_C, 0x0078);
		}

		// class UBP_LongbowQuiver_C : public UQuiver
		TEST_METHOD(BlueprintGeneratedClass__BP_LongbowQuiver__BP_LongbowQuiver_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongbowQuiver_C, 0x0070);
		}

		// class UBP_HeavyHandaxe_SiegeEngineersHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeavyHandaxe_SiegeEngineersHead__BP_HeavyHandaxe_SiegeEngineersHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeavyHandaxe_SiegeEngineersHead_C, 0x0078);
		}

		// class UBP_HeavyHandaxe_ReinforcedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeavyHandaxe_ReinforcedHandle__BP_HeavyHandaxe_ReinforcedHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeavyHandaxe_ReinforcedHandle_C, 0x0078);
		}

		// class UBP_HeavyHandaxe_LordsSpike_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeavyHandaxe_LordsSpike__BP_HeavyHandaxe_LordsSpike_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeavyHandaxe_LordsSpike_C, 0x0078);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_SWU6, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0140);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, PlayerIndex, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, Hand, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_MQG7, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_4XVY, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_VWI6, 0x0406);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_H013, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_0PMR, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x04B0);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_AD55, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// class UXRLoadingScreenFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRLoadingScreenFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRLoadingScreenFunctionLibrary, 0x0028);
		}

		// class ULuminRuntimeSettings : public UObject
		TEST_METHOD(Class__LuminRuntimeSettings__LuminRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, PackageName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ApplicationDisplayName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, FrameTimingHint, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bProtectedContent, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bManualCallToAppReady, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseMobileRendering, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseVulkan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_O6MZ, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, Certificate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconModelPath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconPortalPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedIconInfos, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VersionCode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, MinimumAPILevel, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, AppPrivileges, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentSubElements, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentElements, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SpatializationPlugin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ReverbPlugin, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, OcclusionPlugin, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SoundCueCookQualityIndex, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bRemoveDebugInfo, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_NR6K, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VulkanValidationLayerLibs, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bFrameVignette, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_U4CB, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedAppNames, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_DSDM, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminRuntimeSettings, 0x0148);
		}

		// class UBP_Knight01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Knight01__BP_Knight01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Knight01_C, 0x0060);
		}

		// class UBP_DivineExplosive_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_DivineExplosive__BP_DivineExplosive_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DivineExplosive_C, 0x0060);
		}

		// class UBP_dc2_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_dc2__BP_dc2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_dc2_C, 0x0060);
		}

		// class UBP_Crest01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Crest01__BP_Crest01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Crest01_C, 0x0060);
		}

		// class UBP_Blank_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Blank__BP_Blank_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Blank_C, 0x0060);
		}

		// class UBP_SkinColor3_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_SkinColor3__BP_SkinColor3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SkinColor3_C, 0x0078);
		}

		// class UBP_PlateColor8_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor8__BP_PlateColor8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor8_C, 0x0078);
		}

		// class UBP_PlateColor7_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor7__BP_PlateColor7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor7_C, 0x0078);
		}

		// class UBP_PlateColor17_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor17__BP_PlateColor17_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor17_C, 0x0078);
		}

		// class UBP_PlateColor13_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor13__BP_PlateColor13_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor13_C, 0x0078);
		}

		// class UBP_PlateColor12_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor12__BP_PlateColor12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor12_C, 0x0078);
		}

		// class UBOT_Marauder_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Marauder__BOT_Marauder_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Marauder_C, 0x0108);
		}

		// class UBOT_Berserk_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Berserk__BOT_Berserk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Berserk_C, 0x0108);
		}

		// class UBP_King_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_King__BP_King_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_King_C, 0x0060);
		}

		// class UBP_Peekaboo_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Peekaboo_Banner__BP_Peekaboo_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Peekaboo_Banner_C, 0x0060);
		}

		// class UBP_PonyTailMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_PonyTailMale02__BP_PonyTailMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PonyTailMale02_C, 0x0078);
		}

		// class UBP_BunMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_BunMale02__BP_BunMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BunMale02_C, 0x0078);
		}

		// class UBP_BraidUndercutMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_BraidUndercutMale02__BP_BraidUndercutMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BraidUndercutMale02_C, 0x0078);
		}

		// class UBP_BaldHair_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_BaldHair__BP_BaldHair_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BaldHair_C, 0x0078);
		}

		// class UBP_CasualRankDiamond_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CasualRankDiamond__BP_CasualRankDiamond_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankDiamond_C, BottomHalf, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankDiamond_C, Diamond, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankDiamond_C, RankText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankDiamond_C, TopHalf, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankDiamond_C, Rank, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankDiamond_C, RankTextColor, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankDiamond_C, TopHalfColor, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankDiamond_C, BottomHalfColor, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankDiamond_C, FillColor, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CasualRankDiamond_C, 0x0294);
		}

		// class UBP_ToolboxWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ToolboxWidget__BP_ToolboxWidget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ToolboxWidget_C, 0x0230);
		}

		// class UBP_EquipmentWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EquipmentWidget__BP_EquipmentWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentWidget_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentWidget_C, Amount, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentWidget_C, Image, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentWidget_C, Image_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentWidget_C, Image_127, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentWidget_C, Name, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentWidget_C, Overlay_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentWidget_C, Reason, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentWidget_C, WidgetSwitcher_1, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EquipmentWidget_C, 0x0278);
		}

		// class ABP_Ladder_C : public ABP_MordhauActor_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Ladder__BP_Ladder_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, DroppedMesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, LadderMesh, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, LadderExit, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, LadderEnd, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, LadderStart, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, Movers, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, LadderState, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, UnknownData_XNI6, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, LadderStateChangeTime, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, UnknownData_461G, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, DroppedMeshTransform, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, CanDropAndRaise, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, StartAsRaised, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, UnknownData_7D07, 0x0402);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, RaiseCurve, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, DropCurve, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, RaiseDuration, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, DropDuration, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, FallIgnoreActors, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, InteractInstigator, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ladder_C, DropDamage, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Ladder_C, 0x043C);
		}

		// class UBP_KeyBindingElementWidget_C : public UBP_SettingEntryParent_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_KeyBindingElementWidget__BP_KeyBindingElementWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, UnknownData_WKL0, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, ActionText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, PrimaryKeyButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, PrimaryKeyText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, SecondaryKeyButton, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, SecondaryKeyText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, ParentWidget, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, bIsAxis, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, UnknownData_J0W2, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, Bindings, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, NoneKey, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, ActionName, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, bIsEditingPrimary, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, bIsEditingSecondary, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, UnknownData_UU6E, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, PrimaryBindings, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, SecondaryBindings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KeyBindingElementWidget_C, bIsConsoleKey, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KeyBindingElementWidget_C, 0x02D1);
		}

		// class UBP_CreditsDevEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CreditsDevEntry__BP_CreditsDevEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CreditsDevEntry_C, NameText, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CreditsDevEntry_C, Overlay_6, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CreditsDevEntry_C, TitleText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CreditsDevEntry_C, Title, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CreditsDevEntry_C, Name, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CreditsDevEntry_C, 0x0270);
		}

		// class UBP_ColorPicker_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ColorPicker__BP_ColorPicker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPicker_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPicker_C, Border, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPicker_C, ImageButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPicker_C, ColorPickerContainer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPicker_C, Colors, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPicker_C, OnColorClicked, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPicker_C, SelectedIndex, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPicker_C, UnknownData_WYVA, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPicker_C, OnColorHovered, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ColorPicker_C, OnColorPickerClosed, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ColorPicker_C, 0x0298);
		}

		// class UBP_Group3v3GameModeMetadata_C : public UGameModeMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_Group3v3GameModeMetadata__BP_Group3v3GameModeMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Group3v3GameModeMetadata_C, 0x00D0);
		}

		// class UBP_FrontlineGameModeMetadata_C : public UGameModeMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_FrontlineGameModeMetadata__BP_FrontlineGameModeMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FrontlineGameModeMetadata_C, 0x00D0);
		}

		// class UBP_CustomizationTab_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CustomizationTab__BP_CustomizationTab_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationTab_C, CustomizationItemEntries, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationTab_C, ItemChoosingOriginalId, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationTab_C, UnknownData_DEP1, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationTab_C, ItemChoosingOriginalProfile, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationTab_C, SelectionEntriesTitle, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationTab_C, ProfileWrapper, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationTab_C, ProfileCustomization, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationTab_C, SelectedId, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CustomizationTab_C, 0x032C);
		}

		// class UBP_CoatOfPlates_ChestLow_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CoatOfPlates_ChestLow__BP_CoatOfPlates_ChestLow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CoatOfPlates_ChestLow_C, 0x01A0);
		}

		// class UBP_Leather_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Leather_Arms__BP_Leather_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Leather_Arms_C, 0x01B8);
		}

		// class UBP_Gothic_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Gothic_Arms__BP_Gothic_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gothic_Arms_C, 0x01B8);
		}

		// class UBP_Footsoldier_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Footsoldier_Arms__BP_Footsoldier_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Footsoldier_Arms_C, 0x01B8);
		}

		// class UBP_Lamellar_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Lamellar_Arms__BP_Lamellar_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Lamellar_Arms_C, 0x01B8);
		}

		// class ABP_InGoreMeshBlunt_C : public ABP_BaseGoreMesh_C
		TEST_METHOD(BlueprintGeneratedClass__BP_InGoreMeshBlunt__BP_InGoreMeshBlunt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_InGoreMeshBlunt_C, 0x0240);
		}

		// class UBP_Cloth7_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth7__BP_Cloth7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth7_C, 0x0078);
		}

		// class UBP_Cloth5_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth5__BP_Cloth5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth5_C, 0x0078);
		}

		// class UBP_Cloth43_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth43__BP_Cloth43_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth43_C, 0x0078);
		}

		// class UBP_Cloth38_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth38__BP_Cloth38_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth38_C, 0x0078);
		}

		// class UBP_Cloth25_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth25__BP_Cloth25_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth25_C, 0x0078);
		}

		// class UBP_Cloth2_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth2__BP_Cloth2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth2_C, 0x0078);
		}

		// class UBP_Cloth13_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth13__BP_Cloth13_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth13_C, 0x0078);
		}

		// class UBP_Brigandine_Gloves_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Brigandine_Gloves__BP_Brigandine_Gloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Brigandine_Gloves_C, 0x01A0);
		}

		// class UBP_GermanSalletHelmPlumeRR_C : public UBP_GermanSalletBuffet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletHelmPlumeRR__BP_GermanSalletHelmPlumeRR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletHelmPlumeRR_C, 0x01C8);
		}

		// class UBP_Italian_Gauntlets1x2_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Italian_Gauntlets1x2__BP_Italian_Gauntlets1x2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Italian_Gauntlets1x2_C, 0x01A0);
		}

		// class UBP_VikingHelmet2_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingHelmet2__BP_VikingHelmet2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingHelmet2_C, 0x01C8);
		}

		// class UBP_conicfacemask_painted_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_conicfacemask_painted__BP_conicfacemask_painted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_conicfacemask_painted_C, 0x01C8);
		}

		// class UBP_LandsknechtHatNoFeather_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LandsknechtHatNoFeather__BP_LandsknechtHatNoFeather_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LandsknechtHatNoFeather_C, 0x01C8);
		}

		// class UBP_Rapier_GallantGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rapier_GallantGuard__BP_Rapier_GallantGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rapier_GallantGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rapier_GallantGuard_C, 0x0080);
		}

		// class UBP_Rapier_SmallcupGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rapier_SmallcupGuard__BP_Rapier_SmallcupGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rapier_SmallcupGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rapier_SmallcupGuard_C, 0x0080);
		}

		// class UBP_Bardiche_HeadsmanBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bardiche_HeadsmanBlade__BP_Bardiche_HeadsmanBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bardiche_HeadsmanBlade_C, 0x0078);
		}

		// class UBP_Bardiche_MilitaryShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bardiche_MilitaryShaft__BP_Bardiche_MilitaryShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bardiche_MilitaryShaft_C, 0x0078);
		}

		// class UBP_HeaterShieldPartJousting_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeaterShieldPartJousting__BP_HeaterShieldPartJousting_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeaterShieldPartJousting_C, 0x0078);
		}

		// class UBP_Greatsword_AcademyHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_AcademyHandle__BP_Greatsword_AcademyHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Greatsword_AcademyHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_AcademyHandle_C, 0x0080);
		}

		// class UBP_BattleAxe_BerzerkerHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BattleAxe_BerzerkerHead__BP_BattleAxe_BerzerkerHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BattleAxe_BerzerkerHead_C, 0x0078);
		}

		// class UBP_BattleAxe_ErgonomicShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BattleAxe_ErgonomicShaft__BP_BattleAxe_ErgonomicShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BattleAxe_ErgonomicShaft_C, 0x0078);
		}

		// class UBP_Battleaxe_guardian_head03_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Battleaxe_guardian_head03__BP_Battleaxe_guardian_head03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Battleaxe_guardian_head03_C, 0x0078);
		}

		// class UBP_Poleaxe_RascalShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_RascalShaft__BP_Poleaxe_RascalShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_RascalShaft_C, 0x0078);
		}

		// class UBP_Poleaxe_WeaselHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_WeaselHead__BP_Poleaxe_WeaselHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_WeaselHead_C, 0x0078);
		}

		// class UBP_ArmingSword_MercenaryBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_MercenaryBlade__BP_ArmingSword_MercenaryBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_MercenaryBlade_C, 0x0078);
		}

		// class UBP_VikingSword_CordGrip_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingSword_CordGrip__BP_VikingSword_CordGrip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VikingSword_CordGrip_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingSword_CordGrip_C, 0x0080);
		}

		// class UBP_ZweihanderCommander_BohemianGrip_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ZweihanderCommander_BohemianGrip__BP_ZweihanderCommander_BohemianGrip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ZweihanderCommander_BohemianGrip_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ZweihanderCommander_BohemianGrip_C, 0x0080);
		}

		// class UBP_ZweihanderCommander_FireblitzBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ZweihanderCommander_FireblitzBlade__BP_ZweihanderCommander_FireblitzBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ZweihanderCommander_FireblitzBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ZweihanderCommander_FireblitzBlade_C, 0x0080);
		}

		// class UBP_ZweihanderCommander_ReinforcedStraightGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ZweihanderCommander_ReinforcedStraightGuard__BP_ZweihanderCommander_ReinforcedStraightGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ZweihanderCommander_ReinforcedStraightGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ZweihanderCommander_ReinforcedStraightGuard_C, 0x0080);
		}

		// class UBP_ZweihanderCommander_SilverWireGrip_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ZweihanderCommander_SilverWireGrip__BP_ZweihanderCommander_SilverWireGrip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ZweihanderCommander_SilverWireGrip_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ZweihanderCommander_SilverWireGrip_C, 0x0080);
		}

		// class ABP_Zweihander_C : public ABP_TwoHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Zweihander__BP_Zweihander_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Zweihander_C, 0x1C28);
		}

		// class UBP_Shortspear_NakedShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shortspear_NakedShaft__BP_Shortspear_NakedShaft_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shortspear_NakedShaft_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shortspear_NakedShaft_C, 0x0080);
		}

		// class UBP_FeitoriaAltOverride_C : public UMapMetadataOverride
		TEST_METHOD(BlueprintGeneratedClass__BP_FeitoriaAltOverride__BP_FeitoriaAltOverride_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FeitoriaAltOverride_C, 0x0098);
		}

		// class UAutomationUtilsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutomationUtils__AutomationUtilsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationUtilsBlueprintLibrary, 0x0028);
		}

		// class UBP_CharacterCameraComponent_C : public UBP_MordhauCameraComponent_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CharacterCameraComponent__BP_CharacterCameraComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CharacterCameraComponent_C, 0x09A0);
		}

		// class UFlinchShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__FlinchShake__FlinchShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlinchShake_C, 0x0160);
		}

		// class ABP_MordhauAIController_C : public AMordhauAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauAIController__BP_MordhauAIController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauAIController_C, UberGraphFrame, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauAIController_C, PerceivesEnemyKey, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauAIController_C, PerceivesAllyKey, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauAIController_C, MoveDestinationKey, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauAIController_C, TargetLocationKey, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauAIController_C, BehaviorTree, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauAIController_C, LastPossessedCharacter, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauAIController_C, 0x0638);
		}

		// class UBP_NavArea_Ladder_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__BP_NavArea_Ladder__BP_NavArea_Ladder_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavArea_Ladder_C, 0x0048);
		}

		// class UBP_CoatOfPlatesChestLeather_C : public UBP_Tier1UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CoatOfPlatesChestLeather__BP_CoatOfPlatesChestLeather_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CoatOfPlatesChestLeather_C, 0x01E8);
		}

		// class UBP_ClothLongArms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ClothLongArms__BP_ClothLongArms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ClothLongArms_C, 0x01B8);
		}

		// class UBP_Horse1HAnimationProfile_C : public UBP_MeleeWeaponAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Horse1HAnimationProfile__BP_Horse1HAnimationProfile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Horse1HAnimationProfile_C, 0x00C0);
		}

		// class UBP_FullBeardMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_FullBeardMale02__BP_FullBeardMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FullBeardMale02_C, 0x0078);
		}

		// class UBP_Bretache_skull_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bretache_skull__BP_Bretache_skull_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bretache_skull_C, 0x01C8);
		}

		// class UBP_VanguardsKettleBuffetStraps_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VanguardsKettleBuffetStraps__BP_VanguardsKettleBuffetStraps_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VanguardsKettleBuffetStraps_C, 0x01C8);
		}

		// class UBP_EnclosedFlatTop_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_EnclosedFlatTop__BP_EnclosedFlatTop_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EnclosedFlatTop_C, 0x01C8);
		}

		// class UBP_VeteransBarbuteTrim_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransBarbuteTrim__BP_VeteransBarbuteTrim_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransBarbuteTrim_C, 0x01C8);
		}

		// class UBP_BishopsMantle_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BishopsMantle__BP_BishopsMantle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BishopsMantle_C, 0x01C8);
		}

		// class UBP_ArmingSword_ConvexRainguard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_ConvexRainguard__BP_ArmingSword_ConvexRainguard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_ConvexRainguard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_ConvexRainguard_C, 0x0080);
		}

		// class UBP_WorkersVest_C : public UBP_Tier0UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WorkersVest__BP_WorkersVest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WorkersVest_C, 0x01E8);
		}

		// class UBP_PaintedHussarChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PaintedHussarChest__BP_PaintedHussarChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PaintedHussarChest_C, 0x01E8);
		}

		// class UBP_PaintedFlutedChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PaintedFlutedChest__BP_PaintedFlutedChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PaintedFlutedChest_C, 0x01E8);
		}

		// class UBP_PaintedPaddedChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PaintedPaddedChest__BP_PaintedPaddedChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PaintedPaddedChest_C, 0x01E8);
		}

		// class ABP_RockProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RockProjectile__BP_RockProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RockProjectile_C, 0x07C4);
		}

		// class ABP_Bandage_C : public AMordhauEquipment
		TEST_METHOD(BlueprintGeneratedClass__BP_Bandage__BP_Bandage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bandage_C, UnknownData_EJAN, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bandage_C, UberGraphFrame, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bandage_C, HealAmount, 0x0CD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bandage_C, 0x0CDC);
		}

		// class UBP_StabMotion_C : public UStabMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_StabMotion__BP_StabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StabMotion_C, 0x1108);
		}

		// class UBP_StatEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StatEntry__BP_StatEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatEntry_C, StatEntry, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatEntry_C, TextBlock_77, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatEntry_C, TextBlock_78, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatEntry_C, Name, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatEntry_C, Value, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatEntry_C, UnknownData_0OZ8, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatEntry_C, Tooltip_Text, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatEntry_C, StatName, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StatEntry_C, 0x0290);
		}

		// class UBP_EquipmentDisplayEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EquipmentDisplayEntry__BP_EquipmentDisplayEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, PickupAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, Background, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, Border_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, Border_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, BP_ButtonPrompt, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, Image_5, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, SlotNumber, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, WeaponName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, SlotIdx, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, ActionName, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentDisplayEntry_C, Selected, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EquipmentDisplayEntry_C, 0x0285);
		}

		// class UBP_PauldronsChain_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PauldronsChain__BP_PauldronsChain_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PauldronsChain_C, 0x01A0);
		}

		// class UBP_VeteransPauldronsPartialAsym_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransPauldronsPartialAsym__BP_VeteransPauldronsPartialAsym_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransPauldronsPartialAsym_C, 0x01A0);
		}

		// class UBP_HACK_Emote_Pommelthrow_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_HACK_Emote_Pommelthrow__BP_HACK_Emote_Pommelthrow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HACK_Emote_Pommelthrow_C, 0x0130);
		}

		// class ABP_WoodSplash_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodSplash__BP_WoodSplash_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WoodSplash_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WoodSplash_C, ParticleSystem, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WoodSplash_C, 0x0230);
		}

		// class UBP_BotProfile_C : public UBotProfile
		TEST_METHOD(BlueprintGeneratedClass__BP_BotProfile__BP_BotProfile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BotProfile_C, 0x0108);
		}

		// class UBOTBEHAVIOR_Boloncd_C : public UBP_BotBehaviorProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOTBEHAVIOR_Boloncd__BOTBEHAVIOR_Boloncd_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOTBEHAVIOR_Boloncd_C, 0x00E0);
		}

		// class UBP_MailSleeveOverPlate_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MailSleeveOverPlate__BP_MailSleeveOverPlate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MailSleeveOverPlate_C, 0x01B8);
		}

		// class UBP_HussarPeltSnow_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarPeltSnow__BP_HussarPeltSnow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarPeltSnow_C, 0x01A0);
		}

		// class UBP_Decorated_Morrion_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Decorated_Morrion__BP_Decorated_Morrion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Decorated_Morrion_C, 0x01C8);
		}

		// class UBP_MailleHoodSpikedLowered_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MailleHoodSpikedLowered__BP_MailleHoodSpikedLowered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MailleHoodSpikedLowered_C, 0x01C8);
		}

		// class UBP_ArchersHat_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArchersHat__BP_ArchersHat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArchersHat_C, 0x01C8);
		}

		// class UBP_GreathelmCloakPaint_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GreathelmCloakPaint__BP_GreathelmCloakPaint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GreathelmCloakPaint_C, 0x01C8);
		}

		// class UBP_falchion_CurvedGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_falchion_CurvedGuard__BP_falchion_CurvedGuard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_falchion_CurvedGuard_C, 0x0078);
		}

		// class UBP_falchion_WideBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_falchion_WideBlade__BP_falchion_WideBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_falchion_WideBlade_C, 0x0078);
		}

		// class UBP_Mace_BatonHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Mace_BatonHandle__BP_Mace_BatonHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Mace_BatonHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mace_BatonHandle_C, 0x0080);
		}

		// class UBP_Mace_MetalHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Mace_MetalHandle__BP_Mace_MetalHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Mace_MetalHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mace_MetalHandle_C, 0x0080);
		}

		// class UBP_Axe_RaiderHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Axe_RaiderHead__BP_Axe_RaiderHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Axe_RaiderHead_C, 0x0078);
		}

		// class UBP_Greatsword_FighterHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_FighterHandle__BP_Greatsword_FighterHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Greatsword_FighterHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_FighterHandle_C, 0x0080);
		}

		// class UBP_1HAnimationProfile_Mace_C : public UBP_1HAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_1HAnimationProfile_Mace__BP_1HAnimationProfile_Mace_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_1HAnimationProfile_Mace_C, 0x00C0);
		}

		// class UBP_Warhammer_BarHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_BarHandle__BP_Warhammer_BarHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_BarHandle_C, 0x0078);
		}

		// class UBP_CuirassierChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CuirassierChest__BP_CuirassierChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CuirassierChest_C, 0x01E8);
		}

		// class UBP_PeasantPants_C : public UBP_Tier0LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PeasantPants__BP_PeasantPants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PeasantPants_C, 0x01B8);
		}

		// class UBP_Tier2LegsWearable_C : public UBP_LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier2LegsWearable__BP_Tier2LegsWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier2LegsWearable_C, 0x01B8);
		}

		// class UBP_Falx_CarvingBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Falx_CarvingBlade__BP_Falx_CarvingBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Falx_CarvingBlade_C, 0x0078);
		}

		// class UBP_Falx_CarvedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Falx_CarvedHandle__BP_Falx_CarvedHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Falx_CarvedHandle_C, 0x0078);
		}

		// class UBP_VeteransGorgetTrim_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransGorgetTrim__BP_VeteransGorgetTrim_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransGorgetTrim_C, 0x01A0);
		}

		// class UBP_MailleHoodSpikedCoif_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MailleHoodSpikedCoif__BP_MailleHoodSpikedCoif_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MailleHoodSpikedCoif_C, 0x01A0);
		}

		// class ABP_CharacterCustomizationSpot_C : public ABP_BaseCustomizationSpot_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CharacterCustomizationSpot__BP_CharacterCustomizationSpot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CharacterCustomizationSpot_C, 0x0248);
		}

		// class ABP_MordhauProjectile_C : public AMordhauProjectile
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauProjectile__BP_MordhauProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauProjectile_C, UberGraphFrame, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauProjectile_C, FireDamage, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauProjectile_C, FireDuration, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauProjectile_C, FireTick, 0x07C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauProjectile_C, 0x07C4);
		}

		// class UBP_Tomato_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Tomato__BP_Tomato_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tomato_C, 0x0060);
		}

		// class UBP_Snake01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Snake01__BP_Snake01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Snake01_C, 0x0060);
		}

		// class UBP_ShortGambeson_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortGambeson__BP_ShortGambeson_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortGambeson_C, 0x01A0);
		}

		// class UBP_GermanSalletHelm_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletHelm__BP_GermanSalletHelm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletHelm_C, 0x01C8);
		}

		// class UBP_WorkersHood_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WorkersHood__BP_WorkersHood_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WorkersHood_C, 0x01C8);
		}

		// class UBP_BevoredSalletPainted_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BevoredSalletPainted__BP_BevoredSalletPainted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BevoredSalletPainted_C, 0x01C8);
		}

		// class UBP_messer_chopper_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_chopper__BP_messer_chopper_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_chopper_C, 0x0078);
		}

		// class UBP_messer_ModestGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_ModestGuard__BP_messer_ModestGuard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_ModestGuard_C, 0x0078);
		}

		// class UBP_messer_SwissSaber_blade2_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_SwissSaber_blade2__BP_messer_SwissSaber_blade2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_SwissSaber_blade2_C, 0x0078);
		}

		// class UBP_2hmace_SpikedBallHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2hmace_SpikedBallHead__BP_2hmace_SpikedBallHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2hmace_SpikedBallHead_C, 0x0078);
		}

		// class UBP_Billhook_ScorpionHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Billhook_ScorpionHead__BP_Billhook_ScorpionHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Billhook_ScorpionHead_C, 0x0078);
		}

		// class UBP_maul_BulkyHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maul_BulkyHandle__BP_maul_BulkyHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maul_BulkyHandle_C, 0x0078);
		}

		// class UBP_JavelinWarDart_DeltoidHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JavelinWarDart_DeltoidHead__BP_JavelinWarDart_DeltoidHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JavelinWarDart_DeltoidHead_C, 0x0078);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0370);
		}

		// class UActorSequenceComponent : public UActorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_P73B, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x00D8);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x0888);
		}

		// class UBP_Emblem_Purgatory_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Purgatory__BP_Emblem_Purgatory_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Purgatory_C, 0x0060);
		}

		// class UBP_Emblem_DukeStumpy_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_DukeStumpy__BP_Emblem_DukeStumpy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_DukeStumpy_C, 0x0060);
		}

		// class UBP_Emblem_Dailyreminder_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Dailyreminder__BP_Emblem_Dailyreminder_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Dailyreminder_C, 0x0060);
		}

		// class UBP_Emblem_CrippleKnight_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_CrippleKnight__BP_Emblem_CrippleKnight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_CrippleKnight_C, 0x0060);
		}

		// class UBP_GoldReward_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GoldReward__BP_GoldReward_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GoldReward_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GoldReward_C, GoldEntryAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GoldReward_C, GoldMergeAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GoldReward_C, CurrentGoldText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GoldReward_C, EarnedGoldText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GoldReward_C, Image_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GoldReward_C, Image_3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GoldReward_C, Image_4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GoldReward_C, TextBlock_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GoldReward_C, CurrentGold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GoldReward_C, EarnedGold, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GoldReward_C, 0x0280);
		}

		// class UBP_CasualRankWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CasualRankWidget__BP_CasualRankWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, BP_CurrentRankDiamond, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, BP_NextRankDiamond, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, CurrentXPText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, NextXPText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, RemainingXPText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, VerticalBox_20, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, XPProgressBar, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, DisplayedXPProgress, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, DisplayedRemainingXP, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, NextRank, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, Current_Rank, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CasualRankWidget_C, XPPercentage, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CasualRankWidget_C, 0x027C);
		}

		// class UBP_BasicShouldersTriangle_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BasicShouldersTriangle__BP_BasicShouldersTriangle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BasicShouldersTriangle_C, 0x01A0);
		}

		// class UBP_SegmentedPauldrons_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SegmentedPauldrons__BP_SegmentedPauldrons_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SegmentedPauldrons_C, 0x01A0);
		}

		// class UBP_LongSkirt_Cover_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LongSkirt_Cover__BP_LongSkirt_Cover_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongSkirt_Cover_C, 0x01A0);
		}

		// class ABP_PommelProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PommelProjectile__BP_PommelProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PommelProjectile_C, UnknownData_NLJJ, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PommelProjectile_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PommelProjectile_C, 0x07D0);
		}

		// class UBP_Dagger_BollocksGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Dagger_BollocksGuard__BP_Dagger_BollocksGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Dagger_BollocksGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Dagger_BollocksGuard_C, 0x0080);
		}

		// class UBP_MountainPeak64Override_C : public UMapMetadataOverride
		TEST_METHOD(BlueprintGeneratedClass__BP_MountainPeak64Override__BP_MountainPeak64Override_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountainPeak64Override_C, 0x0098);
		}

		// class UBP_CrossroadsMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_CrossroadsMapMetadata__BP_CrossroadsMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CrossroadsMapMetadata_C, 0x00A8);
		}

		// class UBP_Camp64Override_C : public UMapMetadataOverride
		TEST_METHOD(BlueprintGeneratedClass__BP_Camp64Override__BP_Camp64Override_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Camp64Override_C, 0x0098);
		}

		// class UBP_GambesonCoat_C : public UBP_Tier1UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GambesonCoat__BP_GambesonCoat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GambesonCoat_C, 0x01E8);
		}

		// class UBP_Estoc_DuelistBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Estoc_DuelistBlade__BP_Estoc_DuelistBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Estoc_DuelistBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Estoc_DuelistBlade_C, 0x0080);
		}

		// class UBP_KnightPauldrons1x3_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KnightPauldrons1x3__BP_KnightPauldrons1x3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KnightPauldrons1x3_C, 0x01A0);
		}

		// class UBP_VanguardsKettleBuffet_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VanguardsKettleBuffet__BP_VanguardsKettleBuffet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VanguardsKettleBuffet_C, 0x01C8);
		}

		// class UBP_PointyLeatherShoes_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PointyLeatherShoes__BP_PointyLeatherShoes_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PointyLeatherShoes_C, 0x01A0);
		}

		// class UBP_Tier3LegsWearable_C : public UBP_LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier3LegsWearable__BP_Tier3LegsWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier3LegsWearable_C, 0x01B8);
		}

		// class UBP_LeatherLamellarChest_C : public UBP_Tier1UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherLamellarChest__BP_LeatherLamellarChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherLamellarChest_C, 0x01E8);
		}

		// class UBP_Travelers_Boots_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Travelers_Boots__BP_Travelers_Boots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Travelers_Boots_C, 0x01A0);
		}

		// class UBP_BishopsMantleCoif_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BishopsMantleCoif__BP_BishopsMantleCoif_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BishopsMantleCoif_C, 0x01A0);
		}

		// class UBP_BishopsMantleCoifTightened_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BishopsMantleCoifTightened__BP_BishopsMantleCoifTightened_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BishopsMantleCoifTightened_C, 0x01A0);
		}

		// class UBP_ItalianSabaton_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ItalianSabaton__BP_ItalianSabaton_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItalianSabaton_C, 0x01A0);
		}

		// class UBP_ScoreboardEntryParent_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ScoreboardEntryParent__BP_ScoreboardEntryParent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Rank, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, UnknownData_2YLW, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Assists, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Score, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Deaths, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, PingInt, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, UnknownData_CBHK, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Ping, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Name, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Kills, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, PlayerState, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Highlight, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Dead, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Entry_Type, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, UnknownData_GCZB, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Index, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Refreshed, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Player, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, LastTextInputDialog, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, BanDuration, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, shouldRefresh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, UnknownData_846K, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, Team, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, ScoreValue, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, ModeratorBadge, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, DevBadge, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardEntryParent_C, User_Type, 0x037E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScoreboardEntryParent_C, 0x037F);
		}

		// class UDatasmithObjectTemplate : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithObjectTemplate, UnknownData_FAMW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0030);
		}

		// class UDatasmithActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Tags, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00D0);
		}

		// class UDatasmithAdditionalData : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithAdditionalData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAdditionalData, 0x0028);
		}

		// class ADatasmithAreaLightActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightShape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_8J1U, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Dimensions, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Intensity, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IntensityUnits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_Q5GZ, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Color, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Temperature, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, bUseIESBrightness, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_3RM2, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESBrightnessScale, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Rotation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceRadius, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceLength, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, AttenuationRadius, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightInnerAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightOuterAngle, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithAreaLightActor, 0x0278);
		}

		// class UDatasmithAreaLightActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_2NB3, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Color, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Intensity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IntensityUnits, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_LSMW, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Temperature, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, bUseIESBrightness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_FXL0, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESBrightnessScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Rotation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceRadius, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceLength, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, AttenuationRadius, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x00A0);
		}

		// class UDatasmithAssetImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0028);
		}

		// class UDatasmithStaticMeshImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0028);
		}

		// class UDatasmithStaticMeshCADImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0028);
		}

		// class UDatasmithSceneImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0028);
		}

		// class UDatasmithTranslatedSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithTranslatedSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithTranslatedSceneImportData, 0x0028);
		}

		// class UDatasmithCADImportSceneData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0028);
		}

		// class UDatasmithMDLSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0028);
		}

		// class UDatasmithGLTFSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithGLTFSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Version, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, UnknownData_T5G3, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Author, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, License, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Source, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithGLTFSceneImportData, 0x0070);
		}

		// class UDatasmithStaticMeshGLTFImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshGLTFImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshGLTFImportData, SourceMeshName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshGLTFImportData, 0x0038);
		}

		// class UDatasmithFBXSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithFBXSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bGenerateLightmapUVs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_KXJ9, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, TexturesDir, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, IntermediateSerialization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bColorizeMaterials, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_7JVR, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithFBXSceneImportData, 0x0048);
		}

		// class UDatasmithDeltaGenAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0028);
		}

		// class UDatasmithDeltaGenSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bRemoveInvisibleNodes, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bSimplifyNodeHierarchy, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportVar, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_E7YC, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, VarPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportPos, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_1ELI, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, PosPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportTml, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_PLTH, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, TmlPath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0090);
		}

		// class UDatasmithVREDAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0028);
		}

		// class UDatasmithVREDSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportMats, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_WCGG, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, MatsPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportVar, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bCleanVar, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_TLDM, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, VarPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportLightInfo, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_YJ8U, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, LightInfoPath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportClipInfo, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_G7H1, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, ClipInfoPath, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x00A8);
		}

		// class UDatasmithIFCSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithIFCSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithIFCSceneImportData, 0x0028);
		}

		// class UDatasmithStaticMeshIFCImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshIFCImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshIFCImportData, SourceGlobalId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshIFCImportData, 0x0038);
		}

		// class UDatasmithAssetUserData : public UAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, MetaData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0078);
		}

		// class UDatasmithCineCameraActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraActorTemplate, LookatTrackingSettings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraActorTemplate, 0x0060);
		}

		// class UDatasmithCineCameraComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_C2W1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x0090);
		}

		// class UDatasmithContentBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0028);
		}

		// class UDatasmithCustomActionBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithCustomActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCustomActionBase, UnknownData_N9NM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCustomActionBase, 0x0030);
		}

		// class ADatasmithImportedSequencesActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithImportedSequencesActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithImportedSequencesActor, ImportedSequences, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithImportedSequencesActor, 0x0230);
		}

		// class UDatasmithOptionsBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithOptionsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithOptionsBase, 0x0028);
		}

		// class UDatasmithCommonTessellationOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithCommonTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCommonTessellationOptions, Options, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCommonTessellationOptions, 0x0038);
		}

		// class UDatasmithImportOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_FLA0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_PGRH, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, Filename, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, FilePath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_PWIK, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0078);
		}

		// class UDatasmithLandscapeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLandscapeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, LandscapeMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, StaticLightingLOD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, UnknownData_UWGE, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLandscapeTemplate, 0x0040);
		}

		// class UDatasmithLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_UHZQ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_2QPK, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Intensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_724I, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0068);
		}

		// class UDatasmithMaterialInstanceTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithMaterialInstanceTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ParentMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ScalarParameterValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, VectorParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, TextureParameterValues, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, StaticParameters, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMaterialInstanceTemplate, 0x0198);
		}

		// class UDatasmithPointLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_WKST, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0040);
		}

		// class UDatasmithPostProcessVolumeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPostProcessVolumeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_ALEZ, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPostProcessVolumeTemplate, 0x0080);
		}

		// class UDatasmithScene : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithScene, UnknownData_IK26, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0030);
		}

		// class ADatasmithSceneActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, Scene, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, RelatedActors, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithSceneActor, 0x0278);
		}

		// class UDatasmithSceneComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_AWEV, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Tags, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x00E0);
		}

		// class UDatasmithSkyLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_VRIH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0040);
		}

		// class UDatasmithSpotLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0038);
		}

		// class UDatasmithStaticMeshComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0048);
		}

		// class UDatasmithStaticMeshTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00A8);
		}

		// class ULevelVariantSets : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DirectorClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, UnknownData_2QCE, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0090);
		}

		// class ALevelVariantSetsActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelVariantSetsActor, LevelVariantSets, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelVariantSetsActor, 0x0238);
		}

		// class ULevelVariantSetsFunctionDirector : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsFunctionDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSetsFunctionDirector, UnknownData_W08L, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSetsFunctionDirector, 0x0040);
		}

		// class UPropertyValue : public UObject
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_QNZJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, CapturedPropSegments, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterParameterDefaults, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_NKMH, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, LeafPropertyClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_ECGH, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_C1AX, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x01B8);
		}

		// class UPropertyValueTransform : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x01B8);
		}

		// class UPropertyValueVisibility : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x01B8);
		}

		// class UPropertyValueColor : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueColor, 0x01B8);
		}

		// class UPropertyValueMaterial : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x01B8);
		}

		// class UPropertyValueOption : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueOption)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueOption, 0x01B8);
		}

		// class UPropertyValueSoftObject : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueSoftObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueSoftObject, 0x01B8);
		}

		// class ASwitchActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__SwitchActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_0Q5M, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, SceneComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, LastSelectedOption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_UM42, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwitchActor, 0x0248);
		}

		// class UVariant : public UObject
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, UnknownData_FMXQ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Thumbnail, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0070);
		}

		// class UVariantObjectBinding : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CachedActorLabel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_LKQY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, FunctionCallers, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x0090);
		}

		// class UVariantSet : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_ETFZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, bExpanded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_YBOV, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0070);
		}

		// class ULuminARSessionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionFunctionLibrary, 0x0028);
		}

		// class ULuminARFrameFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARFrameFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARFrameFunctionLibrary, 0x0028);
		}

		// class ULuminARImageTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARImageTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARImageTrackingFunctionLibrary, 0x0028);
		}

		// class ULuminARSessionConfig : public UARSessionConfig
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_NP6L, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlanesQuery, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MaxPlaneQueryResults, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MinPlaneArea, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bArbitraryOrientationPlaneDetection, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_02C1, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneSearchExtents, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneQueryFlags, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDiscardZeroExtentPlanes, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDefaultUseUnreliablePose, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_MN7N, 0x013A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionConfig, 0x0140);
		}

		// class ULuminARLightEstimate : public UARBasicLightEstimate
		TEST_METHOD(Class__MagicLeapAR__LuminARLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARLightEstimate, AmbientIntensityNits, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARLightEstimate, 0x0050);
		}

		// class ULuminARCandidateImage : public UARCandidateImage
		TEST_METHOD(Class__MagicLeapAR__LuminARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bUseUnreliablePose, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bImageIsStationary, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, UnknownData_YQ00, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARCandidateImage, 0x0060);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_RRUQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, bStopServiceWhenAppDeactivates, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_8TFB, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// class UGooglePADFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GooglePAD__GooglePADFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGooglePADFunctionLibrary, 0x0028);
		}

		// class ABP_BearTrap_C : public AMordhauEquipment
		TEST_METHOD(BlueprintGeneratedClass__BP_BearTrap__BP_BearTrap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, UnknownData_NWF5, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, UberGraphFrame, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, BuildingSystem, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, Box, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, PlanterController, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, SafeTime, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, UnknownData_ORLV, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, DamageByArmorTier, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, DamageToHorse, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, UnknownData_7X5D, 0x0D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, TrapTriggerSound, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, PlanterCharacter, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, MaxTrapsPerPlayer, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, PlaceableLimitName, 0x0D24);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, ReactivateAmount, 0x0D2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, ReactivateDelay, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, UnknownData_JTMI, 0x0D34);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, PlanterState, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BearTrap_C, TrapWidget, 0x0D40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BearTrap_C, 0x0D48);
		}

		// class ABP_Medpack_C : public ABP_2HThrowableBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Medpack__BP_Medpack_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Medpack_C, UberGraphFrame, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Medpack_C, HealsLeft, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Medpack_C, HealthPerHeal, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Medpack_C, HealTimeToHold, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Medpack_C, OriginalMaxHoldTime, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Medpack_C, ThrowerController, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Medpack_C, HealScoreModifier, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Medpack_C, UnknownData_O5WW, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Medpack_C, OpenBagSkeletalMesh, 0x0CF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Medpack_C, 0x0D00);
		}

		// class UBP_BucklerShieldParryMotion_C : public UBP_ParryMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BucklerShieldParryMotion__BP_BucklerShieldParryMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BucklerShieldParryMotion_C, 0x0570);
		}

		// class UBP_Falx_HarvestBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Falx_HarvestBlade__BP_Falx_HarvestBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Falx_HarvestBlade_C, 0x0078);
		}

		// class UBP_FringedHood_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FringedHood__BP_FringedHood_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FringedHood_C, 0x01A0);
		}

		// class UBP_FringedHood_lowered_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FringedHood_lowered__BP_FringedHood_lowered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FringedHood_lowered_C, 0x01A0);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_ICB5, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0250);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_QF3O, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0240);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_4GWB, 0x07E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x07F0);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, Filmback, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_UHYO, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPreset, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_Y2VZ, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08B0);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__NetCore__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// class UChaosDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDebugDrawComponent, UnknownData_MBYB, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDebugDrawComponent, 0x00B8);
		}

		// class UChaosEventListenerComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosEventListenerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosEventListenerComponent, UnknownData_P6AG, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosEventListenerComponent, 0x00B8);
		}

		// class UChaosGameplayEventDispatcher : public UChaosEventListenerComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosGameplayEventDispatcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_1PGW, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, CollisionEventRegistrations, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, BreakEventRegistrations, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_VHBY, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosGameplayEventDispatcher, 0x0270);
		}

		// class UChaosNotifyHandlerInterface : public UInterface
		TEST_METHOD(Class__ChaosSolverEngine__ChaosNotifyHandlerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosNotifyHandlerInterface, 0x0028);
		}

		// class UChaosSolverEngineBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverEngineBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverEngineBlueprintLibrary, 0x0028);
		}

		// class UChaosSolver : public UObject
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolver, 0x0028);
		}

		// class AChaosSolverActor : public AActor
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TimeStepMultiplier, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionIterations, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutIterations, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutPairIterations, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterConnectionFactor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterUnionConnectionType, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateCollisionData, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_TZDJ, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionFilterSettings, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateBreakingData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_HF3D, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingFilterSettings, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateTrailingData, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_F2CZ, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingFilterSettings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bHasFloor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_07CC, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, FloorHeight, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, MassScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bGenerateContactGraph, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ChaosDebugSubstepControl, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, SpriteComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_RSLI, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, GameplayEventDispatcherComponent, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChaosSolverActor, 0x02A8);
		}

		// class UChaosSolverSettings : public UDeveloperSettings
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, UnknownData_NXHY, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, DefaultChaosSolverActorClass, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverSettings, 0x0058);
		}

		// class UBP_Short1Male02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Short1Male02__BP_Short1Male02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Short1Male02_C, 0x0078);
		}

		// class UBP_Medium1Male02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Medium1Male02__BP_Medium1Male02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Medium1Male02_C, 0x0078);
		}

		// class UBP_LongestGroomedMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_LongestGroomedMale02__BP_LongestGroomedMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongestGroomedMale02_C, 0x0078);
		}

		// class UBP_SkinColor7_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_SkinColor7__BP_SkinColor7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SkinColor7_C, 0x0078);
		}

		// class UBP_SkinColor6_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_SkinColor6__BP_SkinColor6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SkinColor6_C, 0x0078);
		}

		// class UBP_SkinColor2_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_SkinColor2__BP_SkinColor2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SkinColor2_C, 0x0078);
		}

		// class UBP_PlateColor9_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor9__BP_PlateColor9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor9_C, 0x0078);
		}

		// class UBP_PlateColor2_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor2__BP_PlateColor2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor2_C, 0x0078);
		}

		// class UBP_PlateColor16_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor16__BP_PlateColor16_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor16_C, 0x0078);
		}

		// class UBP_PlateColor15_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor15__BP_PlateColor15_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor15_C, 0x0078);
		}

		// class UBP_MetalDetailColor4_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor4__BP_MetalDetailColor4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor4_C, 0x0078);
		}

		// class UBP_MetalDetailColor23_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor23__BP_MetalDetailColor23_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor23_C, 0x0078);
		}

		// class UBP_MetalDetailColor22_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor22__BP_MetalDetailColor22_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor22_C, 0x0078);
		}

		// class UBP_WearableSlotCustomization_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_WearableSlotCustomization__BP_WearableSlotCustomization_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, Border_5, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, Button_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, ic_armorTier_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, ic_armorTier_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, ic_armorTier_4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, ic_head, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, ic_legs, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, ic_torso, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, Image_5, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, Image_391, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, MainSlotText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, Pattern, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, PickWearableButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, SelectedWearableName, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, SizeBox_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, SizeBox_21, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, SubSlotText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, TextBlock_27, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, TierIconBackground, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, WearableColorPicker1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, WearableColorPicker2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, WearableSlot, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, HasColor1, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, HasColor2, 0x02E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, HasPatterns, 0x02E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, UnknownData_RZHJ, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, Text, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, WearableName, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, Cost, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, UnknownData_60MA, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, ArmorCustomization, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, WearableColorPicker2_1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, IsInvalidDefaultCustomizationMode, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WearableSlotCustomization_C, HideSlot, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WearableSlotCustomization_C, 0x0332);
		}

		// class UWmfMediaSettings : public UObject
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, HardwareAcceleratedVideoDecoding, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_F4H2, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0030);
		}

		// class UBP_MordhauSingleton_C : public UMordhauSingleton
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauSingleton__BP_MordhauSingleton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauSingleton_C, ButtonPromptImageMap, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauSingleton_C, ChatMutedPlayers, 0x0838);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MordhauSingleton_C, 0x0888);
		}

		// class UBP_PartyMembers_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PartyMembers__BP_PartyMembers_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, BP_PartyMembersEntry, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, BP_PartyMembersEntry_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, BP_PartyMembersEntry_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, BP_PartyMembersEntry_3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, BP_PartyMembersEntry_4, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, BP_PartyMembersEntry_5, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, Entries, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, Rank, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, Banner, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, RankDisplayType, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, UnknownData_LTHU, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembers_C, PartyLeader, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PartyMembers_C, 0x02D8);
		}

		// class ABP_InGoreMesh_C : public ABP_BaseGoreMesh_C
		TEST_METHOD(BlueprintGeneratedClass__BP_InGoreMesh__BP_InGoreMesh_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_InGoreMesh_C, UberGraphFrame, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_InGoreMesh_C, 0x0248);
		}

		// class ABP_CatapultProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CatapultProjectile__BP_CatapultProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CatapultProjectile_C, UnknownData_D4I4, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CatapultProjectile_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CatapultProjectile_C, 0x07D0);
		}

		// class UBP_NewUnlockIndicator_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_NewUnlockIndicator__BP_NewUnlockIndicator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NewUnlockIndicator_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NewUnlockIndicator_C, Pulse, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NewUnlockIndicator_C, Background, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NewUnlockIndicator_C, Image_3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NewUnlockIndicator_C, Outline, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NewUnlockIndicator_C, TextBlock_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NewUnlockIndicator_C, Color, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NewUnlockIndicator_C, Show, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NewUnlockIndicator_C, 0x0271);
		}

		// class UBP_VictoryPopup_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_VictoryPopup__BP_VictoryPopup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, ExitAnim__play_in_reverse_, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, EntryAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, BackGlow, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, CanvasPanel_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, Image_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, LensFlare, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, PrimaryHeader, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, SecondaryHeader, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, TextGlow, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, Primary_Text, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, Secondary_Text, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VictoryPopup_C, Showing_Popup, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VictoryPopup_C, 0x02B1);
		}

		// class UBP_HussarShouldersLeopardPauldronsTrim_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarShouldersLeopardPauldronsTrim__BP_HussarShouldersLeopardPauldronsTrim_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarShouldersLeopardPauldronsTrim_C, 0x01A0);
		}

		// class UBP_FlorentineSpaulders_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlorentineSpaulders__BP_FlorentineSpaulders_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlorentineSpaulders_C, 0x01A0);
		}

		// class UBP_Star01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Star01__BP_Star01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Star01_C, 0x0060);
		}

		// class UBP_KsSupporter_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_KsSupporter__BP_KsSupporter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KsSupporter_C, 0x0060);
		}

		// class UBP_Crest02_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Crest02__BP_Crest02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Crest02_C, 0x0060);
		}

		// class UBP_MapVote_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MapVote__BP_MapVote_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, BP_MapEntry, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, BP_MapEntry_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, BP_MapEntry_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, BP_MapEntry_C_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, BP_MapEntry_C_4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, BP_MapEntry_C_5, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, EntryGrid, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, SelectedEntry, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, Voted, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, RpcStartTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapVote_C, WaitingForResponse, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MapVote_C, 0x028D);
		}

		// class UBP_PolearmAnimationProfile_LongIdle_C : public UBP_PolearmAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PolearmAnimationProfile_LongIdle__BP_PolearmAnimationProfile_LongIdle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PolearmAnimationProfile_LongIdle_C, 0x00C0);
		}

		// class UBP_kickstarterLongsword_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_kickstarterLongsword__BP_kickstarterLongsword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_kickstarterLongsword_C, 0x0078);
		}

		// class UBP_Longsword_ExcisemanGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Longsword_ExcisemanGuard__BP_Longsword_ExcisemanGuard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Longsword_ExcisemanGuard_C, 0x0078);
		}

		// class UBP_Cuirassier_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Cuirassier_Arms__BP_Cuirassier_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cuirassier_Arms_C, 0x01B8);
		}

		// class UBP_GermanSalletBevorRR_C : public UBP_GermanSalletBuffet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletBevorRR__BP_GermanSalletBevorRR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletBevorRR_C, 0x01C8);
		}

		// class UBP_KettleSalletBevor_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KettleSalletBevor__BP_KettleSalletBevor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KettleSalletBevor_C, 0x01C8);
		}

		// class UBP_ItalianArmetAltWrapper_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ItalianArmetAltWrapper__BP_ItalianArmetAltWrapper_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItalianArmetAltWrapper_C, 0x01C8);
		}

		// class UBP_Longsword_TownsmanHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Longsword_TownsmanHandle__BP_Longsword_TownsmanHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Longsword_TownsmanHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Longsword_TownsmanHandle_C, 0x0080);
		}

		// class ABP_Longsword_C : public ABP_TwoHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Longsword__BP_Longsword_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Longsword_C, UberGraphFrame, 0x1C28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Longsword_C, 0x1C30);
		}

		// class UBP_GreathelmBandPaint_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GreathelmBandPaint__BP_GreathelmBandPaint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GreathelmBandPaint_C, 0x01C8);
		}

		// class UBP_Houndskull_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Houndskull__BP_Houndskull_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Houndskull_C, 0x01C8);
		}

		// class UBP_GreathelmCloak_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GreathelmCloak__BP_GreathelmCloak_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GreathelmCloak_C, 0x01C8);
		}

		// class UBP_SalletOpenPainted_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SalletOpenPainted__BP_SalletOpenPainted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SalletOpenPainted_C, 0x01C8);
		}

		// class UBP_ClothCoifLowered_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ClothCoifLowered__BP_ClothCoifLowered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ClothCoifLowered_C, 0x01A0);
		}

		// class UBP_messer_ButchersBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_ButchersBlade__BP_messer_ButchersBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_ButchersBlade_C, 0x0078);
		}

		// class UBP_messer_SwissSaber_guard2_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_SwissSaber_guard2__BP_messer_SwissSaber_guard2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_SwissSaber_guard2_C, 0x0078);
		}

		// class UBP_2hmace_LeatherwrapHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2hmace_LeatherwrapHandle__BP_2hmace_LeatherwrapHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2hmace_LeatherwrapHandle_C, 0x0078);
		}

		// class UBP_2hmace_ReinforcedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2hmace_ReinforcedHandle__BP_2hmace_ReinforcedHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2hmace_ReinforcedHandle_C, 0x0078);
		}

		// class UBP_2hmace_WoodHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2hmace_WoodHandle__BP_2hmace_WoodHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2hmace_WoodHandle_C, 0x0078);
		}

		// class UBP_Billhook_BasicShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Billhook_BasicShaft__BP_Billhook_BasicShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Billhook_BasicShaft_C, 0x0078);
		}

		// class ABP_ArrowProjectile_C : public ABP_MissileProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArrowProjectile__BP_ArrowProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ArrowProjectile_C, 0x07C4);
		}

		// class ABP_ThrownSpinningProjectileShortsword_C : public ABP_ThrownWeaponProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownSpinningProjectileShortsword__BP_ThrownSpinningProjectileShortsword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownSpinningProjectileShortsword_C, 0x07D0);
		}

		// class UBP_ShortSwordCommonGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortSwordCommonGuard__BP_ShortSwordCommonGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortSwordCommonGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortSwordCommonGuard_C, 0x0080);
		}

		// class ABP_MordhauShield_C : public AMordhauShield
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauShield__BP_MordhauShield_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauShield_C, UberGraphFrame, 0x1C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauShield_C, BlockColliderBP, 0x1C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauShield_C, ProjectileBlock, 0x1C40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauShield_C, 0x1C48);
		}

		// class UBP_Halberd_ScholarHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Halberd_ScholarHead__BP_Halberd_ScholarHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Halberd_ScholarHead_C, 0x0078);
		}

		// class UBP_Halberd_SeafarersShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Halberd_SeafarersShaft__BP_Halberd_SeafarersShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Halberd_SeafarersShaft_C, 0x0078);
		}

		// class URunHeadBobShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__RunHeadBobShake__RunHeadBobShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URunHeadBobShake_C, 0x0160);
		}

		// class UFlinchShake_Fall_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__FlinchShake_Fall__FlinchShake_Fall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlinchShake_Fall_C, 0x0160);
		}

		// class UBP_CoPSkirt01_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CoPSkirt01__BP_CoPSkirt01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CoPSkirt01_C, 0x01A0);
		}

		// class UBP_LinnenHosen_C : public UBP_Tier0LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LinnenHosen__BP_LinnenHosen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LinnenHosen_C, 0x01B8);
		}

		// class UBP_JoinedHosen_Armored_C : public UBP_Tier3LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JoinedHosen_Armored__BP_JoinedHosen_Armored_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JoinedHosen_Armored_C, 0x01B8);
		}

		// class UAmbisonicsEncodingSettings : public USoundfieldEncodingSettingsBase
		TEST_METHOD(Class__SoundFields__AmbisonicsEncodingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, AmbisonicsOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, UnknownData_WF28, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsEncodingSettings, 0x0030);
		}

		// class UBP_maulBohemian_OrnateHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maulBohemian_OrnateHandle__BP_maulBohemian_OrnateHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maulBohemian_OrnateHandle_C, 0x0078);
		}

		// class UBP_federschwert01_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_federschwert01__BP_federschwert01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_federschwert01_C, 0x0078);
		}

		// class UBP_waraxe_double_MenacingHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_waraxe_double_MenacingHead__BP_waraxe_double_MenacingHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_waraxe_double_MenacingHead_C, 0x0078);
		}

		// class UBP_waraxe_double_MagnificShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_waraxe_double_MagnificShaft__BP_waraxe_double_MagnificShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_waraxe_double_MagnificShaft_C, 0x0078);
		}

		// class ABP_LongbowArrow_C : public ABP_ArrowProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LongbowArrow__BP_LongbowArrow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LongbowArrow_C, 0x07C4);
		}

		// class UBOT_Pikeman_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Pikeman__BOT_Pikeman_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Pikeman_C, 0x0108);
		}

		// class UBOT_Dude_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Dude__BOT_Dude_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Dude_C, 0x0108);
		}

		// class UBP_PinCushion_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_PinCushion_Banner__BP_PinCushion_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PinCushion_Banner_C, 0x0060);
		}

		// class UBP_Knotting1_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Knotting1__BP_Knotting1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Knotting1_C, 0x0060);
		}

		// class UBP_Gothic1_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Gothic1__BP_Gothic1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gothic1_C, 0x0060);
		}

		// class ABP_FireField_C : public ABP_MasterField_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FireField__BP_FireField_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, UberGraphFrame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, FieldSpawn8, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, FieldSpawn7, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, FieldSpawn5, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, FieldSpawn4, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, Audio, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, FieldSpawn6, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, FieldSpawn3, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, FieldSpawn2, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, FieldSpawn1, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, OtherDamage, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, UnknownData_AAVT, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, CharFireDmgByTime, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, CharFireTickByTime, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireField_C, WarmupTime, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FireField_C, 0x03BC);
		}

		// class UBP_VoiceMenu_C : public UBP_ChoiceMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_VoiceMenu__BP_VoiceMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoiceMenu_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoiceMenu_C, ChoicesToCommandIDs, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VoiceMenu_C, 0x02E0);
		}

		// class UBP_OfficialRules_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_OfficialRules__BP_OfficialRules_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OfficialRules_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OfficialRules_C, ShowAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OfficialRules_C, AcceptButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OfficialRules_C, Button_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OfficialRules_C, DeclineButton, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OfficialRules_C, Image_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OfficialRules_C, Image_2, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_OfficialRules_C, 0x0268);
		}

		// class UBP_CustomizationColorPicker_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CustomizationColorPicker__BP_CustomizationColorPicker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationColorPicker_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationColorPicker_C, BP_MordhauColorPicker, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationColorPicker_C, OnClicked, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationColorPicker_C, OnHovered, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationColorPicker_C, OnClosed, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CustomizationColorPicker_C, 0x0270);
		}

		// class UBP_CircularList_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CircularList__BP_CircularList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircularList_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircularList_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircularList_C, Image_133, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircularList_C, Next, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircularList_C, Prev, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircularList_C, TextBlock_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircularList_C, OnValueChanged, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircularList_C, Value, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircularList_C, Max, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CircularList_C, Text, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CircularList_C, 0x0290);
		}

		// class UBP_HordeGameModeMetadata_C : public UGameModeMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_HordeGameModeMetadata__BP_HordeGameModeMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HordeGameModeMetadata_C, 0x00D0);
		}

		// class UBP_ModListEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ModListEntry__BP_ModListEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModListEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModListEntry_C, Button, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModListEntry_C, TextBlock_24, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModListEntry_C, OnValueChanged, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModListEntry_C, Name, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModListEntry_C, OnHovered, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModListEntry_C, OnClicked, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModListEntry_C, Description, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModListEntry_C, Author, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModListEntry_C, Mod, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ModListEntry_C, 0x0310);
		}

		// class UBP_GambesonChest_C : public UBP_Tier1UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GambesonChest__BP_GambesonChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GambesonChest_C, 0x01E8);
		}

		// class UBP_FootsoldierChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FootsoldierChest__BP_FootsoldierChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FootsoldierChest_C, 0x01E8);
		}

		// class UBP_Gambeson_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Gambeson_Arms__BP_Gambeson_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gambeson_Arms_C, 0x01B8);
		}

		// class UBP_EyeColor10_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor10__BP_EyeColor10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor10_C, 0x0078);
		}

		// class UBP_EyeColor1_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor1__BP_EyeColor1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor1_C, 0x0078);
		}

		// class UBP_Cloth8_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth8__BP_Cloth8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth8_C, 0x0078);
		}

		// class UBP_Cloth50_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth50__BP_Cloth50_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth50_C, 0x0078);
		}

		// class UBP_Cloth44_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth44__BP_Cloth44_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth44_C, 0x0078);
		}

		// class UBP_Cloth39_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth39__BP_Cloth39_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth39_C, 0x0078);
		}

		// class UBP_Cloth35_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth35__BP_Cloth35_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth35_C, 0x0078);
		}

		// class UBP_Cloth26_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth26__BP_Cloth26_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth26_C, 0x0078);
		}

		// class UBP_Cloth20_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth20__BP_Cloth20_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth20_C, 0x0078);
		}

		// class UBP_Cloth14_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth14__BP_Cloth14_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth14_C, 0x0078);
		}

		// class UBP_TeamDeathmatchGameModeMetadata_C : public UGameModeMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_TeamDeathmatchGameModeMetadata__BP_TeamDeathmatchGameModeMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TeamDeathmatchGameModeMetadata_C, 0x00D0);
		}

		// class UBP_Italian_Gauntlets2x2_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Italian_Gauntlets2x2__BP_Italian_Gauntlets2x2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Italian_Gauntlets2x2_C, 0x01A0);
		}

		// class ABP_MordhauCharacter_C : public AMordhauCharacter
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauCharacter__BP_MordhauCharacter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCharacter_C, UberGraphFrame, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCharacter_C, Thudder, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCharacter_C, Camera, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCharacter_C, BlockColliderBP, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCharacter_C, KickClass, 0x12C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauCharacter_C, 0x12C8);
		}

		// class UBP_GermanSalletBuffetRaised_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletBuffetRaised__BP_GermanSalletBuffetRaised_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletBuffetRaised_C, 0x01C8);
		}

		// class UBP_Crown_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_crown__BP_Crown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Crown_C, 0x01C8);
		}

		// class UBP_PlagueDoctorMaskHead_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlagueDoctorMaskHead__BP_PlagueDoctorMaskHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlagueDoctorMaskHead_C, 0x01C8);
		}

		// class UBP_VanguardsKettle_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VanguardsKettle__BP_VanguardsKettle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VanguardsKettle_C, 0x01C8);
		}

		// class UBP_VikingHelmet3_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingHelmet3__BP_VikingHelmet3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingHelmet3_C, 0x01C8);
		}

		// class UBP_WanderersHood_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WanderersHood__BP_WanderersHood_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WanderersHood_C, 0x01C8);
		}

		// class UBP_RaisedArmetDome_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RaisedArmetDome__BP_RaisedArmetDome_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RaisedArmetDome_C, 0x01C8);
		}

		// class UBP_KlappvisierItalian_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KlappvisierItalian__BP_KlappvisierItalian_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KlappvisierItalian_C, 0x01C8);
		}

		// class UBP_Rapier_AristocratGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rapier_AristocratGuard__BP_Rapier_AristocratGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rapier_AristocratGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rapier_AristocratGuard_C, 0x0080);
		}

		// class UBP_Bardiche_CrookedShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bardiche_CrookedShaft__BP_Bardiche_CrookedShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bardiche_CrookedShaft_C, 0x0078);
		}

		// class UBP_HeaterShieldPartFootman_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeaterShieldPartFootman__BP_HeaterShieldPartFootman_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeaterShieldPartFootman_C, 0x0078);
		}

		// class UBP_claymore_QuatrefoilGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_claymore_QuatrefoilGuard__BP_claymore_QuatrefoilGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_claymore_QuatrefoilGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_claymore_QuatrefoilGuard_C, 0x0080);
		}

		// class ABP_AmmoBox_C : public ABP_LocalInteractableChest_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AmmoBox__BP_AmmoBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AmmoBox_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AmmoBox_C, MordhauWidget, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AmmoBox_C, 0x03E8);
		}

		// class UBP_Zweihander_BohemianGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Zweihander_BohemianGuard__BP_Zweihander_BohemianGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Zweihander_BohemianGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Zweihander_BohemianGuard_C, 0x0080);
		}

		// class UBP_ZweihanderCommander_TubeQuillionGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ZweihanderCommander_TubeQuillionGuard__BP_ZweihanderCommander_TubeQuillionGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ZweihanderCommander_TubeQuillionGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ZweihanderCommander_TubeQuillionGuard_C, 0x0080);
		}

		// class ABP_Shortspear_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shortspear__BP_Shortspear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Shortspear_C, 0x1C28);
		}

		// class UBP_Shortspear_HunterHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shortspear_HunterHEad__BP_Shortspear_HunterHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shortspear_HunterHead_C, 0x0078);
		}

		// class UBP_Shortspear_TiedShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shortspear_TiedShaft__BP_Shortspear_TiedShaft_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shortspear_TiedShaft_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shortspear_TiedShaft_C, 0x0080);
		}

		// class UBP_ArenaMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_ArenaMapMetadata__BP_ArenaMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArenaMapMetadata_C, 0x00A8);
		}

		// class UBP_Greatsword_RightStrikeMotion_C : public UBP_2HSword_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_RightStrikeMotion__BP_Greatsword_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_RightStrikeMotion_C, 0x1160);
		}

		// class UBP_Emblem_Somethingrussian_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Somethingrussian__BP_Emblem_Somethingrussian_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Somethingrussian_C, 0x0060);
		}

		// class UBP_Emblem_Rest_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Rest__BP_Emblem_Rest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Rest_C, 0x0060);
		}

		// class UBP_LeatherColor2_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor2__BP_LeatherColor2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor2_C, 0x0078);
		}

		// class UBOT_FootsoldierBlue_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_FootsoldierBlue__BOT_FootsoldierBlue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_FootsoldierBlue_C, 0x0108);
		}

		// class UBP_BlockedMotion_C : public UBlockedMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_BlockedMotion__BP_BlockedMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlockedMotion_C, 0x0240);
		}

		// class ABP_MordhauPlayerState_C : public AMordhauPlayerState
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauPlayerState__BP_MordhauPlayerState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauPlayerState_C, DefaultSceneRoot, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauPlayerState_C, 0x0418);
		}

		// class UBP_NavArea_Avoid_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__BP_NavArea_Avoid__BP_NavArea_Avoid_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavArea_Avoid_C, 0x0048);
		}

		// class UBP_Landsknecht_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Landsknecht_Arms__BP_Landsknecht_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Landsknecht_Arms_C, 0x01B8);
		}

		// class UBP_PolearmLong_LeftStabMotion_C : public UBP_Polearm_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PolearmLong_LeftStabMotion__BP_PolearmLong_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PolearmLong_LeftStabMotion_C, 0x1108);
		}

		// class UBP_PigFaceVisorUp_Plume_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PigFaceVisorUp_Plume__BP_PigFaceVisorUp_Plume_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PigFaceVisorUp_Plume_C, 0x01C8);
		}

		// class UBP_CoveredFlatTopOrle_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CoveredFlatTopOrle__BP_CoveredFlatTopOrle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CoveredFlatTopOrle_C, 0x01C8);
		}

		// class UBP_ArmingSword_MerchantsBasketHilt_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_MerchantsBasketHilt__BP_ArmingSword_MerchantsBasketHilt_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_MerchantsBasketHilt_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_MerchantsBasketHilt_C, 0x0080);
		}

		// class UBP_PaintedFlatChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PaintedFlatChest__BP_PaintedFlatChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PaintedFlatChest_C, 0x01E8);
		}

		// class ABP_Pickaxe_C : public ABP_BattleAxe_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Pickaxe__BP_Pickaxe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Pickaxe_C, 0x1C28);
		}

		// class UBP_Polehammer_Head6_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Head6__BP_Polehammer_Head6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Head6_C, 0x0078);
		}

		// class UBP_HussarGorget_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarGorget__BP_HussarGorget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarGorget_C, 0x01A0);
		}

		// class UBP_Coif_Padded_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Coif_Padded__BP_Coif_Padded_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Coif_Padded_C, 0x01A0);
		}

		// class UBP_Gorget_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Gorget__BP_Gorget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gorget_C, 0x01A0);
		}

		// class UBP_HairColor3_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor3__BP_HairColor3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor3_C, 0x0078);
		}

		// class UBP_HairColor22_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor22__BP_HairColor22_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor22_C, 0x0078);
		}

		// class UBP_HairColor21_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor21__BP_HairColor21_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor21_C, 0x0078);
		}

		// class UBP_HairColor18_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor18__BP_HairColor18_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor18_C, 0x0078);
		}

		// class UBP_FurColor5_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor5__BP_FurColor5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor5_C, 0x0078);
		}

		// class UBP_FurColor17_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor17__BP_FurColor17_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor17_C, 0x0078);
		}

		// class UBP_FurColor16_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor16__BP_FurColor16_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor16_C, 0x0078);
		}

		// class UBP_FurColor12_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor12__BP_FurColor12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor12_C, 0x0078);
		}

		// class UBP_SwordTwirl1H_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_SwordTwirl1H__BP_SwordTwirl1H_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SwordTwirl1H_C, 0x0130);
		}

		// class UBP_SwordRaise_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_SwordRaise__BP_SwordRaise_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SwordRaise_C, 0x0130);
		}

		// class UBP_SaluteMotion_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_SaluteMotion__BP_SaluteMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SaluteMotion_C, 0x0130);
		}

		// class UBP_Roar_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Roar__BP_Roar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Roar_C, 0x0130);
		}

		// class UBP_ItsAllOver_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_ItsAllOver__BP_ItsAllOver_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItsAllOver_C, 0x0130);
		}

		// class UBP_StunMotion_C : public UStunMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_StunMotion__BP_StunMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StunMotion_C, 0x00C8);
		}

		// class UBP_RangedReleaseMotion_C : public URangedReleaseMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_RangedReleaseMotion__BP_RangedReleaseMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RangedReleaseMotion_C, 0x00F0);
		}

		// class UBP_ClimbingMotion_C : public UClimbingMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_ClimbingMotion__BP_ClimbingMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ClimbingMotion_C, 0x0118);
		}

		// class UBP_VeteransPauldronsTrimPartialAsym_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransPauldronsTrimPartialAsym__BP_VeteransPauldronsTrimPartialAsym_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransPauldronsTrimPartialAsym_C, 0x01A0);
		}

		// class ABP_ThrowingAxe_C : public ABP_ThrowableEquipment_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrowingAxe__BP_ThrowingAxe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrowingAxe_C, 0x0CD8);
		}

		// class ABP_MordhauMainMenuPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauMainMenuPawn__BP_MordhauMainMenuPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauMainMenuPawn_C, Camera, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauMainMenuPawn_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauMainMenuPawn_C, 0x0290);
		}

		// class UBP_Polearm_LeftStabMotion_C : public UBP_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polearm_LeftStabMotion__BP_Polearm_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polearm_LeftStabMotion_C, 0x1108);
		}

		// class UBP_HUDButtonPrompts_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_HUDButtonPrompts__BP_HUDButtonPrompts_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, Vanish_Spec_Prompts, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, BP_ButtonPrompt_PrimarySpecAction, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, BP_ButtonPrompt_SecondarySpecAction, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, BP_ButtonPrompt_TertiarySpecAction, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, BP_ChangeLoadoutPrompt, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, BP_ChangeTeamPrompt, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, BP_CouchPrompt, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, BP_SpawnInfo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, Overlay_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, Overlay_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, Overlay_3, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, Overlay_4, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, Overlay_EquipmentPrompts, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, Overlay_VehiclePrompts, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, VerticalBox_10, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, VerticalBox_EquipmentPrompts, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, VerticalBox_VehiclePrompts, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, ActionPrompts, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, VehiclePrompts, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, SpectatorActionPrompts, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, Right_Hand, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, Left_Hand, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDButtonPrompts_C, Should_vanish_spec_prompts, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HUDButtonPrompts_C, 0x0301);
		}

		// class UBP_Plate_ChestLow_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Plate_ChestLow__BP_Plate_ChestLow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Plate_ChestLow_C, 0x01A0);
		}

		// class UBP_Gambeson_ChestLow2_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Gambeson_ChestLow2__BP_Gambeson_ChestLow2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gambeson_ChestLow2_C, 0x01A0);
		}

		// class UBP_Chain_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Chain__BP_Chain_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Chain_C, 0x01A0);
		}

		// class UBP_WolfPelt_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WolfPelt__BP_WolfPelt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WolfPelt_C, 0x01A0);
		}

		// class UBP_Hussar_Open_winged_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Hussar_Open_winged__BP_Hussar_Open_winged_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Hussar_Open_winged_C, 0x01C8);
		}

		// class UBP_baghat_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_baghat__BP_baghat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_baghat_C, 0x01C8);
		}

		// class UBP_ItalianArmetRaisedAlt_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ItalianArmetRaisedAlt__BP_ItalianArmetRaisedAlt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItalianArmetRaisedAlt_C, 0x01C8);
		}

		// class UBP_RaisedVisorHoundskull_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RaisedVisorHoundskull__BP_RaisedVisorHoundskull_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RaisedVisorHoundskull_C, 0x01C8);
		}

		// class UBP_NoVisorHoundskull_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NoVisorHoundskull__BP_NoVisorHoundskull_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NoVisorHoundskull_C, 0x01C8);
		}

		// class UBP_VikingHelmet_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingHelmet__BP_VikingHelmet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingHelmet_C, 0x01C8);
		}

		// class UBP_Warhammer_Bohemian_HeadofAgony_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_Bohemian_HeadofAgony__BP_Warhammer_Bohemian_HeadofAgony_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_Bohemian_HeadofAgony_C, 0x0078);
		}

		// class UBP_Warhammer_Bohemian_HeadofBetrayal_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_Bohemian_HeadofBetrayal__BP_Warhammer_Bohemian_HeadofBetrayal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_Bohemian_HeadofBetrayal_C, 0x0078);
		}

		// class UBP_Warhammer_GothicHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_GothicHead__BP_Warhammer_GothicHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_GothicHead_C, 0x0078);
		}

		// class UBP_FlorentineCuirass_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlorentineCuirass__BP_FlorentineCuirass_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlorentineCuirass_C, 0x01E8);
		}

		// class UBP_BrigandineLegs_C : public UBP_Tier2LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BrigandineLegs__BP_BrigandineLegs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BrigandineLegs_C, 0x01B8);
		}

		// class UBP_MalletPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MalletPart__BP_MalletPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MalletPart_C, 0x0078);
		}

		// class ABP_Rake_C : public ABP_Halberd_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rake__BP_Rake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Rake_C, 0x1C28);
		}

		// class UBP_cleaverHunter_grip2_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_cleaverHunter_grip2__BP_cleaverHunter_grip2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_cleaverHunter_grip2_C, 0x0078);
		}

		// class UBP_cleaver_meatcrusher_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_cleaver_meatcrusher__BP_cleaver_meatcrusher_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_cleaver_meatcrusher_C, 0x0078);
		}

		// class UBP_cleaver_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_cleaver__BP_cleaver_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_cleaver_C, 0x0078);
		}

		// class UBP_Knight_C : public UCharacterVoice
		TEST_METHOD(BlueprintGeneratedClass__BP_Knight__BP_Knight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Knight_C, 0x00A0);
		}

		// class UBP_Bernard_C : public UCharacterVoice
		TEST_METHOD(BlueprintGeneratedClass__BP_Bernard__BP_Bernard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bernard_C, 0x00A0);
		}

		// class UBP_SuppliedPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SuppliedPerk__BP_SuppliedPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SuppliedPerk_C, 0x0068);
		}

		// class UBP_PugilistPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PugilistPerk__BP_PugilistPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PugilistPerk_C, 0x0068);
		}

		// class UBP_MaleEyebrow03_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_MaleEyebrow03__BP_MaleEyebrow03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MaleEyebrow03_C, 0x0078);
		}

		// class UBP_FemaleFace01_C : public UCharacterFace
		TEST_METHOD(BlueprintGeneratedClass__BP_FemaleFace01__BP_FemaleFace01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FemaleFace01_C, 0x01D8);
		}

		// class UBP_LeatherColor17_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor17__BP_LeatherColor17_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor17_C, 0x0078);
		}

		// class UBP_LeatherColor16_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor16__BP_LeatherColor16_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor16_C, 0x0078);
		}

		// class UBP_LeatherColor15_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor15__BP_LeatherColor15_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor15_C, 0x0078);
		}

		// class UBP_LeatherColor14_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor14__BP_LeatherColor14_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor14_C, 0x0078);
		}

		// class UBP_LongBackSweptMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_LongBackSweptMale01__BP_LongBackSweptMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongBackSweptMale01_C, 0x0078);
		}

		// class UBP_CloseCut1Male01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_CloseCut1Male01__BP_CloseCut1Male01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CloseCut1Male01_C, 0x0078);
		}

		// class UBP_LongestGroomedMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_LongestGroomedMale01__BP_LongestGroomedMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongestGroomedMale01_C, 0x0078);
		}

		// class UBP_LandsknechtMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_LandsknechtMale01__BP_LandsknechtMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LandsknechtMale01_C, 0x0078);
		}

		// class UBP_RightStrikeMotion_C : public UBP_StrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RightStrikeMotion__BP_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RightStrikeMotion_C, 0x1160);
		}

		// class UHitShakeLongbow_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__HitShakeLongbow__HitShakeLongbow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitShakeLongbow_C, 0x0160);
		}

		// class ABP_SmokeBombProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmokeBombProjectile__BP_SmokeBombProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SmokeBombProjectile_C, UnknownData_FW8K, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SmokeBombProjectile_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmokeBombProjectile_C, 0x07D0);
		}

		// class UBP_Italian_pauldrons1x2_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Italian_pauldrons1x2__BP_Italian_pauldrons1x2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Italian_pauldrons1x2_C, 0x01A0);
		}

		// class UBP_WandererGloves_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WandererGloves__BP_WandererGloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WandererGloves_C, 0x01A0);
		}

		// class UBP_SultansHelmet_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SultansHelmet__BP_SultansHelmet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SultansHelmet_C, 0x01C8);
		}

		// class UBP_HussarHelmetComb_masked_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarHelmetComb_masked__BP_HussarHelmetComb_masked_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarHelmetComb_masked_C, 0x01C8);
		}

		// class UBP_BlackSalletVisorUp_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BlackSalletVisorUp__BP_BlackSalletVisorUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlackSalletVisorUp_C, 0x01C8);
		}

		// class UBP_BlackSalletPainted_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BlackSalletPainted__BP_BlackSalletPainted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlackSalletPainted_C, 0x01C8);
		}

		// class UBP_PigFaceBascinet_plume_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PigFaceBascinet_plume__BP_PigFaceBascinet_plume_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PigFaceBascinet_plume_C, 0x01C8);
		}

		// class UBP_GermanKettle_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanKettle__BP_GermanKettle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanKettle_C, 0x01C8);
		}

		// class UBP_GambesonCollar_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GambesonCollar__BP_GambesonCollar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GambesonCollar_C, 0x01A0);
		}

		// class UBP_Shield_RightStabMotion_C : public UBP_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shield_RightStabMotion__BP_Shield_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shield_RightStabMotion_C, 0x1108);
		}

		// class UBP_Halberd_GuardianHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Halberd_GuardianHead__BP_Halberd_GuardianHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Halberd_GuardianHead_C, 0x0078);
		}

		// class UBP_Tier0HeadWearable_C : public UBP_HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier0HeadWearable__BP_Tier0HeadWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier0HeadWearable_C, 0x01C8);
		}

		// class UBP_BrigandineChest_C : public UBP_Tier2UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BrigandineChest__BP_BrigandineChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BrigandineChest_C, 0x01E8);
		}

		// class UBP_LandsknechtChest_C : public UBP_Tier1UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LandsknechtChest__BP_LandsknechtChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LandsknechtChest_C, 0x01E8);
		}

		// class ABP_ThrownMaceProjectile_Sledge_C : public ABP_ThrownSpinningProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownMaceProjectile_Sledge__BP_ThrownMaceProjectile_Sledge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownMaceProjectile_Sledge_C, 0x07D0);
		}

		// class UBP_JavelinDefaultPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JavelinDefaultPart__BP_JavelinDefaultPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JavelinDefaultPart_C, 0x0078);
		}

		// class UBP_SoftwareCursor_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SoftwareCursor__BP_SoftwareCursor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SoftwareCursor_C, Image_1, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SoftwareCursor_C, 0x0238);
		}

		// class UBP_Emblem_Outcast_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Outcast__BP_Emblem_Outcast_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Outcast_C, 0x0060);
		}

		// class UBP_Emblem_Jax_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Jax__BP_Emblem_Jax_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Jax_C, 0x0060);
		}

		// class UBP_Emblem_FelineRoyalty_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_FelineRoyalty__BP_Emblem_FelineRoyalty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_FelineRoyalty_C, 0x0060);
		}

		// class UBP_Emblem_Edelblume_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Edelblume__BP_Emblem_Edelblume_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Edelblume_C, 0x0060);
		}

		// class UBP_Emblem_Easternsun_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Easternsun__BP_Emblem_Easternsun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Easternsun_C, 0x0060);
		}

		// class UBP_KnightPauldrons1x1_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KnightPauldrons1x1__BP_KnightPauldrons1x1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KnightPauldrons1x1_C, 0x01A0);
		}

		// class UBP_Longsword_RufflerBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Longsword_RufflerBlade__BP_Longsword_RufflerBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Longsword_RufflerBlade_C, 0x0078);
		}

		// class UBP_Dagger_RondelGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Dagger_RondelGuard__BP_Dagger_RondelGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Dagger_RondelGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Dagger_RondelGuard_C, 0x0080);
		}

		// class ABP_Dagger_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Dagger__BP_Dagger_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Dagger_C, 0x1C28);
		}

		// class UBP_MountainPeakMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_MountainPeakMapMetadata__BP_MountainPeakMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MountainPeakMapMetadata_C, 0x00A8);
		}

		// class UBP_Taiga64Override_C : public UMapMetadataOverride
		TEST_METHOD(BlueprintGeneratedClass__BP_Taiga64Override__BP_Taiga64Override_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Taiga64Override_C, 0x0098);
		}

		// class UBP_CorsescaFlamingForkBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CorsescaFlamingForkBlade__BP_CorsescaFlamingForkBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CorsescaFlamingForkBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CorsescaFlamingForkBlade_C, 0x0080);
		}

		// class UBP_RankIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RankIcon__BP_RankIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, Rank_Index, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, ImageSize, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, UnknownData_XKTQ, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, RankImage, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, RankNames, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, RankImages, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, Rank_Title, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, Division_Color, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, TitleColors, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankIcon_C, Rank_MMR, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RankIcon_C, 0x034C);
		}

		// class UBP_RadialGradient_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RadialGradient__BP_RadialGradient_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialGradient_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialGradient_C, Mat, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialGradient_C, Radius, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialGradient_C, Density, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialGradient_C, Invert, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RadialGradient_C, 0x024C);
		}

		// class UBP_KnightPauldrons1x2_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KnightPauldrons1x2__BP_KnightPauldrons1x2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KnightPauldrons1x2_C, 0x01A0);
		}

		// class UBP_ClothVest_C : public UBP_Tier0UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ClothVest__BP_ClothVest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ClothVest_C, 0x01E8);
		}

		// class UGamepadCursorSettings : public UDeveloperSettings
		TEST_METHOD(Class__GamepadUMGPlugin__GamepadCursorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, AnalogCursorAccelerationCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, MaxAnalogCursorSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, MaxAnalogCursorSpeedWhenHovered, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, AnalogCursorDragCoefficient, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, AnalogCursorDragCoefficientWhenHovered, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, MinAnalogCursorSpeed, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, AnalogCursorDeadZone, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, AnalogCursorAccelerationMultiplier, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, AnalogCursorSize, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, bUseEngineAnalogCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, bAnalogCursorNoAcceleration, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadCursorSettings, UnknownData_2ME3, 0x00E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadCursorSettings, 0x00F8);
		}

		// class UVirtualCursorFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GamepadUMGPlugin__VirtualCursorFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualCursorFunctionLibrary, 0x0028);
		}

		// class UMovieSceneMediaPlayerPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, MediaSource, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, bLoop, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, UnknownData_AK59, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertySection, 0x00F0);
		}

		// class UMovieSceneMediaPlayerPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertyTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertyTrack, 0x0088);
		}

		// class UMovieSceneMediaSection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bLooping, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_TJYP, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, StartFrameOffset, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaTexture, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSoundComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bUseExternalMediaPlayer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_VCA4, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, ExternalMediaPlayer, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0110);
		}

		// class UMovieSceneMediaTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, MediaSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x0068);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, SectionToKey, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x0088);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0108);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_GFRL, 0x011E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0120);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0068);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0068);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_MVEH, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_FL4I, 0x01AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B0);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0068);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_J86K, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_58GB, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_A2OG, 0x072D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0730);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x0088);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0220);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x0088);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartFrameOffset, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_9XME, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttachActorData, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_NQKN, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0330);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0068);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_213X, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0178);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x0088);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0178);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x0090);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_2ZKJ, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0120);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0068);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0108);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, bCanBlend, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, UnknownData_KKO9, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0070);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_B87A, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_Z4QU, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0120);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0068);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0180);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0068);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0360);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_EI98, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x0090);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0178);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x0090);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x0088);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E0);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x0108);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01E0);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_00EI, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_VE9Z, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventReceivers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0080);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0168);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0180);
		}

		// class UMovieSceneFadeSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_8DEE, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x0198);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x0088);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x0088);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0170);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x0088);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_2EA4, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x00F8);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0068);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0068);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0070);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_W40B, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0070);
		}

		// class UMovieSceneObjectPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertySection, ObjectChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertySection, 0x01A0);
		}

		// class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, PropertyClass, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertyTrack, 0x0090);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, BoolParameterNamesAndCurves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, Vector2DParameterNamesAndCurves, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, TransformParameterNamesAndCurves, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0140);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0068);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0178);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0068);
		}

		// class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialSection, MaterialChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialSection, 0x01A0);
		}

		// class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, MaterialIndex, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_ALP1, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialTrack, 0x0090);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_WPST, 0x01D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x01E0);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_PMZ6, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x0070);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0180);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x0088);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0178);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0078);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0180);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x0088);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x0088);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_SCOD, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0368);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_AJWR, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x0090);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x0088);
		}

		// class ABP_ThrowingKnifeProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrowingKnifeProjectile__BP_ThrowingKnifeProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrowingKnifeProjectile_C, 0x07C4);
		}

		// class UBP_GenericEndScreen_C : public UBP_PostMatchScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GenericEndScreen__BP_GenericEndScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, ShowAnim, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, MapVoteEntryAnim, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, BP_HomeScoreboardContainer, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, BP_MapVote, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, BP_Rewards2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, BP_ShowChatPrompt, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, Image_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, MapChangeText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, MapVoteTab, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, ScoreboardTab, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericEndScreen_C, WidgetSwitcher_1, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GenericEndScreen_C, 0x02D0);
		}

		// class UBP_Executioner_MassiveGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Executioner_MassiveGuard__BP_Executioner_MassiveGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Executioner_MassiveGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Executioner_MassiveGuard_C, 0x0080);
		}

		// class UBP_Executioner_katzbalger_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Executioner_katzbalger__BP_Executioner_katzbalger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Executioner_katzbalger_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Executioner_katzbalger_C, 0x0080);
		}

		// class UBP_RecurveBowQuiver_C : public UQuiver
		TEST_METHOD(BlueprintGeneratedClass__BP_RecurveBowQuiver__BP_RecurveBowQuiver_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RecurveBowQuiver_C, 0x0070);
		}

		// class UHitShakeRecurve_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__HitShakeRecurve__HitShakeRecurve_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitShakeRecurve_C, 0x0160);
		}

		// class ABP_RecurveBowArrow_C : public ABP_ArrowProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RecurveBowArrow__BP_RecurveBowArrow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RecurveBowArrow_C, 0x07C4);
		}

		// class AFieldSystemActor : public AActor
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldSystemActor, FieldSystemComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFieldSystemActor, 0x0228);
		}

		// class UFieldSystem : public UObject
		TEST_METHOD(Class__FieldSystemEngine__FieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystem, UnknownData_NU9Z, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystem, 0x0038);
		}

		// class UFieldSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, FieldSystem, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_UZYS, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, SupportedSolvers, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_DUEK, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemComponent, 0x0430);
		}

		// class UFieldSystemMetaData : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaData, 0x00B0);
		}

		// class UFieldSystemMetaDataIteration : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataIteration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, Iterations, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, UnknownData_XEHE, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataIteration, 0x00B8);
		}

		// class UFieldSystemMetaDataProcessingResolution : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataProcessingResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, ResolutionType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, UnknownData_YNTR, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataProcessingResolution, 0x00B8);
		}

		// class UFieldNodeBase : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeBase, 0x00B0);
		}

		// class UFieldNodeInt : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeInt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeInt, 0x00B0);
		}

		// class UFieldNodeFloat : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeFloat, 0x00B0);
		}

		// class UFieldNodeVector : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeVector, 0x00B0);
		}

		// class UUniformInteger : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__UniformInteger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, UnknownData_3UFV, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformInteger, 0x00B8);
		}

		// class URadialIntMask : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__RadialIntMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Position, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, InteriorValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, ExteriorValue, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, SetMaskCondition, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, UnknownData_YFZP, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialIntMask, 0x00D0);
		}

		// class UUniformScalar : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__UniformScalar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, UnknownData_AG13, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformScalar, 0x00B8);
		}

		// class URadialFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__RadialFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Radius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Falloff, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, UnknownData_4GPI, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialFalloff, 0x00D8);
		}

		// class UPlaneFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__PlaneFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Distance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Normal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Falloff, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, UnknownData_OEPR, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneFalloff, 0x00E0);
		}

		// class UBoxFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__BoxFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Falloff, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, UnknownData_J0MN, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxFalloff, 0x0100);
		}

		// class UNoiseField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__NoiseField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MinRange, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MaxRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, UnknownData_RYGS, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, Transform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoiseField, 0x00F0);
		}

		// class UUniformVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__UniformVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Direction, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformVector, 0x00C0);
		}

		// class URadialVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RadialVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Position, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialVector, 0x00C0);
		}

		// class URandomVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RandomVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, UnknownData_PK61, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomVector, 0x00B8);
		}

		// class UOperatorField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__OperatorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_02MG, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, RightField, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, LeftField, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Operation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_CF8G, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOperatorField, 0x00D0);
		}

		// class UToIntegerField : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__ToIntegerField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToIntegerField, FloatField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToIntegerField, 0x00B8);
		}

		// class UToFloatField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__ToFloatField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToFloatField, IntField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToFloatField, 0x00B8);
		}

		// class UCullingField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__CullingField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Culling, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Field, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Operation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, UnknownData_1MMT, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCullingField, 0x00C8);
		}

		// class UReturnResultsTerminal : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__ReturnResultsTerminal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReturnResultsTerminal, 0x00B0);
		}

		// class UBP_TrapWidget_C : public UMordhauUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TrapWidget__BP_TrapWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrapWidget_C, Image_1, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TrapWidget_C, 0x0240);
		}

		// class UBP_HeavyHandaxe_WorkersHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeavyHandaxe_WorkersHead__BP_HeavyHandaxe_WorkersHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeavyHandaxe_WorkersHead_C, 0x0078);
		}

		// class UBP_HeavyHandaxe_WoodworkersHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeavyHandaxe_WoodworkersHandle__BP_HeavyHandaxe_WoodworkersHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeavyHandaxe_WoodworkersHandle_C, 0x0078);
		}

		// class UBP_HeavyHandaxe_LordsHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeavyHandaxe_LordsHead__BP_HeavyHandaxe_LordsHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeavyHandaxe_LordsHead_C, 0x0078);
		}

		// class UBP_HeavyHandaxe_CrudeSpike_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeavyHandaxe_CrudeSpike__BP_HeavyHandaxe_CrudeSpike_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeavyHandaxe_CrudeSpike_C, 0x0078);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_1B6A, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// class UAnimationDataSourceRegistry : public UObject
		TEST_METHOD(Class__AnimationCore__AnimationDataSourceRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationDataSourceRegistry, DataSources, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationDataSourceRegistry, 0x0078);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// class UAnimSequencerInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequencerInstance, UnknownData_D0RM, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x0270);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_3V86, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// class USequencerAnimationSupport : public UInterface
		TEST_METHOD(Class__AnimGraphRuntime__SequencerAnimationSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequencerAnimationSupport, 0x0028);
		}

		// class UMyPluginObject : public UObject
		TEST_METHOD(Class__UObjectPlugin__MyPluginObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyPluginObject, MyStruct, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMyPluginObject, 0x0038);
		}

		// class UBP_LeatherColor19_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor19__BP_LeatherColor19_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor19_C, 0x0078);
		}

		// class UBP_LeatherColor18_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor18__BP_LeatherColor18_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor18_C, 0x0078);
		}

		// class UBP_HairColor6_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor6__BP_HairColor6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor6_C, 0x0078);
		}

		// class UBP_HairColor5_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor5__BP_HairColor5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor5_C, 0x0078);
		}

		// class UBP_FurColor6_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor6__BP_FurColor6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor6_C, 0x0078);
		}

		// class UBP_FurColor18_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor18__BP_FurColor18_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor18_C, 0x0078);
		}

		// class UBP_FurColor15_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor15__BP_FurColor15_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor15_C, 0x0078);
		}

		// class UBP_EyeColor13_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor13__BP_EyeColor13_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor13_C, 0x0078);
		}

		// class UBP_Cloth9_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth9__BP_Cloth9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth9_C, 0x0078);
		}

		// class UBP_Cloth51_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth51__BP_Cloth51_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth51_C, 0x0078);
		}

		// class UChaosDestructionListener : public USceneComponent
		TEST_METHOD(Class__GeometryCollectionEngine__ChaosDestructionListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_78X5, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, CollisionEventRequestSettings, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, BreakingEventRequestSettings, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, TrailingEventRequestSettings, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_QOBC, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, ChaosSolverActors, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, GeometryCollectionActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnCollisionEvents, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnBreakingEvents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnTrailingEvents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_AMFK, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDestructionListener, 0x0420);
		}

		// class AGeometryCollectionActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionDebugDrawComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionActor, 0x0230);
		}

		// class UGeometryCollectionCache : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, RecordedData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, SupportedCollection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, CompatibleCollectionState, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionCache, 0x0050);
		}

		// class UGeometryCollectionComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_IVHT, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ChaosSolverActor, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_9WAP, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RestCollection, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitializationFields, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Simulating, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_VUW7, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ObjectType, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, EnableClustering, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_WZPT, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterGroupIndex, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxClusterLevel, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_XPDC, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DamageThreshold, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterConnectionType, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_TAGO, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionGroup, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionSampleFraction, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, LinearEtherDrag, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, AngularEtherDrag, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_KM6S, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterial, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialVelocityType, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_5W1V, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialLinearVelocity, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialAngularVelocity, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_22UY, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CacheParameters, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_T3KW, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosBreakEvent, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DesiredCacheTime, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CachePlayback, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_IUGT, 0x0625);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosPhysicsCollision, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyBreaks, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyCollisions, 0x0639);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_OX9J, 0x063A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DummyBodySetup, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_UO3C, 0x0820);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionComponent, 0x0840);
		}

		// class AGeometryCollectionDebugDrawActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, WarningMessage, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_LLNX, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SelectedRigidBody, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawHierarchy, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawClustering, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, HideGeometry, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyCollision, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bCollisionAtOrigin, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyTransform, 0x0247);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInertia, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyForce, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInfos, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransformIndex, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransform, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowParent, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowLevel, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowConnectivityEdges, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryIndex, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryTransform, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowBoundingBox, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaces, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceIndices, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceNormals, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowSingleFace, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertices, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexIndices, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexNormals, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bUseActiveVisualization, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, PointThickness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LineThickness, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bTextShadow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_NBHV, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TextScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, NormalScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, AxisScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ArrowScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyIdColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyTransformScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyCollisionColor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInertiaColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyVelocityColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyForceColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInfoColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformIndexColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LevelColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ParentColor, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryIndexColor, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryTransformScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, BoundingBoxColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceIndexColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceNormalColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexIndexColor, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexNormalColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_MW3V, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SpriteComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_W7HS, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionDebugDrawActor, 0x0308);
		}

		// class UGeometryCollectionDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_G1XD, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawComponent, 0x00C8);
		}

		// class UGeometryCollection : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_KGEL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, ImplicitType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_CQ3F, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinLevelSetResolution, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxLevelSetResolution, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinClusterLevelSetResolution, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxClusterLevelSetResolution, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionObjectReductionPercentage, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, bMassAsDensity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_0ZY4, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Mass, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinimumMassClamp, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionParticlesFraction, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaximumCollisionParticles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_OTV4, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, SizeSpecificData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, EnableRemovePiecesOnFracture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_KREM, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, RemoveOnFractureMaterials, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, PersistentGuid, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, StateGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, BoneSelectedMaterialIndex, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_9NKS, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollection, 0x00D0);
		}

		// class AGeometryCollectionRenderLevelSetActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionRenderLevelSetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RayMarchMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, SurfaceTolerance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Isovalue, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Enabled, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, UnknownData_G8SS, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionRenderLevelSetActor, 0x02C0);
		}

		// class USkeletalMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__SkeletalMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_ZPMI, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, PhysicalMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ChaosSolverActor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bSimulating, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bNotifyCollisions, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ObjectType, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_FGEF, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, Density, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinMass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxMass, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_G2LZ, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeParticlesPerUnitArea, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMinNumParticles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMaxNumParticles, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinLevelSetResolution, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxLevelSetResolution, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionGroup, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialVelocityType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_L6J8, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialLinearVelocity, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialAngularVelocity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OnChaosPhysicsCollision, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_U75H, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimulationComponent, 0x0138);
		}

		// class UStaticMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__StaticMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_R3P0, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Simulating, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, bNotifyCollisions, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ObjectType, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_Y6BF, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Mass, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, CollisionType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ImplicitType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_JEG0, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MinLevelSetResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MaxLevelSetResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialVelocityType, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_CD5C, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialLinearVelocity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialAngularVelocity, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, DamageThreshold, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_CHN4, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, PhysicalMaterial, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ChaosSolverActor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, OnChaosPhysicsCollision, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_T3LK, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, SimulatedComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_6MHZ, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSimulationComponent, 0x0138);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// class UBP_MaleFace01_C : public UCharacterFace
		TEST_METHOD(BlueprintGeneratedClass__BP_MaleFace01__BP_MaleFace01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MaleFace01_C, 0x01D8);
		}

		// class UBP_Emblem_SwordOfTheWild_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_SwordOfTheWild__BP_Emblem_SwordOfTheWild_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_SwordOfTheWild_C, 0x0060);
		}

		// class UBP_Emblem_RoyalPug_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_RoyalPug__BP_Emblem_RoyalPug_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_RoyalPug_C, 0x0060);
		}

		// class UBP_Emblem_RaptorRider_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_RaptorRider__BP_Emblem_RaptorRider_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_RaptorRider_C, 0x0060);
		}

		// class UBP_Emblem_Gamblersbane_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Gamblersbane__BP_Emblem_Gamblersbane_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Gamblersbane_C, 0x0060);
		}

		// class UBP_Sun_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Sun__BP_Sun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Sun_C, 0x0060);
		}

		// class UBP_LongGroomedMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_LongGroomedMale02__BP_LongGroomedMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongGroomedMale02_C, 0x0078);
		}

		// class UBP_GoateeMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_GoateeMale02__BP_GoateeMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GoateeMale02_C, 0x0078);
		}

		// class UBP_ChatBoxEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ChatBoxEntry__BP_ChatBoxEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, EntryAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, All, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, Button_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, Image_5, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, Image_15, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, Image_ChatNameIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, SizeBox_ChatIcon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, Text, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, usernameText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, Message, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, Username_Color, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, Prefix, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, HidePrefixAndName, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, UnknownData_2QW0, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, Chat_Box_Ref, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, LastTextInputDialog, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, Player, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, OptionMap, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, Chat_User_Type, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, UnknownData_3R9B, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatBoxEntry_C, BanDuration, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChatBoxEntry_C, 0x03A8);
		}

		// class UBP_KilledByPanelArmorEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_KilledByPanelArmorEntry__BP_KilledByPanelArmorEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanelArmorEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanelArmorEntry_C, FlashAnimation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanelArmorEntry_C, ArmorLevel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanelArmorEntry_C, BodySlot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanelArmorEntry_C, Armor_Slot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanelArmorEntry_C, UnknownData_LKCX, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanelArmorEntry_C, ArmorClass, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KilledByPanelArmorEntry_C, 0x0258);
		}

		// class UBP_FlutedKnightPauldrons1x2_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlutedKnightPauldrons1x2__BP_FlutedKnightPauldrons1x2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlutedKnightPauldrons1x2_C, 0x01A0);
		}

		// class ABP_Bow_C : public ABP_MissileEquipment_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bow__BP_Bow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, UberGraphFrame, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, FireArrows, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, UnknownData_UUFQ, 0x0CE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, FireEffectParticleComponent, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, FireEffectAudioComponent, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, FireArrowProjectile, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, OriginalProjectileClass, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, FireArrowsParticleSystem, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, FireArrowsTransform, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, FireArrowsSound, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, FireArrowsFireSound, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, OriginalFireSound, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bow_C, InternalUsingFireArrows, 0x0D58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bow_C, 0x0D59);
		}

		// class UAB_MordhauCharacterAnimation_C : public UMordhauAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_MordhauCharacterAnimation__AB_MordhauCharacterAnimation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UberGraphFrame, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_208, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_Dismemberment, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotationMultiplier_4, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotationMultiplier_3, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequenceEvaluator_5, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequenceEvaluator_4, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequenceEvaluator_3, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ApplyAdditive_11, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ApplyAdditive_10, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_207, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_206, 0x1598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_205, 0x16A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_44, 0x17A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_43, 0x1898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_WeightShift, 0x1988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_204, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_203, 0x1BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_202, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_201, 0x1DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_200, 0x1EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_199, 0x1FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_198, 0x20D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UnknownData_AKV4, 0x21D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIKOffset_8, 0x21E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIKOffset_7, 0x23F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_197, 0x2600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_196, 0x2708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_195, 0x2810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_194, 0x2918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_193, 0x2A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_192, 0x2B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_191, 0x2C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_190, 0x2D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_FaceCustomization, 0x2E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SaveCachedPose, 0x2F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_141, 0x2FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_140, 0x3008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_139, 0x3030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_138, 0x3058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_137, 0x3080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_136, 0x30A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_135, 0x30D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_57, 0x30F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_68, 0x3170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_56, 0x31A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_67, 0x3218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_55, 0x3248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_66, 0x32C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_189, 0x32F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_188, 0x33F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_187, 0x3500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_186, 0x3608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_185, 0x3710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_184, 0x3818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_183, 0x3920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_182, 0x3A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_181, 0x3B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_180, 0x3C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ApplyAdditive_9, 0x3D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_54, 0x3E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_53, 0x3E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ApplyAdditive_8, 0x3EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_31, 0x3FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_30, 0x40A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_28, 0x4180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_27, 0x41A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_179, 0x41C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_178, 0x42C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendListByBool_8, 0x43D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_65, 0x4470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateMachine_10, 0x44A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_134, 0x4550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_133, 0x4578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_132, 0x45A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_131, 0x45C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_130, 0x45F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_129, 0x4618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_128, 0x4640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_127, 0x4668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_126, 0x4690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_125, 0x46B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_124, 0x46E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_123, 0x4708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_122, 0x4730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_121, 0x4758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_120, 0x4780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_119, 0x47A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_118, 0x47D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_117, 0x47F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_116, 0x4820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_115, 0x4848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_114, 0x4870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_113, 0x4898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_26, 0x48C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_52, 0x48E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_16, 0x4958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_177, 0x4A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_27, 0x4B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_64, 0x4B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_51, 0x4BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_15, 0x4C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_26, 0x4CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_25, 0x4D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_25, 0x4D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_176, 0x4D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_24, 0x4E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_175, 0x4E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_174, 0x4F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_50, 0x5080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_63, 0x50F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_49, 0x5128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_14, 0x51A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_23, 0x5268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_24, 0x5288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_173, 0x52A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_172, 0x53B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_23, 0x54B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_22, 0x54D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_171, 0x54F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_48, 0x5600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_62, 0x5678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_22, 0x56A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_21, 0x56C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_170, 0x56E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_112, 0x57F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_111, 0x5818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_47, 0x5840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_61, 0x58B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_46, 0x58E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_60, 0x5960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateMachine_9, 0x5990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_59, 0x5A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_15, 0x5A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_169, 0x5B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_42, 0x5C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_20, 0x5D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_168, 0x5F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_167, 0x6048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_166, 0x6150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_110, 0x6258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_109, 0x6280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_108, 0x62A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_107, 0x62D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_106, 0x62F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_105, 0x6320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_104, 0x6348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_103, 0x6370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_102, 0x6398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_101, 0x63C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_100, 0x63E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_99, 0x6410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_98, 0x6438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_97, 0x6460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_96, 0x6488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_95, 0x64B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_94, 0x64D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_93, 0x6500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_92, 0x6528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_91, 0x6550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_90, 0x6578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_89, 0x65A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_88, 0x65C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_87, 0x65F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_86, 0x6618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_85, 0x6640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_84, 0x6668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_83, 0x6690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_82, 0x66B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_81, 0x66E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_29, 0x6708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_58, 0x67E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_45, 0x6818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_57, 0x6890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_44, 0x68C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_56, 0x6938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_IdentityPose_8, 0x6968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_13, 0x6980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_28, 0x6A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_55, 0x6B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_27, 0x6B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_54, 0x6C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_43, 0x6C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_53, 0x6CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_42, 0x6D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_52, 0x6D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_12, 0x6DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_41, 0x6E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_40, 0x6EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_51, 0x6F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_26, 0x6FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_50, 0x7080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_25, 0x70B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_49, 0x7190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_39, 0x71C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_48, 0x7238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_11, 0x7268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_IdentityPose_7, 0x7330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_24, 0x7348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_47, 0x7428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_IdentityPose_6, 0x7458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_46, 0x7470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateMachine_8, 0x74A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_AttackAngling_3, 0x7550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_165, 0x7750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UnknownData_VSZR, 0x7858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_19, 0x7860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_41, 0x7A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_40, 0x7B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_39, 0x7C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_38, 0x7D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_37, 0x7E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_36, 0x7EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_35, 0x7FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_34, 0x80D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_21, 0x81C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_20, 0x81E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIKOffset_6, 0x8200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIKOffset_5, 0x8410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_164, 0x8620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_163, 0x8728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_162, 0x8830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_161, 0x8938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_33, 0x8A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_32, 0x8B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequenceEvaluator_2, 0x8C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequenceEvaluator, 0x8C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ApplyAdditive_7, 0x8CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_160, 0x8D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_159, 0x8E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_31, 0x8F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_30, 0x9078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_29, 0x9168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_158, 0x9258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_157, 0x9360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_28, 0x9468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_27, 0x9558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_26, 0x9648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_156, 0x9738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_155, 0x9840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_154, 0x9948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LayeredBoneBlend_8, 0x9A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_Slot_6, 0x9B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_20, 0x9B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_19, 0x9B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_45, 0x9B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_14, 0x9BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_153, 0x9CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UnknownData_GO2D, 0x9DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_18, 0x9DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_25, 0x9FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_17, 0xA0A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_152, 0xA280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_151, 0xA388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_150, 0xA490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_149, 0xA598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_148, 0xA6A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_147, 0xA7A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_146, 0xA8B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_145, 0xA9B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_144, 0xAAC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_13, 0xABC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_143, 0xACC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_142, 0xADC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_141, 0xAED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_140, 0xAFD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_139, 0xB0E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_138, 0xB1E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_137, 0xB2F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_136, 0xB3F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_135, 0xB500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_AttackAngling_2, 0xB608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_80, 0xB808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_79, 0xB830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_78, 0xB858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_77, 0xB880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_76, 0xB8A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_75, 0xB8D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_74, 0xB8F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_73, 0xB920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_72, 0xB948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_71, 0xB970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_70, 0xB998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_69, 0xB9C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_68, 0xB9E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_67, 0xBA10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_66, 0xBA38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_65, 0xBA60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_64, 0xBA88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_63, 0xBAB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_62, 0xBAD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_61, 0xBB00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_60, 0xBB28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_59, 0xBB50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_58, 0xBB78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_57, 0xBBA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_56, 0xBBC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_55, 0xBBF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_54, 0xBC18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_53, 0xBC40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_52, 0xBC68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_51, 0xBC90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_23, 0xBCB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_44, 0xBD98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_38, 0xBDC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_43, 0xBE40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_37, 0xBE70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_42, 0xBEE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_IdentityPose_5, 0xBF18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_10, 0xBF30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_22, 0xBFF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_41, 0xC0D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_21, 0xC108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_40, 0xC1E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_36, 0xC218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_39, 0xC290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_35, 0xC2C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_38, 0xC338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_9, 0xC368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_34, 0xC430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_33, 0xC4A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_37, 0xC520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_20, 0xC550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_36, 0xC630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_19, 0xC660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_35, 0xC740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_32, 0xC770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_34, 0xC7E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_8, 0xC818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_IdentityPose_4, 0xC8E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_18, 0xC8F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_33, 0xC9D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_IdentityPose_3, 0xCA08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_32, 0xCA20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateMachine_7, 0xCA50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_134, 0xCB00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_133, 0xCC08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_16, 0xCD10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_132, 0xCEF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_131, 0xCFF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ApplyAdditive_6, 0xD100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_130, 0xD1C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_129, 0xD2D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_12, 0xD3D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_128, 0xD4D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_50, 0xD5D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_49, 0xD600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_48, 0xD628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_47, 0xD650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_31, 0xD678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_31, 0xD6F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_30, 0xD720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_30, 0xD798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_19, 0xD7C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_18, 0xD7E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpaceEvaluator, 0xD808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_29, 0xD8F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateMachine_6, 0xD920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_46, 0xD9D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_45, 0xD9F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_44, 0xDA20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_43, 0xDA48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_29, 0xDA70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_28, 0xDAE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_28, 0xDB18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_27, 0xDB90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ApplyAdditive_5, 0xDBC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_27, 0xDC88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_26, 0xDD00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ApplyAdditive_4, 0xDD78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_17, 0xDE40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_16, 0xDF20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendListByBool_7, 0xE000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_26, 0xE0A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateMachine_5, 0xE0D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_127, 0xE180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_126, 0xE288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_24, 0xE390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_23, 0xE480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_22, 0xE570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_125, 0xE660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_124, 0xE768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_21, 0xE870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_20, 0xE960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_19, 0xEA50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_123, 0xEB40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_122, 0xEC48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_121, 0xED50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_120, 0xEE58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LayeredBoneBlend_7, 0xEF60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_Slot_5, 0xF020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_18, 0xF068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_17, 0xF088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_25, 0xF0A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_119, 0xF0D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_118, 0xF1E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_17, 0xF2E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LayeredBoneBlend_6, 0xF308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UnknownData_LV5C, 0xF3C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_15, 0xF3D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_14, 0xF5B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_117, 0xF790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_16, 0xF898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_15, 0xF8B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_14, 0xF998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_116, 0xFA78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_115, 0xFB80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_114, 0xFC88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_113, 0xFD90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_7, 0xFE98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_112, 0xFF60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_111, 0x10068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_110, 0x10170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_109, 0x10278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_13, 0x10380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_12, 0x10560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_108, 0x10740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_107, 0x10848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_106, 0x10950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_105, 0x10A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_104, 0x10B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_103, 0x10C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_11, 0x10D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_13, 0x10E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_25, 0x10F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendListByBool_6, 0x10FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_16, 0x11060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_15, 0x11080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_24, 0x110A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_10, 0x110D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_102, 0x111C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_101, 0x112D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_100, 0x113D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_99, 0x114E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_12, 0x115E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_42, 0x116C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_41, 0x116F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_24, 0x11718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_23, 0x11790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_23, 0x117C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_22, 0x11838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateMachine_4, 0x11868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LayeredBoneBlend_5, 0x11918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_15, 0x119D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_14, 0x119F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UnknownData_50WC, 0x11A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_11, 0x11A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_10, 0x11C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_21, 0x11DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_98, 0x11E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_18, 0x11F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendBetweenBones_2, 0x12008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendBetweenBones, 0x12118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_97, 0x12228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_17, 0x12330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_16, 0x12420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_96, 0x12510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_95, 0x12618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_94, 0x12720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_93, 0x12828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_92, 0x12930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_91, 0x12A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_90, 0x12B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_9, 0x12C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_8, 0x12D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_89, 0x12E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_7, 0x12F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_6, 0x13038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_9, 0x13130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_8, 0x13310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_7, 0x134F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_6, 0x136D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_5, 0x138B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_88, 0x139A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_4, 0x13AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_3, 0x13BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_87, 0x13CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_86, 0x13DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIKOffset_4, 0x13EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_85, 0x140C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_84, 0x141C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_83, 0x142D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UnknownData_50O6, 0x143D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIKOffset_3, 0x143E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_Slot_4, 0x145F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_14, 0x14638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_82, 0x14658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_81, 0x14760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_80, 0x14868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_79, 0x14970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_13, 0x14A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_78, 0x14A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_22, 0x14BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_15, 0x14C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_77, 0x14D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_76, 0x14E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UnknownData_XNMY, 0x14F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_5, 0x14F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_75, 0x15100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_74, 0x15208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_73, 0x15310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_6, 0x15418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_72, 0x154E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_21, 0x155E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_13, 0x15660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_12, 0x15680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_20, 0x156A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_5, 0x15718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_71, 0x157E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot_2, 0x158E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_70, 0x159E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_69, 0x15AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_68, 0x15BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_67, 0x15CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_66, 0x15E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_65, 0x15F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_64, 0x16010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_63, 0x16118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_62, 0x16220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_61, 0x16328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_60, 0x16430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_59, 0x16538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_58, 0x16640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_57, 0x16748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_AttackAngling, 0x16850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_56, 0x16A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_55, 0x16B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_54, 0x16C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_53, 0x16D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_12, 0x16E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_14, 0x16E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_13, 0x16F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LayeredBoneBlend_4, 0x17070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_11, 0x17130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_52, 0x17150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_51, 0x17258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_12, 0x17360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_11, 0x17450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_50, 0x17540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_49, 0x17648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_48, 0x17750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_47, 0x17858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_UseCachedPose_2, 0x17960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LayeredBoneBlend_3, 0x17988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_Slot_3, 0x17A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_10, 0x17A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_46, 0x17AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UnknownData_LOQO, 0x17BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_4, 0x17BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_UseCachedPose, 0x17DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_45, 0x17DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_11, 0x17ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_Slot_2, 0x17EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_44, 0x17F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_43, 0x18040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UnknownData_LPBG, 0x18148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_3, 0x18150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_42, 0x18330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_41, 0x18438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_40, 0x18540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_39, 0x18568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_38, 0x18590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_37, 0x185B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_36, 0x185E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_35, 0x18608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_34, 0x18630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_33, 0x18658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_32, 0x18680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_31, 0x186A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_30, 0x186D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_29, 0x186F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_28, 0x18720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_27, 0x18748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_26, 0x18770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_25, 0x18798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_24, 0x187C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_23, 0x187E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_22, 0x18810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_21, 0x18838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_20, 0x18860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_19, 0x18888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_18, 0x188B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_17, 0x188D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_16, 0x18900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_15, 0x18928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_14, 0x18950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_13, 0x18978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_12, 0x189A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_11, 0x189C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_10, 0x189F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_9, 0x18A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_8, 0x18A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_7, 0x18A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_19, 0x18A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_20, 0x18B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_4, 0x18B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_IdentityPose_2, 0x18C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_11, 0x18C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_19, 0x18CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_10, 0x18D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_18, 0x18E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_18, 0x18E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_17, 0x18EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_17, 0x18EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_16, 0x18F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_9, 0x18F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_15, 0x19068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_8, 0x19098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_14, 0x19178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_16, 0x191A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_13, 0x19220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_15, 0x19250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_12, 0x192C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_3, 0x192F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_14, 0x193C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_13, 0x19438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_11, 0x194B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_7, 0x194E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_10, 0x195C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_6, 0x195F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_9, 0x196D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_12, 0x19700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_8, 0x19778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_5, 0x197A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_7, 0x19888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_IdentityPose, 0x198B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_6, 0x198D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateMachine_3, 0x19900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ApplyAdditive_3, 0x199B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_40, 0x19A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_10, 0x19B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_9, 0x19C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_Slot, 0x19D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LayeredBoneBlend_2, 0x19DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_6, 0x19E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_5, 0x19E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_4, 0x19EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_3, 0x19EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult_2, 0x19F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_10, 0x19F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_8, 0x19F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_7, 0x1A040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_39, 0x1A130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_9, 0x1A238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_11, 0x1A258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_5, 0x1A2D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_38, 0x1A300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_9, 0x1A408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_37, 0x1A428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_8, 0x1A530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_36, 0x1A550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_7, 0x1A658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_8, 0x1A678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_35, 0x1A698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_6, 0x1A7A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_5, 0x1A890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_34, 0x1A980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_7, 0x1AA88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_6, 0x1AAA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_10, 0x1AAC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_9, 0x1AB40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend_2, 0x1ABB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_4, 0x1AC80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_33, 0x1ACB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_32, 0x1ADB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_4, 0x1AEC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_3, 0x1AFB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone_2, 0x1B0A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_CopyBone, 0x1B190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotateAroundPivot, 0x1B280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UnknownData_MZAH, 0x1B378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK_2, 0x1B380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIK, 0x1B560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SpeedWarping, 0x1B740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendListByBool_5, 0x1B8C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_31, 0x1B960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendListByBool_4, 0x1BA68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_8, 0x1BB08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_7, 0x1BB80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_30, 0x1BBF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_29, 0x1BD00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_28, 0x1BE08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_27, 0x1BF10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_26, 0x1C018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_25, 0x1C120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_5, 0x1C228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_6, 0x1C248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, UnknownData_ROR4, 0x1C268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIKOffset_2, 0x1C270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoBoneIKOffset, 0x1C480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_24, 0x1C690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_23, 0x1C798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_5, 0x1C8A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_4, 0x1C8C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TwoWayBlend, 0x1C8E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_22, 0x1C9A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_6, 0x1CAB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendListByBool_3, 0x1CB28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendListByBool_2, 0x1CBC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_5, 0x1CC68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_4, 0x1CCE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_3, 0x1CDC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_21, 0x1CEA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_4, 0x1CFA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_3, 0x1CFC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_20, 0x1CFE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendListByBool, 0x1D0F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer_2, 0x1D190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_3, 0x1D270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateMachine_2, 0x1D2A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_19, 0x1D350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult_2, 0x1D458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_TransitionResult, 0x1D488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_3, 0x1D4B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalRefPose, 0x1D4D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendListByInt, 0x1D4E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_MeshRefPose, 0x1D588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace_2, 0x1D598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_4, 0x1D5B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_3, 0x1D630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer_2, 0x1D6A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LayeredBoneBlend, 0x1D720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1D7E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_18, 0x1D800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_17, 0x1D908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ApplyAdditive_2, 0x1DA10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_BlendSpacePlayer, 0x1DAD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_SequencePlayer, 0x1DBB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateResult, 0x1DC30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_StateMachine, 0x1DC60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_LocalToComponentSpace, 0x1DD10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ApplyAdditive, 0x1DD30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_16, 0x1DDF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_15, 0x1DF00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_14, 0x1E008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_13, 0x1E110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ComponentToLocalSpace, 0x1E218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_Root, 0x1E238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_12, 0x1E268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_11, 0x1E370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_MordhauSpringBone_3, 0x1E478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_10, 0x1E5C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_MordhauSpringBone_2, 0x1E6C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_MordhauSpringBone, 0x1E810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_9, 0x1E958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_8, 0x1EA60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_7, 0x1EB68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotationMultiplier_2, 0x1EC70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_RotationMultiplier, 0x1ED60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_6, 0x1EE50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_5, 0x1EF58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_4, 0x1F060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_3, 0x1F168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone_2, 0x1F270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, AnimGraphNode_ModifyBone, 0x1F378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, DeathAnim, 0x1F480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, stickycomp, 0x1F488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MordhauCharacterAnimation_C, StaticVehicleAnim, 0x1F490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_MordhauCharacterAnimation_C, 0x1F498);
		}

		// class UBP_PlateColor19_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor19__BP_PlateColor19_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor19_C, 0x0078);
		}

		// class UBP_PlateColor18_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor18__BP_PlateColor18_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor18_C, 0x0078);
		}

		// class UBP_MetalDetailColor26_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor26__BP_MetalDetailColor26_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor26_C, 0x0078);
		}

		// class UBP_MetalDetailColor25_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor25__BP_MetalDetailColor25_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor25_C, 0x0078);
		}

		// class UBP_PartyMembersEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PartyMembersEntry__BP_PartyMembersEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, BP_PlayerWidget, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, Image_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, Image_3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, Image_5, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, JoinButton, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, JoinButtonContainer, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, KickButton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, KickButtonContainer, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, PartyLeaderImage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, PromoteButton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, PromoteButtonContainer, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PartyMembersEntry_C, StatusText, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PartyMembersEntry_C, 0x0298);
		}

		// class UBP_MapEntryLocalPlay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MapEntryLocalPlay__BP_MapEntryLocalPlay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, HoverAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, BP_RadialGradient, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, EntryButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, Image_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, MapName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, TeamImage, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, Thumbnail, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, SelectedStyle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, DeselectedStyle, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, Selected, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, bIsSelected, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, UnknownData_USJP, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, GameModeMapName, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapEntryLocalPlay_C, bIsInvasion, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MapEntryLocalPlay_C, 0x03A9);
		}

		// class UBP_LocalPlay_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LocalPlay__BP_LocalPlay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, BotSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, BP_MapList, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, DownArrow, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, GameModeComboBox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, Image_5, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, Image_9, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, Image_53, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, PlayerCountSlider, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, StartButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, TextBlock_13, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, Prefix, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, GameModes, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, Maps, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LocalPlay_C, LastSelectedMetadata, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LocalPlay_C, 0x0310);
		}

		// class UBP_LoadoutPicker_C : public UBP_CustomizationTab_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LoadoutPicker__BP_LoadoutPicker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, UnknownData_8L0L, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, Defaults, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, Image_2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, ItemEntriesBox, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, SelectMercBar, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, ToggleDefaultLoadouts, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, LoadoutEntries, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, Selected_Entry_Widget, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, Selected_Profile, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, Hovered_Profile, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, Hovered_Id, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, RandomPoseOffset, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadoutPicker_C, DefaultsHidden, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LoadoutPicker_C, 0x04F1);
		}

		// class UBP_PlayerWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PlayerWidget__BP_PlayerWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, BP_CasualRankDiamond, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, BP_CompetitiveRankIcon, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, BP_PlayerAvatar, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, BP_PlayerBanner, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, Image_5, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, Name, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, PlayerNameBox, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, RankBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, TextBlock_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, WidgetSwitcher_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, RankText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerWidget_C, Player, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerWidget_C, 0x0300);
		}

		// class UBTTask_SetLocationFromActor_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_SetLocationFromActor__BTTask_SetLocationFromActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetLocationFromActor_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetLocationFromActor_C, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetLocationFromActor_C, TargetActor, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetLocationFromActor_C, 0x0100);
		}

		// class UBP_Italian_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Italian_Arms__BP_Italian_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Italian_Arms_C, 0x01B8);
		}

		// class UBP_VeteranCuffs_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteranCuffs__BP_VeteranCuffs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteranCuffs_C, 0x01B8);
		}

		// class UBP_PeasantShirt_C : public UBP_Tier0UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PeasantShirt__BP_PeasantShirt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PeasantShirt_C, 0x01E8);
		}

		// class ABP_MasterField_C : public AMasterField
		TEST_METHOD(BlueprintGeneratedClass__BP_MasterField__BP_MasterField_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterField_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterField_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterField_C, InstigatorController, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MasterField_C, 0x0350);
		}

		// class ABP_ThrowableEquipment_C : public AMordhauEquipment
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrowableEquipment__BP_ThrowableEquipment_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ThrowableEquipment_C, UnknownData_DU56, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ThrowableEquipment_C, UberGraphFrame, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrowableEquipment_C, 0x0CD8);
		}

		// class ABP_Turd_C : public ABP_ThrowableEquipment_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Turd__BP_Turd_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Turd_C, 0x0CD8);
		}

		// class ABP_SmokeBomb_C : public ABP_ThrowableEquipment_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmokeBomb__BP_SmokeBomb_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmokeBomb_C, 0x0CD8);
		}

		// class UBP_AmmoWidget_C : public UMordhauUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_AmmoWidget__BP_AmmoWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AmmoWidget_C, Image_1, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AmmoWidget_C, 0x0240);
		}

		// class UBP_ModItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ModItem__BP_ModItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModItem_C, Image_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModItem_C, TextBlock_2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModItem_C, ModNumber, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ModItem_C, 0x0244);
		}

		// class UBP_DeoVolenteLongsword_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DeoVolenteLongsword__BP_DeoVolenteLongsword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DeoVolenteLongsword_C, 0x0078);
		}

		// class UBP_Longsword_GentleBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Longsword_GentleBlade__BP_Longsword_GentleBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Longsword_GentleBlade_C, 0x0078);
		}

		// class UBP_PolearmLong_LeftStrikeMotion_C : public UBP_Polearm_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PolearmLong_LeftStrikeMotion__BP_PolearmLong_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PolearmLong_LeftStrikeMotion_C, 0x1160);
		}

		// class UBP_Polearm_RightStabMotion_C : public UBP_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polearm_RightStabMotion__BP_Polearm_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polearm_RightStabMotion_C, 0x1108);
		}

		// class UBP_Polearm_LeftStrikeMotion_C : public UBP_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polearm_LeftStrikeMotion__BP_Polearm_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polearm_LeftStrikeMotion_C, 0x1160);
		}

		// class UBP_PolearmParryMotion_C : public UBP_ParryMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PolearmParryMotion__BP_PolearmParryMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PolearmParryMotion_C, 0x0570);
		}

		// class UBP_RaisedArmetPoint_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RaisedArmetPoint__BP_RaisedArmetPoint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RaisedArmetPoint_C, 0x01C8);
		}

		// class UBP_ArmetDome_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmetDome__BP_ArmetDome_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmetDome_C, 0x01C8);
		}

		// class UBP_messer_SwissSaber_grip2_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_SwissSaber_grip2__BP_messer_SwissSaber_grip2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_SwissSaber_grip2_C, 0x0078);
		}

		// class UBP_Rapier_ArtisanHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rapier_ArtisanHandle__BP_Rapier_ArtisanHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rapier_ArtisanHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rapier_ArtisanHandle_C, 0x0080);
		}

		// class UBP_Dagger_CommonBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Dagger_CommonBlade__BP_Dagger_CommonBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Dagger_CommonBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Dagger_CommonBlade_C, 0x0080);
		}

		// class UBP_Dagger_LopsidedBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Dagger_LopsidedBlade__BP_Dagger_LopsidedBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Dagger_LopsidedBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Dagger_LopsidedBlade_C, 0x0080);
		}

		// class ABP_DeployableBallistaProjectileFire_C : public ABP_DeployableBallistaProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DeployableBallistaProjectileFire__BP_DeployableBallistaProjectileFire_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DeployableBallistaProjectileFire_C, 0x07D0);
		}

		// class UBP_InteractWidget_C : public UMordhauUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InteractWidget__BP_InteractWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, BottomSegment, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, BP_ButtonPrompt, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, Image_4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, Image_5, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, ProgressBar, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, TextBlock_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, TextBlock_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, TextBlock_5, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, TopSegment, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, ShowTop, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, ShowBottom, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, UnknownData_HPQH, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InteractWidget_C, ProgressBarShape, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InteractWidget_C, 0x02A0);
		}

		// class UBP_Warhammer_Bohemian_FlutedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_Bohemian_FlutedHandle__BP_Warhammer_Bohemian_FlutedHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_Bohemian_FlutedHandle_C, 0x0078);
		}

		// class UBP_Warhammer_Bohemian_RivetedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_Bohemian_RivetedHandle__BP_Warhammer_Bohemian_RivetedHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_Bohemian_RivetedHandle_C, 0x0078);
		}

		// class UBP_Warhammer_UtilityHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Warhammer_UtilityHead__BP_Warhammer_UtilityHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Warhammer_UtilityHead_C, 0x0078);
		}

		// class UBP_BattleAxe_NarrowBeardHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BattleAxe_NarrowBeardHead__BP_BattleAxe_NarrowBeardHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BattleAxe_NarrowBeardHead_C, 0x0078);
		}

		// class UBP_Poleaxe_PenetratorSpike_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_PenetratorSpike__BP_Poleaxe_PenetratorSpike_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_PenetratorSpike_C, 0x0078);
		}

		// class UBP_Poleaxe_ReliableHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_ReliableHead__BP_Poleaxe_ReliableHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_ReliableHead_C, 0x0078);
		}

		// class UBP_Longsword_AdamantHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Longsword_AdamantHandle__BP_Longsword_AdamantHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Longsword_AdamantHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Longsword_AdamantHandle_C, 0x0080);
		}

		// class UBP_VideoSettings_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_VideoSettings__BP_VideoSettings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, ApplyAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, AAMethodDropdown, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, AAQualityDropdownhidden, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, AmbientOcclusionCheckbox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, ApplyButton, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, BloomSlider, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, CameraDistanceSlider, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, CharacterClothDropdown, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, CharacterQualityDropdown, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, EffectsQualityDropdown, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, FoliageDensityDropdown, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, FovSlider, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, FrameRateSlider, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, GammaSlider, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, HoveredSetting, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, Image_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, Image_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, Image_40, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, IndirectShadowsCheckbox, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, LensFlaresCheckbox, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, MotionBlurSlider, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, Overlay_2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, PPQualityDropdown, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, RagdollQualityDropdown, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, ReflexDropdown, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, ResetButton, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, ResolutionDropdown, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, ResolutionScaleSlider, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, ShadowQualityDropdown, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, SSRDropdown, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, TextureQualityDropdown, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, ViewDistanceDropdown, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, VsyncCheckbox, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettings_C, WindowModeDropdown, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VideoSettings_C, 0x0350);
		}

		// class UBP_VikingSword_WoodGrip_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingSword_WoodGrip__BP_VikingSword_WoodGrip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VikingSword_WoodGrip_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingSword_WoodGrip_C, 0x0080);
		}

		// class UBP_Zweihander_AlpineGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Zweihander_AlpineGuard__BP_Zweihander_AlpineGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Zweihander_AlpineGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Zweihander_AlpineGuard_C, 0x0080);
		}

		// class UBP_Zweihander_BigBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Zweihander_BigBlade__BP_Zweihander_BigBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Zweihander_BigBlade_C, 0x0078);
		}

		// class UBP_Zweihander_LenientHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Zweihander_LenientHandle__BP_Zweihander_LenientHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Zweihander_LenientHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Zweihander_LenientHandle_C, 0x0080);
		}

		// class UBP_Zweihander_SecureHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Zweihander_SecureHandle__BP_Zweihander_SecureHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Zweihander_SecureHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Zweihander_SecureHandle_C, 0x0080);
		}

		// class UBP_BastardSword_FancyHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword_FancyHandle__BP_BastardSword_FancyHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BastardSword_FancyHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BastardSword_FancyHandle_C, 0x0080);
		}

		// class UBP_BastardSword_featherdamascus_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword_featherdamascus__BP_BastardSword_featherdamascus_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BastardSword_featherdamascus_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BastardSword_featherdamascus_C, 0x0080);
		}

		// class UBP_BastardSword_StandardBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword_StandardBlade__BP_BastardSword_StandardBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BastardSword_StandardBlade_C, 0x0078);
		}

		// class UBP_LeaderboardEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LeaderboardEntry__BP_LeaderboardEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, BP_PlayerAvatar, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, BP_RankIcon, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, Button_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, MMRText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, NameText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, RankText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, RankPos, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, MMR, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, Player, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardEntry_C, Name, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeaderboardEntry_C, 0x02E8);
		}

		// class UBP_HighlandsMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_HighlandsMapMetadata__BP_HighlandsMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HighlandsMapMetadata_C, 0x00A8);
		}

		// class UBP_CheckeredGambesonChestLow_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CheckeredGambesonChestLow__BP_CheckeredGambesonChestLow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CheckeredGambesonChestLow_C, 0x01A0);
		}

		// class UBP_VeteransSabaton_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransSabaton__BP_VeteransSabaton_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransSabaton_C, 0x01A0);
		}

		// class USignificanceManager : public UObject
		TEST_METHOD(Class__SignificanceManager__SignificanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, UnknownData_4UII, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, SignificanceManagerClassName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USignificanceManager, 0x0120);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_LXMY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_Y3TI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0068);
		}

		// class AGeometryCacheActor : public AActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0228);
		}

		// class UGeometryCacheCodecBase : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0038);
		}

		// class UGeometryCacheCodecRaw : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_Y5U3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0040);
		}

		// class UGeometryCacheCodecV1 : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_ZBGC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0040);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_RCW7, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_X1FW, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_NF9E, 0x0469);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x0470);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_NN1I, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0058);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_BVV1, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0080);
		}

		// class UGeometryCacheTrackStreamable : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_GHD1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_ET6B, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x00D0);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_MBP0, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0100);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_5PUH, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0100);
		}

		// class AMagicLeapSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, SharedWorldData, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, OnNewLocalDataFromClients, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, PinSelectionConfidenceThreshold, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, UnknownData_WUMU, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, ChosenOne, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldGameMode, 0x03D8);
		}

		// class AMagicLeapSharedWorldGameState : public AGameState
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, SharedWorldData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, AlignmentTransforms, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, OnSharedWorldDataUpdated, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, OnAlignmentTransformsUpdated, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldGameState, 0x02D0);
		}

		// class AMagicLeapSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldPlayerController, UnknownData_GQQM, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldPlayerController, 0x0588);
		}

		// class UBP_Estoc_WingedGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Estoc_WingedGuard__BP_Estoc_WingedGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Estoc_WingedGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Estoc_WingedGuard_C, 0x0080);
		}

		// class UBP_waraxe_Nomad_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_waraxe_Nomad__BP_waraxe_Nomad_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_waraxe_Nomad_C, 0x0078);
		}

		// class ABP_ThrownMaceProjectile_WarAxe_C : public ABP_ThrownSpinningProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownMaceProjectile_WarAxe__BP_ThrownMaceProjectile_WarAxe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownMaceProjectile_WarAxe_C, 0x07D0);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_4267, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x0778);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// class UBP_FryingPanPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FryingPanPart__BP_FryingPanPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FryingPanPart_C, 0x0078);
		}

		// class UBP_Polehammer_Shaft3_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Shaft3__BP_Polehammer_Shaft3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Shaft3_C, 0x0078);
		}

		// class UBP_Eyeball01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Eyeball01__BP_Eyeball01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Eyeball01_C, 0x0060);
		}

		// class UBP_Dog01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Dog01__BP_Dog01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Dog01_C, 0x0060);
		}

		// class UBP_Crown01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Crown01__BP_Crown01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Crown01_C, 0x0060);
		}

		// class UBP_WoodColor8_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor8__BP_WoodColor8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor8_C, 0x0078);
		}

		// class UBP_WoodColor10_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor10__BP_WoodColor10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor10_C, 0x0078);
		}

		// class UBP_SkinColor5_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_SkinColor5__BP_SkinColor5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SkinColor5_C, 0x0078);
		}

		// class UBP_SkinColor4_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_SkinColor4__BP_SkinColor4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SkinColor4_C, 0x0078);
		}

		// class UBOT_Peasant3_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Peasant3__BOT_Peasant3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Peasant3_C, 0x0108);
		}

		// class UBP_Baron_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Baron__BP_Baron_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Baron_C, 0x0060);
		}

		// class UBP_ShieldWall_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_ShieldWall_Banner__BP_ShieldWall_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShieldWall_Banner_C, 0x0060);
		}

		// class UBP_Roasted_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Roasted_Banner__BP_Roasted_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Roasted_Banner_C, 0x0060);
		}

		// class UBP_Knotting2_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Knotting2__BP_Knotting2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Knotting2_C, 0x0060);
		}

		// class UBP_Gothic2_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Gothic2__BP_Gothic2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gothic2_C, 0x0060);
		}

		// class UBP_CloseCut1Male02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_CloseCut1Male02__BP_CloseCut1Male02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CloseCut1Male02_C, 0x0078);
		}

		// class ABP_MordhauGameMode_C : public AMordhauGameMode
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauGameMode__BP_MordhauGameMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameMode_C, UberGraphFrame, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameMode_C, DefaultSceneRoot, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameMode_C, MaxRemoveCount, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameMode_C, bCheckTeam, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameMode_C, UnknownData_S08P, 0x05B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameMode_C, RemoveCount, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameMode_C, UnknownData_BB0W, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameMode_C, AIControllerClass, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauGameMode_C, 0x05C8);
		}

		// class UHitShakeStab_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__HitShakeStab__HitShakeStab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitShakeStab_C, 0x0160);
		}

		// class UBP_Checkbox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Checkbox__BP_Checkbox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Checkbox_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Checkbox_C, CheckBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Checkbox_C, TextBlock, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Checkbox_C, CheckboxText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Checkbox_C, OnCheckStateChanged, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Checkbox_C, IsChecked, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Checkbox_C, 0x0271);
		}

		// class ABP_MordhauCustomizationPlatform_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauCustomizationPlatform__BP_MordhauCustomizationPlatform_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, DefaultSceneRoot, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, CustomizationObserver, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, CharacterDoll, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, EquipmentDoll, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, EquipmentDollRotation, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, UnknownData_3NCE, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, ControllingWidget, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, CharacterDollRotation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, EquipmentDollZoom, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, CharacterDollZoom, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, CurrentZoom, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, QueuedProfileUpdate, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, LastProfileUpdateFrame, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, WantsProfileUpdate, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, UnknownData_UNCV, 0x0325);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, LastEquipmentId, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, CharacterDollRotationTarget, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, EquipmentDollRotationTarget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, LastEquipmentSkin, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, FastRotationUpdate, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, UnknownData_M3K7, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, LastShield, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, LastNonShieldEquipment, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, CharacterInstantEquipmentSwitch, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, UnknownData_089U, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, EquipmentCustomizationSpot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, CharacterDollCreatedFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, DoCharacterPreviewPose, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, UnknownData_G54N, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, PreviewPoseRandom, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, ForceColorOverride, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, UnknownData_HU9F, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, ColorAOverride, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, ColorBOverride, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCustomizationPlatform_C, MainMenu, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauCustomizationPlatform_C, 0x0398);
		}

		// class UBP_DuelGameModeMetadata_C : public UGameModeMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_DuelGameModeMetadata__BP_DuelGameModeMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DuelGameModeMetadata_C, 0x00D0);
		}

		// class UBP_BattleRoyaleGameModeMetadata_C : public UGameModeMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_BattleRoyaleGameModeMetadata__BP_BattleRoyaleGameModeMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BattleRoyaleGameModeMetadata_C, 0x00D0);
		}

		// class ABP_CharacterDoll_C : public ABP_MordhauCharacter_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CharacterDoll__BP_CharacterDoll_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterDoll_C, UberGraphFrame, 0x12C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CharacterDoll_C, 0x12D0);
		}

		// class UBP_ProfilePerkCostEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ProfilePerkCostEntry__BP_ProfilePerkCostEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, CanvasPanel_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, Image_30, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, PerkEntry, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, PerkRibbonButton, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, Primary, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, TextBlock_25, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, Name, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, Cost, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, PerkId, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, UnknownData_QAR7, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfilePerkCostEntry_C, ProfileCustomization, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ProfilePerkCostEntry_C, 0x02A0);
		}

		// class UBP_PerkButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PerkButton__BP_PerkButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, Border_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, Button_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, CurrentPoints, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, Image_33, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, Image_391, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, TextBlock_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, SkillsCustomization, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, Selected, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, PerkId, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, UnknownData_FFXE, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, Name, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, Cost, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, UnknownData_VEKC, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, Description, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, SelectedStyle, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerkButton_C, NormalStyle, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PerkButton_C, 0x07A0);
		}

		// class UBP_TrainingMenu_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TrainingMenu__BP_TrainingMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrainingMenu_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrainingMenu_C, Button_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrainingMenu_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrainingMenu_C, Image_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrainingMenu_C, Image_9, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrainingMenu_C, Image_25, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrainingMenu_C, TextBlock_13, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrainingMenu_C, TextBlock_14, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrainingMenu_C, VerticalBox_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrainingMenu_C, TutorialPopup, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TrainingMenu_C, 0x0288);
		}

		// class UBP_KillFeedEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_KillFeedEntry__BP_KillFeedEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, ExitAnim, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, EntryAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, Image_4, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, Image_15, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, TextBlock_1189, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, TextBlock_1190, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, TextBlock_1191, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, Killer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, KilledBy, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, Victim, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, KillerColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeedEntry_C, KilledColor, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KillFeedEntry_C, 0x02D0);
		}

		// class UBP_OneButtonDialog_C : public UMordhauDialog
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_OneButtonDialog__BP_OneButtonDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneButtonDialog_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneButtonDialog_C, BP_BaseDialog, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneButtonDialog_C, Button, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneButtonDialog_C, OneButtonContent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneButtonDialog_C, TextBlock_54, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneButtonDialog_C, ButtonText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneButtonDialog_C, TitleText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneButtonDialog_C, ButtonClicked, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_OneButtonDialog_C, 0x0298);
		}

		// class ABP_LegsPickup_C : public ABP_WearablePickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LegsPickup__BP_LegsPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LegsPickup_C, 0x0408);
		}

		// class UBP_Cloth4_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth4__BP_Cloth4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth4_C, 0x0078);
		}

		// class UBP_Cloth21_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth21__BP_Cloth21_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth21_C, 0x0078);
		}

		// class UBP_Cloth15_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth15__BP_Cloth15_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth15_C, 0x0078);
		}

		// class UBP_ScoreboardTeamEntries_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ScoreboardTeamEntries__BP_ScoreboardTeamEntries_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardTeamEntries_C, Entries, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScoreboardTeamEntries_C, 0x0238);
		}

		// class UBP_MailOverGambeson_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MailOverGambeson__BP_MailOverGambeson_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MailOverGambeson_C, 0x01A0);
		}

		// class UBP_GermanSalletClosedPlumeRR_C : public UBP_GermanSalletBuffet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletClosedPlumeRR__BP_GermanSalletClosedPlumeRR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletClosedPlumeRR_C, 0x01C8);
		}

		// class UBP_VeteransGlove_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransGlove__BP_VeteransGlove_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransGlove_C, 0x01A0);
		}

		// class UBP_HuntersHat_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HuntersHat__BP_HuntersHat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HuntersHat_C, 0x01C8);
		}

		// class UBP_Bardiche_CrescentBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bardiche_CrescentBlade__BP_Bardiche_CrescentBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bardiche_CrescentBlade_C, 0x0078);
		}

		// class UBP_Bardiche_DecoratedShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bardiche_DecoratedShaft__BP_Bardiche_DecoratedShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bardiche_DecoratedShaft_C, 0x0078);
		}

		// class UBP_Bardiche_RudimentaryBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bardiche_RudimentaryBlade__BP_Bardiche_RudimentaryBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bardiche_RudimentaryBlade_C, 0x0078);
		}

		// class UBP_HeaterShieldPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeaterShieldPart__BP_HeaterShieldPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeaterShieldPart_C, 0x0078);
		}

		// class UBP_claymore_PaintersGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_claymore_PaintersGuard__BP_claymore_PaintersGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_claymore_PaintersGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_claymore_PaintersGuard_C, 0x0080);
		}

		// class UBP_Shortspear_DartHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shortspear_DartHead__BP_Shortspear_DartHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shortspear_DartHead_C, 0x0078);
		}

		// class UBP_1HAnimationProfile_C : public UBP_MeleeWeaponAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_1HAnimationProfile__BP_1HAnimationProfile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_1HAnimationProfile_C, 0x00C0);
		}

		// class UBP_1H_LeftStabMotion_C : public UBP_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_1H_LeftStabMotion__BP_1H_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_1H_LeftStabMotion_C, 0x1108);
		}

		// class UBP_1H_RightStabMotion_C : public UBP_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_1H_RightStabMotion__BP_1H_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_1H_RightStabMotion_C, 0x1108);
		}

		// class UBP_Cloth1_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth1__BP_Cloth1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth1_C, 0x0078);
		}

		// class ABP_OutGoreMeshBlunt_C : public ABP_BaseGoreMesh_C
		TEST_METHOD(BlueprintGeneratedClass__BP_OutGoreMeshBlunt__BP_OutGoreMeshBlunt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_OutGoreMeshBlunt_C, 0x0240);
		}

		// class ABP_ArmorBloodSplash_C : public ABP_BloodSplash_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmorBloodSplash__BP_ArmorBloodSplash_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ArmorBloodSplash_C, 0x0230);
		}

		// class UBlockedShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__BlockedShake__BlockedShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlockedShake_C, 0x0160);
		}

		// class UBP_PerksCustomization_C : public UBP_CustomizationTab_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PerksCustomization__BP_PerksCustomization_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerksCustomization_C, UnknownData_29J2, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerksCustomization_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerksCustomization_C, Image_2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerksCustomization_C, UniformGridPanel_1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PerksCustomization_C, PerkButtons, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PerksCustomization_C, 0x0358);
		}

		// class UBP_Plate_Shoulders_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Plate_Shoulders__BP_Plate_Shoulders_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Plate_Shoulders_C, 0x01A0);
		}

		// class UBP_ClothRolledArms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ClothRolledArms__BP_ClothRolledArms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ClothRolledArms_C, 0x01B8);
		}

		// class UBP_SmokePotPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmokePotPart__BP_SmokePotPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SmokePotPart_C, 0x0078);
		}

		// class UBP_ThrowingAxesDefaultPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrowingAxesDefaultPart__BP_ThrowingAxesDefaultPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ThrowingAxesDefaultPart_C, 0x0078);
		}

		// class UBP_ChristmasFirePotPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChristmasFirePotPart__BP_ChristmasFirePotPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChristmasFirePotPart_C, 0x0078);
		}

		// class UBP_2HSword_LeftStabMotion_C : public UBP_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2HSword_LeftStabMotion__BP_2HSword_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2HSword_LeftStabMotion_C, 0x1108);
		}

		// class UBP_VeteransBarbutePlume_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransBarbutePlume__BP_VeteransBarbutePlume_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransBarbutePlume_C, 0x01C8);
		}

		// class UBP_NoVisorBarbute_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NoVisorBarbute__BP_NoVisorBarbute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NoVisorBarbute_C, 0x01C8);
		}

		// class UBP_ArmingSword_BaronsBasketHilt_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_BaronsBasketHilt__BP_ArmingSword_BaronsBasketHilt_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_BaronsBasketHilt_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_BaronsBasketHilt_C, 0x0080);
		}

		// class UBP_ArmingSword_ConvexGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_ConvexGuard__BP_ArmingSword_ConvexGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_ConvexGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_ConvexGuard_C, 0x0080);
		}

		// class UBP_VeteranCladCuirass_C : public UBP_Tier2UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteranCladCuirass__BP_VeteranCladCuirass_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteranCladCuirass_C, 0x01E8);
		}

		// class UAudioCurveSourceComponent : public UAudioComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_1R2A, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_R1XA, 0x07E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x0810);
		}

		// class UBP_RidersHosen_C : public UBP_Tier1LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RidersHosen__BP_RidersHosen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RidersHosen_C, 0x01B8);
		}

		// class UBP_JoinedHosen_Greaves_C : public UBP_Tier2LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JoinedHosen_Greaves__BP_JoinedHosen_Greaves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JoinedHosen_Greaves_C, 0x01B8);
		}

		// class UAudioCapture : public UAudioGenerator
		TEST_METHOD(Class__AudioCapture__AudioCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCapture, UnknownData_5FC8, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCapture, 0x00B0);
		}

		// class UAudioCaptureFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioCapture__AudioCaptureFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureFunctionLibrary, 0x0028);
		}

		// class UAudioCaptureComponent : public USynthComponent
		TEST_METHOD(Class__AudioCapture__AudioCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, JitterLatencyFrames, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, UnknownData_TOIZ, 0x06D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureComponent, 0x0790);
		}

		// class ABP_MetalShovel_C : public ABP_Halberd_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalShovel__BP_MetalShovel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MetalShovel_C, 0x1C28);
		}

		// class ABP_MetalFork_C : public ABP_Halberd_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalFork__BP_MetalFork_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MetalFork_C, 0x1C28);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// class UBP_BandagePart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BandagePart__BP_BandagePart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BandagePart_C, 0x0078);
		}

		// class UBP_Polehammer_Head7_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Head7__BP_Polehammer_Head7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Head7_C, 0x0078);
		}

		// class UBP_Polehammer_Head5_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Head5__BP_Polehammer_Head5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Head5_C, 0x0078);
		}

		// class UBP_Shrug_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Shrug__BP_Shrug_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shrug_C, 0x0130);
		}

		// class UBP_Salute_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Salute__BP_Salute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Salute_C, 0x0130);
		}

		// class UBP_FistShake_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_FistShake__BP_FistShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FistShake_C, 0x0130);
		}

		// class UBP_Cheering_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Cheering__BP_Cheering_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cheering_C, 0x0130);
		}

		// class UBP_AngryYelling_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_AngryYelling__BP_AngryYelling_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AngryYelling_C, 0x0130);
		}

		// class UBP_CouchedAttackMotion_C : public UCouchedAttackMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_CouchedAttackMotion__BP_CouchedAttackMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CouchedAttackMotion_C, 0x1118);
		}

		// class UBP_LeftStabMotion_C : public UBP_StabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LeftStabMotion__BP_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeftStabMotion_C, 0x1108);
		}

		// class ABP_LocalCooldownInteractable_C : public ABP_MordhauActor_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LocalCooldownInteractable__BP_LocalCooldownInteractable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LocalCooldownInteractable_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LocalCooldownInteractable_C, IsDepleted, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LocalCooldownInteractable_C, UnknownData_C81J, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LocalCooldownInteractable_C, RefillDelay, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LocalCooldownInteractable_C, InCooldown, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LocalCooldownInteractable_C, InCooldownEndTime, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LocalCooldownInteractable_C, 0x03B0);
		}

		// class UBP_ContextPopupEntry_Interface_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ContextPopupEntry_Interface__BP_ContextPopupEntry_Interface_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_Interface_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_Interface_C, ButtonText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_Interface_C, ContextButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_Interface_C, Interface, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_Interface_C, ButtonLabel, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_Interface_C, HoverText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_Interface_C, Wrapper, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ContextPopupEntry_Interface_C, 0x0288);
		}

		// class UBP_VeteransPauldronsTrimSingle_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransPauldronsTrimSingle__BP_VeteransPauldronsTrimSingle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransPauldronsTrimSingle_C, 0x01A0);
		}

		// class ABP_BaseGoreMesh_C : public AGoreActor
		TEST_METHOD(BlueprintGeneratedClass__BP_BaseGoreMesh__BP_BaseGoreMesh_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseGoreMesh_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BaseGoreMesh_C, Particle, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BaseGoreMesh_C, 0x0240);
		}

		// class UBP_SplintedArmsFootman_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SplintedArmsFootman__BP_SplintedArmsFootman_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SplintedArmsFootman_C, 0x01B8);
		}

		// class UBP_LamellarSkirt_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LamellarSkirt__BP_LamellarSkirt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LamellarSkirt_C, 0x01A0);
		}

		// class UBP_ChainmailSkirt_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainmailSkirt__BP_ChainmailSkirt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainmailSkirt_C, 0x01A0);
		}

		// class UBP_BareAuxiliary_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BareAuxiliary_ARms__BP_BareAuxiliary_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BareAuxiliary_Arms_C, 0x01B8);
		}

		// class UBP_Tier1UpperChestWearable_C : public UBP_UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier1UpperChestWearable__BP_Tier1UpperChestWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier1UpperChestWearable_C, 0x01E8);
		}

		// class UBP_LeatherChest_C : public UBP_Tier1UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherChest__BP_LeatherChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherChest_C, 0x01E8);
		}

		// class UBP_PreOrderChain_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PreOrderChain__BP_PreOrderChain_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PreOrderChain_C, 0x01A0);
		}

		// class UBP_WorkerScarf_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WorkerScarf__BP_WorkerScarf_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WorkerScarf_C, UberGraphFrame, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WorkerScarf_C, 0x01A8);
		}

		// class UBP_Chain_Gloves_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Chain_Gloves__BP_Chain_Gloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Chain_Gloves_C, 0x01A0);
		}

		// class UBP_ClothShoulders_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ClothShoulders__BP_ClothShoulders_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ClothShoulders_C, UberGraphFrame, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ClothShoulders_C, 0x01A8);
		}

		// class UBP_HussarHelmet_masked_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarHelmet_masked__BP_HussarHelmet_masked_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarHelmet_masked_C, 0x01C8);
		}

		// class UBP_ItalianArmetAlt_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ItalianArmetAlt__BP_ItalianArmetAlt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItalianArmetAlt_C, 0x01C8);
		}

		// class UBP_Sallet_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sallet__BP_Sallet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Sallet_C, 0x01C8);
		}

		// class UBP_falchion_OctagonalHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_falchion_OctagonalHandle__BP_falchion_OctagonalHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_falchion_OctagonalHandle_C, 0x0078);
		}

		// class UBP_Mace_DiscguardHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Mace_DiscguardHandle__BP_Mace_DiscguardHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Mace_DiscguardHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mace_DiscguardHandle_C, 0x0080);
		}

		// class UBP_Mace_FringeHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Mace_FringeHead__BP_Mace_FringeHead_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Mace_FringeHead_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mace_FringeHead_C, 0x0080);
		}

		// class UBP_Axe_GutterHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Axe_GutterHead__BP_Axe_GutterHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Axe_GutterHead_C, 0x0078);
		}

		// class ABP_ThrownSpearProjectile_C : public ABP_ThrownWeaponProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownSpearProjectile__BP_ThrownSpearProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownSpearProjectile_C, 0x07D0);
		}

		// class UBP_KastenBurst_Skirt_03_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KastenBurst_Skirt_03__BP_KastenBurst_Skirt_03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KastenBurst_Skirt_03_C, 0x01A0);
		}

		// class UBP_cleaverHunter_blade3_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_cleaverHunter_blade3__BP_cleaverHunter_blade3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_cleaverHunter_blade3_C, 0x0078);
		}

		// class UBP_cleaverHunter_blade1_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_cleaverHunter_blade1__BP_cleaverHunter_blade1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_cleaverHunter_blade1_C, 0x0078);
		}

		// class ABP_ThrownSpearProjectile_Heavy_C : public ABP_ThrownWeaponProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownSpearProjectile_Heavy__BP_ThrownSpearProjectile_Heavy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownSpearProjectile_Heavy_C, 0x07D0);
		}

		// class UBP_YoungLad_C : public UCharacterVoice
		TEST_METHOD(BlueprintGeneratedClass__BP_YoungLad__BP_YoungLad_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_YoungLad_C, 0x00A0);
		}

		// class UBP_Raziel_C : public UCharacterVoice
		TEST_METHOD(BlueprintGeneratedClass__BP_Raziel__BP_Raziel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Raziel_C, 0x00A0);
		}

		// class UBP_TankPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TankPerk__BP_TankPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TankPerk_C, 0x0068);
		}

		// class UBP_ScavengerPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ScavengerPerk__BP_ScavengerPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScavengerPerk_C, 0x0068);
		}

		// class UBP_RushPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RushPerk__BP_RushPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RushPerk_C, 0x0068);
		}

		// class UBP_RangerPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RangerPerk__BP_RangerPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RangerPerk_C, 0x0068);
		}

		// class UBP_MaleEyebrow04_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_MaleEyebrow04__BP_MaleEyebrow04_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MaleEyebrow04_C, 0x0078);
		}

		// class ULocationServices : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServices)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServices, 0x0028);
		}

		// class ULocationServicesImpl : public UObject
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServicesImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocationServicesImpl, OnLocationChanged, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServicesImpl, 0x0038);
		}

		// class UMobileInstalledContent : public UObject
		TEST_METHOD(Class__MobilePatchingUtils__MobileInstalledContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileInstalledContent, UnknownData_05AH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileInstalledContent, 0x0048);
		}

		// class UMobilePendingContent : public UMobileInstalledContent
		TEST_METHOD(Class__MobilePatchingUtils__MobilePendingContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobilePendingContent, UnknownData_ENH1, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePendingContent, 0x0088);
		}

		// class UMobilePatchingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MobilePatchingUtils__MobilePatchingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePatchingLibrary, 0x0028);
		}

		// class UBP_PonyTailMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_PonyTailMale01__BP_PonyTailMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PonyTailMale01_C, 0x0078);
		}

		// class UBP_LongLooseMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_LongLooseMale01__BP_LongLooseMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongLooseMale01_C, 0x0078);
		}

		// class UBP_CloseCut2Male01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_CloseCut2Male01__BP_CloseCut2Male01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CloseCut2Male01_C, 0x0078);
		}

		// class UBP_LongGroomedMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_LongGroomedMale01__BP_LongGroomedMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongGroomedMale01_C, 0x0078);
		}

		// class ABP_ThrowingAxeProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrowingAxeProjectile__BP_ThrowingAxeProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrowingAxeProjectile_C, 0x07C4);
		}

		// class ABP_PushableActor_C : public APushableActor
		TEST_METHOD(BlueprintGeneratedClass__BP_PushableActor__BP_PushableActor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PushableActor_C, 0x03F0);
		}

		// class UBP_VeteransPauldronsSingle_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransPauldronsSingle__BP_VeteransPauldronsSingle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransPauldronsSingle_C, 0x01A0);
		}

		// class UBP_FlorentineSpauldersBesagews_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlorentineSpauldersBesagews__BP_FlorentineSpauldersBesagews_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlorentineSpauldersBesagews_C, 0x01A0);
		}

		// class UBP_EquipmentInfoDisplay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EquipmentInfoDisplay__BP_EquipmentInfoDisplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentInfoDisplay_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentInfoDisplay_C, AddAmmoAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentInfoDisplay_C, Border_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentInfoDisplay_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentInfoDisplay_C, Overlay_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentInfoDisplay_C, TextBlock_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentInfoDisplay_C, TextBlock_3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentInfoDisplay_C, VerticalBox_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EquipmentInfoDisplay_C, AddedAmmoCount, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EquipmentInfoDisplay_C, 0x0274);
		}

		// class UBP_HeavyBevor_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeavyBevor__BP_HeavyBevor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeavyBevor_C, 0x01A0);
		}

		// class UBP_Spear_AbruptShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Spear_AbruptShaft__BP_Spear_AbruptShaft_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spear_AbruptShaft_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Spear_AbruptShaft_C, 0x0080);
		}

		// class UBP_Spear_CombatShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Spear_CombatShaft__BP_Spear_CombatShaft_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spear_CombatShaft_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Spear_CombatShaft_C, 0x0080);
		}

		// class UBP_Halberd_dusk_unique_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Halberd_dusk_unique__BP_Halberd_dusk_unique_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Halberd_dusk_unique_C, 0x0078);
		}

		// class UBP_Tier3UpperChestWearable_C : public UBP_UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier3UpperChestWearable__BP_Tier3UpperChestWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier3UpperChestWearable_C, 0x01E8);
		}

		// class UBP_Bare_Head_C : public UBP_Tier0HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bare_Head__BP_Bare_Head_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bare_Head_C, 0x01C8);
		}

		// class UBP_ClothTunic_C : public UBP_Tier0UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ClothTunic__BP_ClothTunic_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ClothTunic_C, 0x01E8);
		}

		// class UBP_SplintedLegsFootman_C : public UBP_Tier2LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SplintedLegsFootman__BP_SplintedLegsFootman_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SplintedLegsFootman_C, 0x01B8);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bAutoRepair, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bStopServiceWhenAppDeactivates, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_Z99E, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MessageFormat, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_L4VO, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_BD08, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// class UBP_Falx_RobustHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Falx_RobustHandle__BP_Falx_RobustHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Falx_RobustHandle_C, 0x0078);
		}

		// class UImgMediaSettings : public UObject
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreads, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreadStackSizeKB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, GlobalCacheSizeGB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseGlobalCache, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_2UU6, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_YERC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_S5FV, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0068);
		}

		// class ABP_SwitchInteractable_C : public ABP_MordhauActor_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SwitchInteractable__BP_SwitchInteractable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SwitchInteractable_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SwitchInteractable_C, Value, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SwitchInteractable_C, UnknownData_0EBI, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SwitchInteractable_C, MinDelayBetweenUses, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SwitchInteractable_C, StartInverted, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SwitchInteractable_C, 0x0391);
		}

		// class UBP_ShortChainmailSkirt_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortChainmailSkirt__BP_ShortChainmailSkirt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortChainmailSkirt_C, 0x01A0);
		}

		// class UBP_RaisedArmetWedge_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RaisedArmetWedge__BP_RaisedArmetWedge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RaisedArmetWedge_C, 0x01C8);
		}

		// class UBP_2hmace_Abendstern_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2hmace_Abendstern__BP_2hmace_Abendstern_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2hmace_Abendstern_C, 0x0078);
		}

		// class UBP_CoPSkirt02_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CoPSkirt02__BP_CoPSkirt02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CoPSkirt02_C, 0x01A0);
		}

		// class UBP_ChainmailHosen_C : public UBP_Tier2LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainmailHosen__BP_ChainmailHosen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainmailHosen_C, 0x01B8);
		}

		// class UDefaultCrossbow_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__DefaultCrossbow__DefaultCrossbow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultCrossbow_C, 0x0078);
		}

		// class ABP_MedpackProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MedpackProjectile__BP_MedpackProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MedpackProjectile_C, 0x07C4);
		}

		// class ABP_ArmingSword_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword__BP_ArmingSword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ArmingSword_C, 0x1C28);
		}

		// class UBP_ArmsWearable_C : public UArmsWearable
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmsWearable__BP_ArmsWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmsWearable_C, 0x01B8);
		}

		// class UBP_CuirassierBoots_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CuirassierBoots__BP_CuirassierBoots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CuirassierBoots_C, 0x01A0);
		}

		// class UBP_CuirassierBoots_noSpurs_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CuirassierBoots_noSpurs__BP_CuirassierBoots_noSpurs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CuirassierBoots_noSpurs_C, 0x01A0);
		}

		// class UBP_Decorated_Morrion_Earguards_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Decorated_Morrion_Earguards__BP_Decorated_Morrion_Earguards_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Decorated_Morrion_Earguards_C, 0x01C8);
		}

		// class UBP_AventailSpikedTightened_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AventailSpikedTightened__BP_AventailSpikedTightened_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AventailSpikedTightened_C, 0x01A0);
		}

		// class UBP_ScaleSabatonSpurs_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ScaleSabatonSpurs__BP_ScaleSabatonSpurs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScaleSabatonSpurs_C, 0x01A0);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__Engine__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_A55V, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_AMP3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0030);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_UMIN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_7CGB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSSerializationIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_AYWI, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_AVW3, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_J4YB, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00B0);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_LV3H, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, SamplerType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_2RXX, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0050);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_6E2K, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, TextureObject, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_E2V5, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_FW2O, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDX, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_X562, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDY, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_MVTU, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, AutomaticViewMipBiasValue, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_WZD3, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValueMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, SamplerSource, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstCoordinate, 0x00CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstMipValue, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x00D0);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x00F0);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x00F0);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UpdateOverlapsMethodDuringLevelStreaming, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, DefaultUpdateOverlapsMethodDuringLevelStreaming, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_25CX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_JJAG, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_1U1O, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_HHZH, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0187);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x018F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_7TAN, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_TTBL, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0220);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_DY3U, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_F5NS, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_7WOX, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_XS5R, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_EYO7, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_FBY5, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0280);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_J5FH, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_MPKL, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_2J8A, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_V6AN, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_GGHB, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_E1X5, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x04B8);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_WO9B, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_SZWW, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_MBS6, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x014F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_3XX1, 0x0152);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x01F0);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_33XL, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x0206);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x0207);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x020F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_KJWY, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveData, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveDataInternal, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_FO3M, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, RuntimeVirtualTextures, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureLodBias, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureCullMips, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureMinCoverage, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureRenderPassType, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_WP2E, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_AND4, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_U992, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_ZP7H, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_KQ7Z, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x03C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x03C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x03CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_5TS4, 0x03CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x03F0);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_UN4P, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_ONOO, 0x0411);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0418);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_BO0G, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x04C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x04C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x04CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_RJQJ, 0x04CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_3E4P, 0x04DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x04E0);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkinCacheUsage, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_A696, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_6RE0, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_WPUL, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_YK9H, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_CZDX, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_PSQ8, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_QRHW, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldSpaceBounds, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_FRE7, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldToLocalTransform, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_T6N6, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x0630);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_OAWR, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_HBK2, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LinkedInstances, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_HWUT, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x0705);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_CW6K, 0x0706);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x0707);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_4VTM, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_SASI, 0x070F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MassMode, 0x0712);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_6JMP, 0x0713);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UniformMass, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TotalMass, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, Density, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinPerParticleMass, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_JY6X, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_38U8, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_DARR, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_SO77, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_RHH7, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_O5T7, 0x0990);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0ABC);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_HZS1, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_35I6, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_R0MC, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x0268);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_ETCV, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_IAWY, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SourceEffectChain, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_BTLN, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySet, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_XJJ5, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x066D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x066E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_HZ39, 0x066F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_IWGE, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_DG5E, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_PBJX, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_JOWO, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Modulation, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_0L71, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x07D0);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// class UFXSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__FXSystemComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemComponent, 0x03F0);
		}

		// class UFXSystemAsset : public UObject
		TEST_METHOD(Class__Engine__FXSystemAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, MaxPoolSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, UnknownData_LG59, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemAsset, 0x0030);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_3EUU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_DDVD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0220);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_RI30, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x02C0);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_L5YJ, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_55C9, 0x0301);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0308);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_47UE, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_VI9O, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0270);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_EEWN, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0290);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_B5VJ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_ZL4B, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_IXG2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_XCS3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_VXJ1, 0x0295);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x0298);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_YVSE, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_GCOQ, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_JPUT, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_BB1H, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_12QT, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_0F2Q, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_6WWL, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_PGMX, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_FBWV, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_YCTG, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_CZ0J, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_7M7S, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_2BJL, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_92TW, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_2JD5, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_YDCZ, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0570);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0140);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_YYLJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_T4JP, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_JW1A, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_ZEHQ, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_GMXR, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_R6GQ, 0x1520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1A30);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_HC1T, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_8I01, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetClientMaxTickRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxNetTickRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNeverApplyNetworkEmulationSettings, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_HQXL, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_NF3V, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RecentlyDisconnectedTrackingTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_XK2V, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_8LVW, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_MJEK, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitions, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitionMap, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_7ST7, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_46KV, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_FFZ5, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0750);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_FGXO, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_HBAI, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_GP17, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x00F0);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x03C8);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Modulation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x00B8);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_70RQ, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0130);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0138);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_G0QZ, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_Z70Z, 0x016B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_SGTQ, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingSubStepTime, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_673S, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_2SCG, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_VEJK, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxJumpApexAttemptsPerSimulation, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x0386);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_IR35, 0x038B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_5HHR, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_XSLF, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_4M4O, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_3BP8, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_6D22, 0x05EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0610);
		}

		// class USubsystem : public UObject
		TEST_METHOD(Class__Engine__Subsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsystem, UnknownData_LB74, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystem, 0x0030);
		}

		// class UDynamicSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__DynamicSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicSubsystem, 0x0030);
		}

		// class UEngineSubsystem : public UDynamicSubsystem
		TEST_METHOD(Class__Engine__EngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineSubsystem, 0x0030);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_ZVVN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0040);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0040);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0040);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_WRW5, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_F7DF, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_35Y6, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01D0);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_PXTA, 0x0405);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0408);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x0414);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0418);
		}

		// class UStreamableRenderAsset : public UObject
		TEST_METHOD(Class__Engine__StreamableRenderAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, ForceMipLevelsToBeResidentTimestamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, NumCinematicMipLevels, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, StreamingIndex, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedCombinedLODBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedNumResidentLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_YUUO, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamableRenderAsset, 0x0040);
		}

		// class UTexture : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_W9F8, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, MipLoadOptions, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_TUSV, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_K5MB, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00B8);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_NGGS, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_6KXU, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x00E8);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, UnknownData_22WS, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0100);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_SW3Y, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x01B0);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_YD9F, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_O08F, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_9TSZ, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedActor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedHitPoint, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalControllerRef, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalPlayer, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_K4XT, 0x0638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x0670);
		}

		// class UDebugCameraControllerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__DebugCameraControllerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraControllerSettings, CycleViewModes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraControllerSettings, 0x0048);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_NCEU, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_QTED, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_2DWF, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_ZAQ1, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0310);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0310);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0228);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_T1QK, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_GAEF, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0230);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_FUIA, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_B05Q, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_TWZX, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0258);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0258);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_MRYI, 0x0265);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0268);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0268);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_WOMG, 0x1A30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1AA0);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_PNM2, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_GO6L, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x0C5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_FRIC, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, MulticastRecordOptions, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_GF9V, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_UW40, 0x0CF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, SpectatorControllers, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_UHD1, 0x0D08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x1128);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_4OIS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_Z7ZX, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C0);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C0);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_83HQ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_RSQJ, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x0098);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_JNNW, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00B0);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, VirtualizationMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_12KC, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencySet, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Modulation, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x0160);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_D5AC, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x0178);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_R55E, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_SR2Z, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_DY53, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_B9F6, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0230);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0230);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_VUYO, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, SamplesPerPixel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_48XC, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x0220);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, Temperature, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_ZKAE, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_B25A, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSlopeBias, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_KWDT, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_Q16O, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_VTMG, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_D3Z5, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_AOW3, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomMaxBrightness, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_VAFO, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_SNMH, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x0320);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowCascadeBiasDistribution, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_DAAV, 0x0325);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_DI2K, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_QYBD, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowAmount, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_OYEX, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunLightIndex, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_PBVV, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03A0);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_J86R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_J9RY, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_LEEK, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_YIKK, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_VC06, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_IQ8E, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_DSKC, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_P6AQ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_HM1J, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_XW9L, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_4SKG, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_IUP5, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_G9HP, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_IE72, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_H3DF, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_I711, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0228);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumColor, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_N4CA, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0410);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_X7V4, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0410);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0410);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_T6QR, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// class UGraphNodeContextMenuContext : public UObject
		TEST_METHOD(Class__Engine__GraphNodeContextMenuContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Blueprint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Graph, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Node, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_T9I6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, bIsDebugging, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_V4HW, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphNodeContextMenuContext, 0x0050);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_WMAV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// class ULevelPartitionInterface : public UInterface
		TEST_METHOD(Class__Engine__LevelPartitionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelPartitionInterface, 0x0028);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_5DPA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_Z3SC, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_EX0Q, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_R45C, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_KRVV, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0280);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, BoxComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_1XZM, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0230);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_X7MG, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_55G1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_0WBQ, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentClassOverrides, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00A0);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00A0);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_XQHB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelSequenceActors, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_M8DQ, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_FLKB, 0x011F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_COPN, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_WZP7, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_UH0B, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_WGHE, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_LYFH, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0730);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_BZSQ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, StreamingPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_A39M, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_TQXY, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_GSPF, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_7JIR, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0150);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0150);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0150);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_BRAN, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_I6F9, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0270);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_4LT0, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x00F0);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0258);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0258);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0228);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, UnknownData_VRGC, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0200);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_Y61W, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_65TI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_U68W, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_E85D, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_E717, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0068);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_YDYL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_8WAS, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0068);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_AQ02, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_TH20, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_KP5O, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_SJZO, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0058);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_2J4Y, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_L75C, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_FF7A, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0068);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, bUseCustomPrimitiveData, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, PrimitiveDataIndex, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_HKHH, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_EB9B, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_F6CL, 0x0436);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x0480);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_V9BU, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_NHI1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_EFZL, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x0790);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, FieldOfView, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_00OK, 0x0206);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_YKT2, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x07B0);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_SGAF, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_6190, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_QNLP, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_K9Y8, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_QZP6, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x2040);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2620);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2630);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x2640);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x2644);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x2650);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_OSVK, 0x265C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x2670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x2688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x26C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_NW3E, 0x26D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x26E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_WKGH, 0x2712);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2714);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x271C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2724);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_X14B, 0x272C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ServerUpdateCameraTimeout, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_A1R0, 0x2734);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x2740);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_RGBZ, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x040C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0410);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_CVHM, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_F11C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_AKXF, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x0198);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_YFNZ, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0238);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_4VQI, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_6P6V, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_AGU9, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_CVMK, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_DPO1, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_7CU5, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0120);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_7APK, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0228);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_689R, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_22JW, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_3RU0, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0248);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0250);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_ELGJ, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_GL1A, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_DC65, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_WU4A, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_FE8Q, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_FS3P, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x0320);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_N0ET, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x02A8);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x02A8);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_ZPT7, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0230);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_GXFS, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0110);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumCustomDataFloats, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_X4GT, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMCustomData, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_W46Q, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_LF3G, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_6HGC, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_2OUH, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0530);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_8C6C, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_R63J, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_J87F, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_BSBK, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_59TB, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0618);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_VT7M, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0230);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_7GZV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_8ENS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_7ZAV, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysicalMaterialMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_UAFO, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, RuntimeVirtualTextureParameterValues, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_I174, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedLayerParameters, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedReferencedTextures, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_3HV3, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x0408);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceConstant, PhysMaterialMask, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x0410);
		}

		// class UWorldSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__WorldSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldSubsystem, 0x0030);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_VTZ3, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentClassOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_PDRT, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_A08Q, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x0328);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_A9FB, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_2CGS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_QX4U, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0070);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_IF0J, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_6JZB, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0068);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_SERZ, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_T2H5, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_M943, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_9HUL, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0068);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_1FI9, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_UFKP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_77N3, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_WPFQ, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0088);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_059V, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_XO59, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_UPNT, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_I0LN, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_BHFV, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00C0);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_A1SA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_KUFP, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_2ZGU, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0088);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_X6HW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_BCMM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_AWY1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_Z659, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MZGE, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_KTHK, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Anisotropy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_UYES, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_FSCS, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_CA0U, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_6AMZ, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_G1XJ, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Tangent, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_9C6B, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_HU7P, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_8TXH, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MXGS, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_TFZY, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_PN7L, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_8VIK, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_A4TC, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_VALR, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_DBTS, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_NSHI, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ShadingModel, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_44FB, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0270);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_MC0B, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_A77A, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0068);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_7ZFP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_3DDT, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0070);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_7WH4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_NP2Z, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0070);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_WWGM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_G6DM, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0070);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_F6VE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_CGUZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_MPFY, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_5ZO0, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_56YV, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0090);
		}

		// class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShaderStageSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, PixelShader, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_HWLK, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, VertexShader, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_BVIN, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShaderStageSwitch, 0x0068);
		}

		// class UMaterialExpressionShadingModel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, ShadingModel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, UnknownData_I6NV, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingModel, 0x0048);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_6H5S, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_ER7K, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x0090);
		}

		// class UMaterialExpressionShadowReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadowReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_OZFF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Shadow, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_HDYP, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadowReplace, 0x0068);
		}

		// class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionSingleLayerWaterMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_YENL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_Q94C, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_RAFI, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, 0x0080);
		}

		// class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, UnknownData_0O6M, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDirection, 0x0048);
		}

		// class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightIlluminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, UnknownData_PDFE, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDiskLuminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, UnknownData_H7V6, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, 0x0048);
		}

		// class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVirtualTextureFeatureSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, No, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_W0I6, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, Yes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_XCNZ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVirtualTextureFeatureSwitch, 0x0068);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_SD1Y, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_HNN6, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_4RH3, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0058);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00C0);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0230);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_WMVM, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x0458);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_3IFX, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_XSWX, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, NetworkEmulationProfiles, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0058);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0220);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_W6WH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_2OXV, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// class UObjectTraceWorldSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ObjectTraceWorldSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectTraceWorldSubsystem, UnknownData_SK3D, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectTraceWorldSubsystem, 0x0038);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_TSQ8, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x03F8);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_AGBX, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_PWXV, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_NWAA, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0290);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_MAG4, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_K2YS, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_3YM1, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x01B8);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0220);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_XE9H, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_9OSN, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_3CPW, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_N7YY, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0060);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0080);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_3J89, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_TIE8, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_8U86, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0120);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_BWGS, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LoadingBehavior, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_6O2M, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, FrequenciesToAnalyze, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedSpectralTimeData, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedEnvelopeTimeData, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InitialChunkSize, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_QTVT, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_PBWO, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_73XG, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0310);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_KX6W, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x0360);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_LOW9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x0258);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_ODAA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0070);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_9XP3, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_Y3TV, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0298);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_1YE3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_QR4P, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_EX8P, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_FM6L, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bUseConstantInterpolation, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_MZ14, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_7589, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_MROF, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_ZTUO, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_4B9O, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_FE6J, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0228);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_5597, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bOnlyCheckForMissingSkeletalMeshes, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x0057);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x0058);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_W9KY, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_3A96, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x00C8);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_S8D1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndicesMap, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_O9LR, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphAssetPlayerInformation, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphBlendOptions, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x04E8);
		}

		// class UAnimBoneCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionCodec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionCodec, Description, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionCodec, 0x0038);
		}

		// class UAnimBoneCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionSettings, Codecs, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionSettings, 0x0038);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_OUZX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndicesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctionData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_XJO3, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimGraphNodeProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_VYD0, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimLayerNodeProperties, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_66J3, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PreUpdateNodeProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_PLOK, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, DynamicResetNodeProperties, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_BE1C, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, StateMachineNodeProperties, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_WDKZ, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, InitializationNodeProperties, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_5E27, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphNameAssetPlayers, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, EvaluateGraphExposedInputs, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphBlendOptions, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0268);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// class UAnimCompress : public UAnimBoneCompressionCodec
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_TUZM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_5A5A, 0x003F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0040);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0040);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0040);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_O48J, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0060);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_ZGKB, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_45PO, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_D2KJ, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_6JNL, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00D8);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_UCZE, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0048);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_2VUY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0050);
		}

		// class UAnimCurveCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec, 0x0028);
		}

		// class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_CompressedRichCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_CompressedRichCurve, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformIndexable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformIndexable, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformlySampled)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformlySampled, 0x0028);
		}

		// class UAnimCurveCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCurveCompressionSettings, Codec, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionSettings, 0x0030);
		}

		// class UAnimLayerInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimLayerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimLayerInterface, 0x0028);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_G8ZN, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_FEB0, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_GJKN, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01D0);
		}

		// class UAnimNotify_PauseClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_RI79, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_QZXK, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_E4PA, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_PTYF, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_TBNY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// class UAnimNotify_ResetDynamics : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_GCVQ, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_BPT5, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_OAL2, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0058);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_FJK5, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_DJ7O, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BoneCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveCompressionSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_EAYF, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_IO93, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x016E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_25F1, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_7RA5, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01A0);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_SRKD, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_3DP7, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x0280);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// class UAnimStreamable : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, Interpolation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_G6B8, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RetargetSource, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_4DOL, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, BoneCompressionSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, CurveCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bEnableRootMotion, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RootMotionRootLock, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bForceRootLock, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bUseNormalizedRootMotionScale, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_4943, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStreamable, 0x00E0);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowColor, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_WLN6, 0x03FD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0400);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_M4AE, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_KNFC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x02D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_AV8C, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_YYHS, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x0438);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, CustomPrimaryAssetRules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_RQGZ, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x0100);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionHandleSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, UnknownData_Y8WY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, SaveGameObject, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionHandleSaveGame, 0x0068);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_4M2S, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0228);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunMultiplier, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_TIUD, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_BD5U, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0300);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MasterSubmix, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, ReverbSubmix, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, EQSubmix, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_35VY, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMinPitchScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMaxPitchScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_6YQQ, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_L63N, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_70UV, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_34ST, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0148);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_G4DZ, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_4ZY2, 0x02A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x02A8);
		}

		// class UAutoDestroySubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__AutoDestroySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, UnknownData_K8YT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, ActorsToPoll, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoDestroySubsystem, 0x0048);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0328);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_TEPZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_IPLL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_F8BE, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_A3I2, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_8KGO, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x00A8);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_UG8B, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_F57M, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0078);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_IKS2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_Q5HB, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x00F0);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_8NKU, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_RX3X, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_FMM7, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_QFP8, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_28HK, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_FDMQ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_1JDI, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_A5HJ, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x02C8);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x02D0);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0258);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_M795, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_FB9R, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x0430);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_45HR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_NH4X, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_P8RE, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// class UNavigationSystemConfig : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, SupportedAgentsMask, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, DefaultAgentName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_Y3Z9, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0050);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0050);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_E09W, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1A30);
		}

		// class UNetPushModelHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__NetPushModelHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetPushModelHelpers, 0x0028);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// class ABandwidthTestActor : public AActor
		TEST_METHOD(Class__Engine__BandwidthTestActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABandwidthTestActor, BandwidthGenerator, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABandwidthTestActor, 0x0240);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_4X3C, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x040C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0410);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_7WYE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_S28L, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_0CR2, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_3ZQ1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_QM5C, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0368);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_1910, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0258);
		}

		// class UBlueprintExtension : public UObject
		TEST_METHOD(Class__Engine__BlueprintExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintExtension, 0x0028);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPathsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPathsLibrary, 0x0028);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0268);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// class UBodySetup : public UObject
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BoneName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysicsType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_R4IP, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionReponse, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionTraceFlag, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_0FNO, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_HXDK, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_X5WD, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_YYQ7, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x0250);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_EI3J, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0228);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0228);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_KDC9, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_5IIN, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x026C);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_0W8D, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x0280);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_BITA, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_HQAX, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Tooltip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_8OD1, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_3N00, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0400);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0258);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_IY8N, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_OPHH, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_NMKU, 0x05A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x05B0);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_CBW0, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_DLV7, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_QPZY, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0258);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_W9AJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_JJ2X, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_SXIO, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ExpiredPooledShakesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_TWCI, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x00B0);
		}

		// class UCameraShake : public UObject
		TEST_METHOD(Class__Engine__CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_HQMI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationDuration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendInTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendOutTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RotOscillation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, LocOscillation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, FOVOscillation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimPlayRate, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendInTime, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendOutTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RandomAnimSegmentDuration, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, Anim, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_RW7G, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, CameraOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_O21O, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, ShakeScale, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillatorTimeRemaining, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimInst, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_5JFG, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake, 0x0160);
		}

		// class ACameraShakeSourceActor : public AActor
		TEST_METHOD(Class__Engine__CameraShakeSourceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraShakeSourceActor, CameraShakeSourceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraShakeSourceActor, 0x0228);
		}

		// class UCameraShakeSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraShakeSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, Attenuation, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_DI7Y, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, InnerAttenuationRadius, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, OuterAttenuationRadius, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_KDNQ, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, CameraShake, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, bAutoPlay, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_HT0B, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeSourceComponent, 0x0210);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_ZZ3U, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_F2ZN, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_YPE8, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02C0);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_0RKT, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00C0);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsSamplerFilter, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressU, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressV, 0x00DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_LFB0, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x00E8);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_6DFH, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0108);
		}

		// class UChaosPhysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__ChaosPhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, LinearEtherDrag, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, AngularEtherDrag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingLinearVelocityThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingAngularVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, UnknownData_7Y9Z, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosPhysicalMaterial, 0x0048);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_YXSP, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0220);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1A30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1A38);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_QCSR, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_CFAR, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0158);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_M3YH, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_PAL1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x00A0);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, UnknownData_4XL0, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00C8);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_TN5E, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_S3GL, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, ImportKeyField, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_58D3, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00C8);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_6P4I, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00F0);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_KI5N, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_TR2X, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterial, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterialName, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialYellow, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_XITY, 0x0645);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTexture, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTextureName, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_BCXP, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TickCycles, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameCycles, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ClientCycles, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_U6RT, 0x07B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_YYUS, 0x07B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStep, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_WE0L, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProvider, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_8E1P, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bGenerateDefaultTimecode, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_HBE4, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameRate, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameDelay, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_BT33, 0x0861);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_B1PQ, 0x0869);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_FGF0, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_1APV, 0x08B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MeshLODRange, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_X3D5, 0x08E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_MJQA, 0x08F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_RU47, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x0944);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x0974);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_LHHT, 0x0975);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_1XRY, 0x0979);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x097C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_RBH6, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_IDMP, 0x0989);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_8AU8, 0x09AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetErrorLogInterval, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7JR2, 0x0C2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7SF7, 0x0C4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0DF0);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_8W8E, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_Z18Z, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_7PQM, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, MaxSplitscreenPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_BQQ8, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_CF1Z, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0330);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_WH5C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_05PB, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_KARE, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_AQ73, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0088);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_I7LQ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_UZPU, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_PIDK, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_C658, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_8LMU, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0270);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_U99W, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00B8);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_N5C3, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0250);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_7UZ2, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_36H7, 0x0E00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0E40);
		}

		// class UGameInstanceSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__GameInstanceSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstanceSubsystem, 0x0030);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPacketLossThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePacketLossThreshold, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePingThreshold, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_5BEU, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchCooldown, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientSmoothingDeltaTime, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_5NN4, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdateDeltaTime, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdatePositionLimit, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_MZKC, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_SXW5, 0x02C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x02D0);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0238);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0238);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_B2SX, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_SAZ5, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_WSB0, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_8VR7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_TU5B, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_GSI0, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_EINK, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_PKAW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_HVH3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Specular, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_UHI7, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Roughness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_SE8L, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Normal, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_R3LW, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_MP4W, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Opacity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_N8OF, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Mask, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_WIZ7, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureOutput, 0x00D0);
		}

		// class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_B0R2, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_4J7W, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureReplace, 0x0068);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_UMYO, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_8NJ2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_0VPV, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MaterialType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bSinglePhysicalSpace, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_3DKK, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSample, 0x0090);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ParameterName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, 0x00B0);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_KD34, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_T3C6, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_6BHN, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_VQIN, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_T2B6, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0118);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_NP3J, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0270);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_N0HG, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_06G6, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_1GMU, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x02E0);
		}

		// class UViewModeUtils : public UObject
		TEST_METHOD(Class__Engine__ViewModeUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewModeUtils, 0x0028);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_M13C, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0230);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogDensity, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, SecondFogData, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_TPTX, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_O5EH, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_LTYJ, 0x0289);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x0290);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_V70X, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_VFFH, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_DJN1, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0150);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_C2V7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_GJLM, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_ETIE, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_KPKD, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_XJE7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_9AK8, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00D8);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_KK3Z, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_ROBT, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x02D0);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0138);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_XPTW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0038);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_4V4T, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_JV85, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_DBMG, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0138);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_W9PX, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_0P3J, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_SDHH, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, SpeechMappings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x00F0);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, IntensityUnits, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_VY63, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_2ZDV, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x033C);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_7LC5, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_PGF0, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_H2PY, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_0EZL, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_A22U, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0258);
		}

		// class ULocalPlayerSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__LocalPlayerSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerSubsystem, 0x0030);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, ImpostersStaticMeshComponents, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_BS9I, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x02A8);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_8KOT, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x0238);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterialMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysicalMaterialMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_1WHJ, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_UXKX, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Anisotropy, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_7PED, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_UVHG, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Tangent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_JB2S, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_DDM1, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModels, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_ZBIH, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_6U1A, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_TN6W, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_OIMT, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModelFromMaterialExpression, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_RH2D, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_MQKC, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_KPH5, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_G6GA, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_3GW6, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_EGD5, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingRate, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilCompare, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilRefValue, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_70SI, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_1F5A, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_WD0D, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedExpressionData, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x04E8);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_6L4I, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_JCH5, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0058);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_6QXF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0068);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_KL5R, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_U3U5, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_E1OC, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0080);
		}

		// class UMaterialExpressionHairAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairAttributes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairAttributes, 0x0040);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_NRM8, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_3DU5, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_55Y9, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_K71S, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_T1QU, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00B0);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_OAJZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_4L3Y, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_D3XT, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_D9M8, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_2CZJ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0078);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_SLR8, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_UOL3, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0058);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_D01T, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_SO59, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_DVC6, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0140);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0060);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0080);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_YKW3, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x050D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_02N7, 0x050E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_S6FH, 0x0514);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0520);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_6GDU, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x0350);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InnerConeAngle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, LightShaftConeAngle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, UnknownData_WVON, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x0360);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetArmLength, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_I1I2, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_LVGS, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_ALG0, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x0280);
		}

		// class UStaticMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_OW5P, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_ZDD2, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_FWOP, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_FZ4R, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0138);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_BSP3, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_CDEG, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_EJH3, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, EquirectProps, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_JTMT, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Shape, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_B9HE, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02E0);
		}

		// class UStereoLayerShape : public UObject
		TEST_METHOD(Class__Engine__StereoLayerShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShape, 0x0028);
		}

		// class UStereoLayerShapeQuad : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeQuad)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeQuad, 0x0028);
		}

		// class UStereoLayerShapeCylinder : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, OverlayArc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, UnknownData_7LF9, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCylinder, 0x0038);
		}

		// class UStereoLayerShapeCubemap : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCubemap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCubemap, 0x0028);
		}

		// class UStereoLayerShapeEquirect : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeEquirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftUVRect, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightUVRect, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightBias, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeEquirect, 0x0070);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_WMA6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_AHPD, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bSweep, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, TeleportType, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bCheckIfStillInWorld, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_LKL2, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_DV0W, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x0190);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_KUAI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_ODL7, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_VKX4, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_FH3Z, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_C7OY, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_KY37, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_S9MR, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_SSR0, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0050);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_PHHY, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_92GC, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0060);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_FD5R, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_9LHY, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_HD67, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_3535, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_5TI3, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0060);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_TBYJ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0068);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_LJ5D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_9LHV, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0068);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_5C78, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_X8JD, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_IC7J, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_UJIE, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_OPQ6, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_ML7E, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_071W, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_YKGC, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_KO1C, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_B0ZT, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_4LPC, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_OVVL, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0268);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_S2I7, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_A0QE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_I7UB, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_AC1H, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_4DNH, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0090);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_RSRR, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x00D8);
		}

		// class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUVProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUVProperties, 0x0040);
		}

		// class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceCustomData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DefaultValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_RMQG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, ConstDefaultValue, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DataIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_S5C7, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceCustomData, 0x0060);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_SKVJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_7XZV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_8AP7, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0070);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedLocalBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedLocalBounds, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_FM02, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_EQ0B, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0068);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_5G3A, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_K1PX, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x0090);
		}

		// class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRayTracingQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, Normal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_JJWN, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, RayTraced, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_4XTZ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRayTracingQualitySwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_RSJH, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_N1IR, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereAerialPerspective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, UnknownData_0OA1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereViewLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereViewLuminance, 0x0040);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_IAHJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_M4YI, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_JW88, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0088);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_4IZD, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_QGDW, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_4UX1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_SQVB, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_9CCC, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_QQA0, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00A0);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_GW9V, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_O65V, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_9WBR, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_Y6L3, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x0098);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_L74X, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0058);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_MQ05, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_JXJH, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_T5SO, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_GSH7, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_ZC26, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0070);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_1J1S, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_WNO0, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_5EM1, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_WYBD, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0080);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_EXK0, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, B, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_ARX3, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0088);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_X4QF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_KHPK, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0070);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_E914, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0058);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_GQLB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_AZ11, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_2WCJ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0078);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_OECA, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0050);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x00F0);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_YGRP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_I09F, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0058);
		}

		// class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2DArray)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2DArray, 0x00F0);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x00F0);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_5PG3, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x00F8);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x00F0);
		}

		// class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionThinTranslucentMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, UnknownData_V7J8, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionThinTranslucentMaterialOutput, 0x0058);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_FGZF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_852J, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_ZW5N, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0058);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_QIZ9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_LTDR, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0058);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_33JB, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_B383, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_A00W, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_IXLZ, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_E9IQ, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0080);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00A8);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_QCOD, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_AE8O, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_6H75, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_1INN, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00B0);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_4RZ8, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00E0);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_K0QC, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00B0);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00D0);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_2SZP, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00B0);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_7VM8, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00B0);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_NS7H, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_754U, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_JRF6, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_K59J, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_1FRP, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00D8);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_GXSW, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00C8);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_VPOZ, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0068);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_9WGW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00B0);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00E0);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0100);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0108);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_VU5N, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_FPKM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_J3HC, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_IE02, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0080);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0080);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0078);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x0098);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_AOY2, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_08S4, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_ROUB, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_P26E, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScales, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_G0E9, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// class UPhysicalMaterialMask : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UVChannelIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressY, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UnknownData_5FSZ, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialMask, 0x0030);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_3ZSP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SolverIterations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_9X89, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0138);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_KJ9M, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x0268);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0220);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_RKRF, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0240);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_Z5UO, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x03F0);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_N4EJ, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_B13E, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_YQWC, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_ZUD7, 0x074D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0750);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_VDQ0, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_OB7M, 0x07AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x07B0);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0288);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0258);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_TV8D, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_QVE1, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_LBBY, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_0UGQ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_YWX7, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_R0B6, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0068);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_OQ2T, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_48TW, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_ZZRN, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_O8NP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_EIYM, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_ATCQ, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x0430);
		}

		// class UParticleSystem : public UFXSystemAsset
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_8JXJ, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_Q107, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0110);
		}

		// class UParticleSystemComponent : public UFXSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_3OM6, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_KFRT, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_M7SW, 0x0427);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, bOldPositionValid, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_GEOO, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_B2LG, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_ICF5, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_DJ91, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_WX99, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_JI3K, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x054A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_I3C6, 0x054B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_6ZZ5, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x0650);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_3EXA, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_FFZG, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_6OVF, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x00D8);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_DQIK, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_8OCL, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x00F0);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0400);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0078);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_2STI, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_TG12, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_R6QS, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0108);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_OKV7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_IRTO, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_S8B2, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_JF7C, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_4COQ, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_DVL9, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_UY8Y, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_06Q7, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x0190);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_SQ3F, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_H874, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_0PT4, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_Q08N, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_JY7P, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_R9P2, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0118);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_8WNU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_S5XV, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_REK2, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_M145, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_ETZX, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_CRS3, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_ZUOC, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0120);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_VNM5, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_27MM, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0068);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_J20R, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_ET48, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_QVWP, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_Y11L, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_UJK1, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_EFNT, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x0190);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, response, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_1RII, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00A8);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0140);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A0);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_ARAK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_NH93, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_DQZL, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_VPJJ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0150);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_8PPS, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_GR58, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_TUYB, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_RS5E, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_T3MT, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_KY7O, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0120);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0140);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_JMXL, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0060);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0080);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_VWLO, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0068);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0078);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x0098);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_1TLB, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0080);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_7ZY7, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0080);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0078);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_VZOW, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_5STD, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_A9GZ, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x00E8);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_TTHC, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0078);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_KJPO, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0070);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_FHXF, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_EVF2, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00B0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_5T7V, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_4WGQ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_QIW8, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_S9NY, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_P69M, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0090);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_JAQY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_TTUJ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_SG49, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_VWHY, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_D876, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_VYWF, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_HRMF, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0150);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_PC6F, 0x0415);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0420);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_RZJ1, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_0CP5, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_4NVX, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x0098);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_NIR6, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_OSSA, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_INIL, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_S7MY, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_7OKG, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_N5MZ, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_I0I3, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_5JDQ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_YM4I, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_1VKV, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0090);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, UnknownData_1VTR, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0048);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0048);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_11T4, 0x03F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x03F8);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0050);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0058);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0050);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_QSZC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_PY3F, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_RMON, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0070);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_D0AV, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x00F8);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_NLT5, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_NTYL, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0068);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_T3VV, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_JIGV, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0068);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0228);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, Radius, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, Falloff, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_59UD, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_8K2S, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_85JY, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0220);
		}

		// class ARectLight : public ALight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0238);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorAngle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorLength, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_Q7DU, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0360);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_4AO6, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_9WUH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QRG9, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_VHZV, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileBorderSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureFeedbackFactor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_XH2L, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_S7L1, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_VYYM, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_4K2A, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0GGJ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MK23, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QQD3, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_4FV1, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_KINC, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposureBias, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_K33X, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_CTO6, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_TM0N, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_O2UZ, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_6Q2H, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FSL7, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ZV2P, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_D6CV, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_6007, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MTH3, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_65JD, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultSkinCacheBehavior, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Z0PC, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_V553, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QF61, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x00F0);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_S67R, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_KFQX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_CWMN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0058);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_UX2X, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_0PTJ, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0110);
		}

		// class URuntimeOptionsBase : public UObject
		TEST_METHOD(Class__Engine__RuntimeOptionsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeOptionsBase, UnknownData_JLFY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeOptionsBase, 0x0038);
		}

		// class URuntimeVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__RuntimeVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, MaterialType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bCompressTextures, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnable, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bClearTextures, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bSinglePhysicalSpace, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bPrivateSpace, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnableScalability, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_UOWX, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, Size, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileBorderSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamLowMips, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_Y5FR, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamingTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnableCompressCrunch, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_Q3G9, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, RemoveLowMips, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_QFPX, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTexture, 0x00A0);
		}

		// class URuntimeVirtualTextureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, VirtualTexture, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bUseStreamingLowMipsInEditor, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_VW7P, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, BoundsSourceActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_25O3, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureComponent, 0x0210);
		}

		// class URuntimeVirtualTextureStreamingProxy : public UTexture2D
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, Settings, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, bSinglePhysicalSpace, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, UnknownData_0RPX, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, BuildHash, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, UnknownData_639P, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureStreamingProxy, 0x0100);
		}

		// class ARuntimeVirtualTextureVolume : public AActor
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARuntimeVirtualTextureVolume, VirtualTextureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARuntimeVirtualTextureVolume, 0x0228);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, SceneComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0230);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0238);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, PrimitiveRenderMode, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSource, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bAlwaysPersistRenderingState, 0x01F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_DDCP, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bUseRayTracingIfEnabled, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_XYFW, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_RR1K, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_7GQC, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x0288);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_HX1K, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_I63V, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_C13J, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_OUNR, 0x07F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomNearClippingPlane, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_K6W5, 0x07FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_C65A, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_C4YM, 0x085D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bDisableFlipCopyGLES, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_R8LY, 0x0861);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x0880);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, bCaptureRotation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_CW9E, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_BPPE, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x02C0);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0238);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_NMZR, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00D8);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_URSW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// class AServerStatReplicator : public AInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_E8Z8, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_S083, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_4NII, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x02E8);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_H1H7, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x00F0);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_LFSE, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// class USkeletalMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_GZ2H, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_347T, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, DisableBelowMinLodStripping, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x013E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_NJ4G, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_GBG7, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_WZJ7, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_XY6E, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkinWeightProfiles, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x0388);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_7HBY, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_NJF7, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_HXVC, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x02A8);
		}

		// class USkeletalMeshEditorData : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshEditorData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshEditorData, 0x0028);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_SXCQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_FRKK, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_FPLW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_7EST, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_BSMK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_4ADC, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_XIV5, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_8I7I, 0x0086);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x0088);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_U75X, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_ZO52, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_QPJ2, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_2GPA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0058);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_0UZL, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_MAJV, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalDefines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, IncludeFilePaths, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x0098);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_K466, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0070);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A0);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_G1I7, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0080);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A0);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0078);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_M6N3, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0058);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_DQ0G, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_GYIS, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_SEV9, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0088);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_6ZX9, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_A4CV, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_NWJW, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_M3RO, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// class UMaterialExpressionDeltaTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeltaTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeltaTime, 0x0040);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_Z8UM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_K804, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0070);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_WXBB, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_FBCL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_RU9F, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_ICMZ, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_NCCS, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_3ALW, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x0098);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_GTXD, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_7M80, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0078);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, bUseCustomPrimitiveData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, PrimitiveDataIndex, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, UnknownData_X46T, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0070);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_6Z58, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_L2BA, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_KA6Y, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_8D9Y, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0078);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0070);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_A6Z1, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_NPX3, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, Input, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_0Y4F, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0088);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_ESGO, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_K767, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_P8FS, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_XV9I, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0088);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_RE7V, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_9F7Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_8N5H, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0078);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_NZ4B, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_5F0A, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0068);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_8JEE, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_QPAP, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_T9LS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_6ULH, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0068);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_GX6S, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_FDBK, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_61JP, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0088);
		}

		// class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMapARPassthroughCameraUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, UnknownData_B93W, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMapARPassthroughCameraUV, 0x0058);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_P4HR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_ED6T, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_4HVO, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00E8);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0088);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_RMSS, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_09Z5, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0058);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_29H7, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0060);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// class UMaterialExpressionVertexTangentWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexTangentWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexTangentWS, 0x0040);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_9NGE, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0048);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_T4FB, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_R28N, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_OEF9, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, CookedQualityIndex, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_VVMB, 0x0529);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0538);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_SV05, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// class AVolumetricLightmapDensityVolume : public AVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0260);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0228);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Strength, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_2ASD, 0x0205);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0210);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_STMO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_0DVO, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_YBXS, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_VMMT, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_QLN4, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_D20W, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PauserPlayerState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_PGMZ, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x03A0);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_ZRGP, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0088);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_2LR9, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0080);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_OUF3, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_HTAE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_C4GN, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_HMR5, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_05JK, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0130);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_3PK3, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0060);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_JBOS, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0070);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0068);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0068);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_X0KW, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00B0);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00D0);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_ZO67, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00A8);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0080);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_T67E, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0088);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x01B8);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0058);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, bUseSmoothing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_PEKM, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, SmoothingInterpSpeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_XAOP, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0058);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_A8HF, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0190);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0058);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_600L, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0050);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0048);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0058);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0058);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0088);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_BN49, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_46U7, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0070);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0060);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0048);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_4WZT, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0078);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, UnknownData_SAHX, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0058);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0050);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0050);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_4DDT, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0080);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_TRFW, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_3PKC, 0x0319);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0328);
		}

		// class USoundSubmixBase : public UObject
		TEST_METHOD(Class__Engine__SoundSubmixBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixBase, ChildSubmixes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixBase, 0x0038);
		}

		// class USoundSubmixWithParentBase : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundSubmixWithParentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixWithParentBase, ParentSubmix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixWithParentBase, 0x0040);
		}

		// class USoundSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_J687, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OutputVolume, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_B51V, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_O6EK, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0088);
		}

		// class USoundfieldSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundfieldSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEncodingFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEffectChain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettingsClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldSubmix, 0x0068);
		}

		// class UEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__EndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndpointSubmix, 0x0050);
		}

		// class USoundfieldEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundfieldEndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettingsClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEffectChain, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSubmix, 0x0070);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_D116, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0158);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0230);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, UnknownData_VCX9, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x0280);
		}

		// class USplineMetadata : public UObject
		TEST_METHOD(Class__Engine__SplineMetadata)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMetadata, 0x0028);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0228);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_0YN7, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x02F8);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_OQFS, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_9WS3, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_M4JJ, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_TUPT, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x0160);
		}

		// class UPhysicsSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableShapeSharing, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnablePCM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableStabilization, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bWarnMissingLocks, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnable2DPhysics, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_HTDW, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_F9LU, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, BounceThresholdVelocity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, FrictionCombineMode, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RestitutionCombineMode, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_9TL9, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxAngularVelocity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxDepenetrationVelocity, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ContactOffsetMultiplier, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinContactOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxContactOffset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateSkeletalMeshOnDedicatedServer, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultShapeComplexity, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDefaultHasComplexCollision, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x00AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_6PXZ, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AnimPhysicsMinDeltaTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateAnimPhysicsAfterReset, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_UCAI, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_O2T6, 0x00C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_O5VT, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ChaosSettings, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_77H3, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x0138);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringStiffness, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_9MIR, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_OG4Y, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0220);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0228);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, ThrustStrength, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_6E51, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0200);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_DXTE, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0240);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bShowPreviewPlane, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_DMDX, 0x02BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x0370);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0228);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_5BHU, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x0280);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x00D0);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_6HST, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_J5V8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_2F47, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_XUYZ, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0250);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_NDZD, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0238);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_Z1N4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_AF95, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x0790);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, DisableBelowMinLodStripping, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bSupportLODStreaming, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_E3EG, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumStreamedLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumOptionalLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0050);
		}

		// class USkeletalMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__SkeletalMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimplificationSettings, 0x0040);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_8R9P, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// class USkyAtmosphereComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SkyAtmosphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransformMode, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_WH05, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, BottomRadius, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, GroundAlbedo, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AtmosphereHeight, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MultiScatteringFactor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScatteringScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScattering, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighExponentialDistribution, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScatteringScale, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScattering, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorptionScale, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorption, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAnisotropy, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieExponentialDistribution, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorptionScale, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorption, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherTentDistribution, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, SkyLuminanceFactor, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPespectiveViewDistanceScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, HeightFogContribution, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransmittanceMinLightElevationAngle, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_PKAJ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, bStaticLightingBuiltGUID, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_KUB6, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyAtmosphereComponent, 0x02C0);
		}

		// class ASkyAtmosphere : public AInfo
		TEST_METHOD(Class__Engine__SkyAtmosphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyAtmosphere, SkyAtmosphereComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyAtmosphere, 0x0228);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_21O9, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_A96N, 0x023E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_DVC4, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_UO2O, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x03F0);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_KII2, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x00B8);
		}

		// class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__SubsystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystemBlueprintLibrary, 0x0028);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_ZF8L, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_TFHW, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0068);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, FrameDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, UnknownData_E4G7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0030);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bGenerateFullFrame, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bUseHighPerformanceClock, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_GKTA, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0040);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0220);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0228);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_8MIT, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_BX72, 0x0439);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x0440);
		}

		// class UTexture2DArray : public UTexture
		TEST_METHOD(Class__Engine__Texture2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_TZ8O, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DArray, 0x0110);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_4DOM, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_OM4R, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00D0);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x00F0);
		}

		// class UTextureMipDataProviderFactory : public UAssetUserData
		TEST_METHOD(Class__Engine__TextureMipDataProviderFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureMipDataProviderFactory, 0x0028);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_5JJB, 0x00D6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00D8);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_86LC, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0150);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_KLDS, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, DirectionPropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateFunctionName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FinishedFunctionName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x00B0);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_R7B8, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_6Q1O, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_9XWB, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0228);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0228);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0228);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0228);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0258);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_HJ0A, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_7N9K, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x0108);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_ULHF, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_GJEW, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_P7E9, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_P4UQ, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0268);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_XGND, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_07V5, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_Q1RE, 0x0401);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0420);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, bAllowCPUAccess, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_DLOV, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, CPUData, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x0098);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0228);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0028);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0028);
		}

		// class ULightMapVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapVirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, TypeToLayer, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture2D, 0x00F8);
		}

		// class UVirtualTexturePoolConfig : public UObject
		TEST_METHOD(Class__Engine__VirtualTexturePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, DefaultSizeInMegabyte, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, UnknownData_4I0F, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, Pools, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexturePoolConfig, 0x0040);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_3TXN, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0080);
		}

		// class UVOIPTalker : public UActorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_8EP1, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x00E8);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// class UVolumeTexture : public UTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_EL2O, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0110);
		}

		// class UBP_WanderersPants_C : public UBP_Tier0LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WanderersPants__BP_WanderersPants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WanderersPants_C, 0x01B8);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_GF6K, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0080);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0088);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_GCUS, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x00B0);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// class UMediaComponent : public UActorComponent
		TEST_METHOD(Class__MediaAssets__MediaComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaTexture, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaPlayer, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaComponent, 0x00C0);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_W8QD, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_4XRR, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_34T7, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_4U54, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_RVDV, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_JNJN, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_63T0, 0x06D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_72GO, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_1MFZ, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x08D0);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_B0CX, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, EnableGenMips, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NumMips, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_YERJ, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_CPAU, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x0188);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0088);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0098);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_Z8N7, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, FrameDelay, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, TimeDelay, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0098);
		}

		// class UBP_Rewards2_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Rewards2__BP_Rewards2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, XPEntry_Anim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, BP_CasualRankDiamondBig, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, BP_CasualRankWidget, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, BP_GoldReward, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, BP_PlayerWidget, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, CanvasPanel_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, EarnedXPText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, HeaderText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, SizeBox_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, EarnedGold, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, EarnedXP, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, CurrentGold, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, CurrentXP, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, CurrentXPOriginalValue, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, DisplayedEarnedXP, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, CountedEarnedXP, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, NextRankXP, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, CountedRemainingXP, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, ShouldCountXP, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, UnknownData_FRAK, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, DisplayedXPProgressStart, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, DisplayedXPProgressTarget, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, InterpCounter, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, ReceivedRewards, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, UnknownData_DY3K, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, RewardDropTimeout, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, NavTabButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, isRewardsSequenceDone, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, UnknownData_7JC2, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rewards2_C, RewardsComplete, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rewards2_C, 0x02E0);
		}

		// class ABP_SmithHammer_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmithHammer__BP_SmithHammer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmithHammer_C, 0x1C28);
		}

		// class UBP_Estoc_BluntHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Estoc_BluntHandle__BP_Estoc_BluntHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Estoc_BluntHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Estoc_BluntHandle_C, 0x0080);
		}

		// class UBP_MainMenu_C : public UBP_BaseMainMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MainMenu__BP_MainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, MainNavReveal, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, ArmoryButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, ArmorySubNav, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, AudioButton, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_AudioSettings, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_ButtonPrompt, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_ControlsSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_Credits, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_GameSettings, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_HomeScoreboardContainer, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_HomeScreen, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_KeyBindingsSettings, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_Leaderboards, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_LocalPlay, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_MatchmakingScreen, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_MatchmakingSearchWidget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_ModList, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_MordhauProfileCustomization, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_MordhauServerBrowser, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_PlayerMenu, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_QuitMenu, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_SocialMediaMenu, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_TrainingMenu, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_VideoSettings, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, ContentSwitcher, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, ControlsButton, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, CreditsButton, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, CustomizationButton, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, GameButton, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, HomeButton, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, HomeSubNav, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, HomeSubNavButton, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, HordeBRButton, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Image_1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Image_2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Image_5, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, KeyBindingsButton, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, LeaderboardsButton, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Loading, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, LoadingBlur, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, LocalMatchButton, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, MainNav, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, MatchmakingButton, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, MiscButton, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, MiscSubNav, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, ModsButton, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Overlay_4, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, PlayButton, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, PlayerButton, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, PlayerMenuSubNav, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, PlayerSubButton, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, PlaySubNav, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, QuitButton, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, QuitSubNav, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, QuitSubNavButton, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, ReturnButton, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, ScoreboardButton, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, ServerBrowserButton, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, SettingsButton, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, SettingsSubNav, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, SocialButton, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, SubNavSwitcher, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, TextBlock_1, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, TrainingButton, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, VideoButton, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, NavButtons, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, SubNavButtons, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, QuitGameDialog, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, AgreementDialog, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, QuitMatchDialog, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, ErrorDialog, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, QuickJoinDelayTimer, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, GameInstance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, SelectedNavButton, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, SelectedSubNavButton, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, CustomizationPlatform, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, CurrentSubNavButtons, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, PlaySubNavButtons, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Nav_Struct, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, NextPingTime, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MainMenu_C, 0x04E0);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_GQ5U, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0070);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_VWOY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// class UStruct : public UField, public FStructBaseChain
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ChildProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptAndPropertyObjectReferences, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnresolvedScriptProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnversionedSchema, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x00B0);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_R3HF, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00C0);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_WW9B, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x00A0);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_ZQ3K, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0230);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_N9X78RXPNS, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_3LCKQ8141A, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_24IXUSRHWV, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00E0);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00E0);
		}

		// class USparseDelegateFunction : public UDelegateFunction
		TEST_METHOD(Class__CoreUObject__SparseDelegateFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USparseDelegateFunction, UnknownData_4PQI, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USparseDelegateFunction, 0x00F0);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_0HZ9, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x02B0);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_ZXUS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_INW1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_XCE7, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03E8);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_TK1N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_MSEV, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0298);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_0JWU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_3P66, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_PXKT, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_S4XA, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_SV9E, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_NWT2, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_51HT, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_XD6I, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_DEJP, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_B9Z2, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0078);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_QZM9, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_1UOZ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x0098);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_X150, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// class UMulticastInlineDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegateProperty, 0x0078);
		}

		// class UMulticastSparseDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastSparseDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastSparseDelegateProperty, 0x0078);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_S9ID, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0090);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_04YB, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_IMIM, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// class UPropertyWrapper : public UObject
		TEST_METHOD(Class__CoreUObject__PropertyWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyWrapper, UnknownData_0CPO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyWrapper, 0x0030);
		}

		// class UMulticastDelegatePropertyWrapper : public UPropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegatePropertyWrapper, 0x0030);
		}

		// class UMulticastInlineDelegatePropertyWrapper : public UMulticastDelegatePropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegatePropertyWrapper, 0x0030);
		}

		// class UBP_maulBohemian_FistHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maulBohemian_FistHead__BP_maulBohemian_FistHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maulBohemian_FistHead_C, 0x0078);
		}

		// class ABP_Sickle_C : public ABP_Axe_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sickle__BP_Sickle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sickle_C, 0x1C28);
		}

		// class ABP_Sledgehammer_C : public ABP_BattleAxe_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sledgehammer__BP_Sledgehammer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sledgehammer_C, 0x1C28);
		}

		// class UHunterCrossbow_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__HunterCrossbow__HunterCrossbow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHunterCrossbow_C, 0x0078);
		}

		// class ABP_Instrument_C : public ABP_MordhauWeapon_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Instrument__BP_Instrument_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, UberGraphFrame, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, Audio3, 0x1C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, Audio2, 0x1C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, Audio1, 0x1C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, Audio0, 0x1C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, ReplicatedTone, 0x1C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, UnknownData_11FG, 0x1C51);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, ToneCooldown, 0x1C54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, ChordCooldown, 0x1C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, UnknownData_ATW9, 0x1C5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, SimpleModeSounds, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, AudioComponents, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, LastAudioComponent, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, NextChordTime, 0x1C84);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, NextPlayTime, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, UnknownData_ZX8R, 0x1C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, ToneSounds, 0x1C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, ScaleOffset, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, MinimumAnimationDelay, 0x1CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, LastAnimationPlayTime, 0x1CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, ManualPlayToneOffset, 0x1CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Instrument_C, PlayMontage, 0x1CB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Instrument_C, 0x1CC0);
		}

		// class ABP_MeatCleaver_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MeatCleaver__BP_MeatCleaver_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MeatCleaver_C, 0x1C28);
		}

		// class UBP_JavelinWarDart_LeafHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JavelinWarDart_LeafHead__BP_JavelinWarDart_LeafHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JavelinWarDart_LeafHead_C, 0x0078);
		}

		// class ABP_ThrownJavelinProjectile_C : public ABP_ThrownWeaponProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownJavelinProjectile__BP_ThrownJavelinProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownJavelinProjectile_C, 0x07D0);
		}

		// class UBP_EyePatch_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_EyePatch__BP_EyePatch_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyePatch_C, 0x01A0);
		}

		// class UBP_PlagueDoctorMask_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlagueDoctorMask__BP_PlagueDoctorMask_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlagueDoctorMask_C, 0x01A0);
		}

		// class UBP_Coif_Cap_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Coif_Cap__BP_Coif_Cap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Coif_Cap_C, 0x01A0);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_EPIT, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_ZKS4, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0430);
		}

		// class UBP_Stubble3Male01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Stubble3Male01__BP_Stubble3Male01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Stubble3Male01_C, 0x0078);
		}

		// class UBP_Stubble2Male01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Stubble2Male01__BP_Stubble2Male01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Stubble2Male01_C, 0x0078);
		}

		// class UBP_FullBeardMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_FullBeardMale01__BP_FullBeardMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FullBeardMale01_C, 0x0078);
		}

		// class UBP_Emblem_Lobster_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Lobster__BP_Emblem_Lobster_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Lobster_C, 0x0060);
		}

		// class UBP_Emblem_LilyFlower_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_LilyFlower__BP_Emblem_LilyFlower_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_LilyFlower_C, 0x0060);
		}

		// class UBP_Emblem_KillArchers_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_KillArchers__BP_Emblem_KillArchers_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_KillArchers_C, 0x0060);
		}

		// class UBP_Emblem_Archaictemplar_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Archaictemplar__BP_Emblem_Archaictemplar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Archaictemplar_C, 0x0060);
		}

		// class UBP_Emblem_Aetherdragon_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Aetherdragon__BP_Emblem_Aetherdragon_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Aetherdragon_C, 0x0060);
		}

		// class UBP_Tower01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Tower01__BP_Tower01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tower01_C, 0x0060);
		}

		// class UBP_SunAndMoon_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_SunAndMoon__BP_SunAndMoon_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SunAndMoon_C, 0x0060);
		}

		// class UBP_FDL01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_FDL01__BP_FDL01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FDL01_C, 0x0060);
		}

		// class UBP_dc1_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_dc1__BP_dc1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_dc1_C, 0x0060);
		}

		// class UBOT_FootsoldierRed_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_FootsoldierRed__BOT_FootsoldierRed_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_FootsoldierRed_C, 0x0108);
		}

		// class UBOT_FancyKnight_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_FancyKnight__BOT_FancyKnight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_FancyKnight_C, 0x0108);
		}

		// class UBOT_Duelist_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Duelist__BOT_Duelist_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Duelist_C, 0x0108);
		}

		// class UBOT_Squire_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Squire__BOT_Squire_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Squire_C, 0x0108);
		}

		// class UBOT_Peasant2_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Peasant2__BOT_Peasant2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Peasant2_C, 0x0108);
		}

		// class UBP_Sellsword_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Sellsword__BP_Sellsword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Sellsword_C, 0x0060);
		}

		// class UBP_Militia_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Militia__BP_Militia_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Militia_C, 0x0060);
		}

		// class UBP_Mercenary_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Mercenary__BP_Mercenary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mercenary_C, 0x0060);
		}

		// class UBP_Count_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Count__BP_Count_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Count_C, 0x0060);
		}

		// class UBP_Conscript_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Conscript__BP_Conscript_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Conscript_C, 0x0060);
		}

		// class UBP_Knotting3_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Knotting3__BP_Knotting3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Knotting3_C, 0x0060);
		}

		// class UBP_ProfileCustomization_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ProfileCustomization__BP_ProfileCustomization_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ArmoryHide, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ArmoryReveal, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, SaveAnim, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ControlsButtonAnim, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, AdditionalPointsBar, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, AddNewProfileButton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ArmorProtectionBar, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ArmorProtectionBarStatic, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ArmoryTabs, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ArmoryTabsBorder, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BackButton, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BackButtonOverlay, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BodyButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BP_BodyCustomization, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BP_CasualRankDiamond, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BP_FaceCustomization_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BP_LoadoutPicker, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BP_MordhauArmor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BP_MordhauCustomizationPreview, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BP_MordhauEquipment0, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BP_MordhauEquipment1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BP_MordhauEquipment2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BP_SkillsCustomization, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BreakdownRibbonsBorder, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, CloneProfileButton, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, CloseButton, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, CloseButtonOverlay, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ControlsButton, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ControlsPanel, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Cost_Helmet, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, CostBreakdownBox, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, CurrentPointsBar, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, CustomizationPanelSwitcher, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, DeleteProfileButton, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, EquipmentButton, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, EquipmentPanel, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, EquipmentSwitcher, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, FaceButton, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, HEadRibbonButton, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Helmet, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, HelmetEntry, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, HorizontalBox_3, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, HorizontalBox_14328, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ic_armor, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, IC_body, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, IC_face, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, IC_gear, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, IC_skills, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_1, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_2, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_3, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_4, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_5, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_6, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_7, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_8, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_9, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_10, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_11, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_12, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_13, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_14, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_15, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_16, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_17, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_18, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_19, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_20, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_25, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_28, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_29, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_30, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_31, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_32, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_53, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_193, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Image_228, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Legs, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, LegsEntry, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, LegsRibbonButton, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, LoadoutButton, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, MainCanvas, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, MainContentOverlay, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, MainPanelBackground, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, MenuContentSizeBox, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, MenuToggleButton, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, MenuToggleButtonOverlay, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, MovementSpeedBarStatic, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, NameRibbonSizeBox, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, NewBody, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, NewHead, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, NotEnoughPointsBar, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Overlay_1, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Overlay_4, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Overlay_21, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Overlay_22, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Overlay_23, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Overlay_24, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Overlay_25, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Overlay_26, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, PerksVerticalBox, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, PointInfoElement, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, PreviewContainer, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Primary, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, PrimaryEntry, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, PrimaryRibbonButton, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, PrimarySlotButton, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, PrimaryWeaponText, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ProgressBar_2, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, RenameProfileButton, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, RibbonText, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Secondary, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, SecondaryEntry, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, SecondaryRibbonButton, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, SecondarySlotButton, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, SecondaryWeaponText, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, SizeBox_2, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Skills, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, SkillsButton, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, SpawnButton, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, SpawnButtonOverlay, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Tertiary, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TertiaryEntry, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TertiaryRibbonButton, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TertiarySlotButton, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TertiaryWeaponText, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_2, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_3, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_5, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_6, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_8, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_9, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_17, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_23, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_24, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_25, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_26, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TextBlock_27, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TimerOverlay, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TimerText, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TopPanel, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Torso, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Torsoentry, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, TorsoRibbonButton, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, WearablesButton, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ProfileCustomization, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, ProfileWrapper, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, LastTextInputDialog, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, QueuedProfileToAdd, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, LastChoiceDialog, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, isControlsOpen, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, isBreakdownPinned, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, UnknownData_HW9C, 0x07A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, CustomizationTabs, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, PerkCostEntries, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, RibbonText_1, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, RibbonTextName, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BreakdownPressedStyle, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BreakdownNormalStyle, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BreakdownArmorColor, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BreakdownGearColor, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, BP_MainMenu_Reference, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, HUD, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, Armory_State, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, isMainMenu, 0x0D39);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, UnknownData_0Z0F, 0x0D3A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, HoveredPerkCost, 0x0D3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, isPreviewPerkSelected, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, IsEditingDefaultCustomization, 0x0D41);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, UnknownData_7N5F, 0x0D42);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, LoadoutSelectionTimer, 0x0D44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileCustomization_C, SaveDeltaTimeCounter, 0x0D48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ProfileCustomization_C, 0x0D4C);
		}

		// class UBP_PlayerMenu_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PlayerMenu__BP_PlayerMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, HideAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, EntryAnim, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, BP_BannerSelection, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, BP_CasualRankWidget, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, BP_PlayerStatsMenu, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, BP_PlayerWidget_C_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, BP_RankIcon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, BP_RankIcon_3v3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, ChangeBannerButton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, CurrentRankMMRText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, CurrentRankText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, Image_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, Image_4, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, Image_9, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, RankDisplayDropdown, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, TextBlock_3, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, TextBlock_4, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, TextBlock_6, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerMenu_C, RankDisplayDropdownOptions, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerMenu_C, 0x02E0);
		}

		// class UBP_ArmorCustomization_C : public UBP_CustomizationTab_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ArmorCustomization__BP_ArmorCustomization_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, UnknownData_NM7X, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, ArmsSlot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, BackButton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Button_1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Button_2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Button_3, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Button_4, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, CoifSlot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, DownArrow, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, EmblemButton, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, EmblemColorPicker1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, EmblemColorPicker2, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, EmblemName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, EntriesTitle, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, FeetSlot, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, HandsSlot, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, HeadSlot, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, HorizontalBox_5, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Image_1, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Image_2, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Image_3, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Image_4, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, ItemEntriesBox, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, LegsSlot, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, LowerChestSlot, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, MetalRoughnessScaleSlider, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, MetalTintColorPicker, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, ShouldersSlot, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, TeamColorPreviewDropdown, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Tier0Button, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Tier1Button, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Tier2Button, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, Tier3Button, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, UpperChestSlot, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, WidgetSwitcher_1, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, SlotWidgets, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, ItemChoosingForSlot, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, UnknownData_6PRR, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, EditingDefaultTier, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, HeadDefaultCustomizationDefaults, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, ChestDefaultCustomizationDefaults, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, LegsDefaultCustomizationDefaults, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, TierButtonStyleSelected, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, TierButtonStyleUnselected, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, TeamColorPreviewOptions, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmorCustomization_C, TeamColorsPreviewMode, 0x0990);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmorCustomization_C, 0x0994);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_M55W, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppId, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, GenerationGuid, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_0FBU, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x0650);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSingleInstanceModeOverrideRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_TO06, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SingleInstanceModeRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_TN83, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_MTTY, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_EIWZ, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_1JU2, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_URA1, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_Y6GA, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_1B17, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ExclusionLandscapeLayers, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumExclusionLayerWeight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_ALFR, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_Z8BS, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_BNCZ, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_4MOO, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_FFCS, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_0CGS, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_KY2M, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, TranslucencySortPriority, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_CVDH, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_QTTC, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_QQNL, 0x0346);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RuntimeVirtualTextures, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureCullMips, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureRenderPassType, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_HDFI, 0x035D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x0360);
		}

		// class UFoliageType_Actor : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, ActorClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, bShouldAttachToBaseComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, UnknownData_LC9O, 0x0369);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_Actor, 0x0370);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x0380);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_ZZII, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0270);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_SOWC, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0290);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_V7CQ, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x0490);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0260);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_7HIO, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x00D8);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_NXHX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_U4OP, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0068);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_7QIL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_0TON, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0260);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_0TKK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_QCBF, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequenceMetaData : public UInterface
		TEST_METHOD(Class__LevelSequence__LevelSequenceMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMetaData, 0x0028);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x0498);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_3ML4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_AGEJ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_WCGD, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, AdditionalEventReceivers, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, CameraSettings, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_RA6J, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_8E3O, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bShowBurnin, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_LPWG, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x02B0);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x02F0);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00A0);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_UWHS, 0x0898);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x09A0);
		}

		// class ALevelSequenceMediaController : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceMediaController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_VAUY, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, Sequence, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, MediaComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, ServerStartTimeSeconds, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_43VY, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceMediaController, 0x0248);
		}

		// class UClothConfigNv : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothConfigNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ClothingWindMethod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_PGJP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraint, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraint, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraint, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraint, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionStiffness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionCullScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Damping, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Friction, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindDragCoefficient, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindLiftCoefficient, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearDrag, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularDrag, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearInertiaScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularInertiaScale, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CentrifugalInertiaScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SolverFrequency, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, StiffnessFrequency, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityScale, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityOverride, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, bUseGravityOverride, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_32LN, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherStiffness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherLimit, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CollisionThickness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveSpringStiffness, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveDamperStiffness, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindMethod, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_ETZP, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraintConfig, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraintConfig, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraintConfig, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraintConfig, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigNv, 0x0140);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_JGQ4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// class UClothPhysicalMeshDataNv_Legacy : public UClothPhysicalMeshDataBase_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothPhysicalMeshDataNv_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, MaxDistances, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopDistances, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopRadiuses, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, AnimDriveMultipliers, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataNv_Legacy, 0x0120);
		}

		// class UBP_Barbarian_C : public UCharacterVoice
		TEST_METHOD(BlueprintGeneratedClass__BP_Barbarian__BP_Barbarian_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Barbarian_C, 0x00A0);
		}

		// class UBP_SecondWindPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SecondWindPerk__BP_SecondWindPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SecondWindPerk_C, 0x0068);
		}

		// class UBP_RatPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RatPerk__BP_RatPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RatPerk_C, 0x0068);
		}

		// class UBP_BloodlustPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BloodlustPerk__BP_BloodlustPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BloodlustPerk_C, 0x0068);
		}

		// class UBP_Archetype_C : public UArchetype
		TEST_METHOD(BlueprintGeneratedClass__BP_Archetype__BP_Archetype_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Archetype_C, 0x0030);
		}

		// class UBP_MapList_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MapList__BP_MapList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapList_C, BP_MapEntryLocalPlay, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapList_C, BP_MapEntryLocalPlay_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapList_C, BP_MapEntryLocalPlay_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapList_C, BP_MapEntryLocalPlay_3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapList_C, BP_MapEntryLocalPlay_4, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapList_C, EntryGrid, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MapList_C, SelectedEntry, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MapList_C, 0x0268);
		}

		// class UBP_PushGameModeMetadata_C : public UGameModeMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_PushGameModeMetadata__BP_PushGameModeMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PushGameModeMetadata_C, 0x00D0);
		}

		// class UBP_GenericItemEntry_C : public UBP_CustomizationItemEntry_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GenericItemEntry__BP_GenericItemEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, Border_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, BottomHalf, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, BP_NewUnlockIndicator, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, Button_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, Button_513, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, CoinsImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, CoinsText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, CostAndIconBox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, CostIcon, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, CostText, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, Diamond, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, GradientOverlay, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, ic_locked, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, Image_3, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, NameText, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, Overlay_2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, RankDiamond, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, RankText, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, RemoveIconBox, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, TopHalf, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, TypeText, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, UnlockInfo, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, EquipmentClass, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, WearableClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, InventoryItem, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, Type, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, NotEnoughPoints, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, IsLocked, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, UnknownData_V248, 0x0362);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, Cost, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, CostTooltip, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, UnlockTooltip, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, CharacterPointsLeft, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, PointsCost, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, IsEquipmentClassSkin, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, UnknownData_FGA6, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, LastChoiceDialog, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, WaitingForResponse, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, UnknownData_M44M, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, GoldRequirement, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, RankRequirement, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, CurrentLevel, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, CurrentGold, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, UnknownData_0COT, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericItemEntry_C, MordhauEquipmentRef, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GenericItemEntry_C, 0x03E8);
		}

		// class UBP_LeftStrikeMotion_C : public UBP_StrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LeftStrikeMotion__BP_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeftStrikeMotion_C, 0x1160);
		}

		// class UBP_DropdownEntry_C : public UBP_SettingEntryParent_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_DropdownEntry__BP_DropdownEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DropdownEntry_C, UnknownData_CK2H, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DropdownEntry_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DropdownEntry_C, DownArrow, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DropdownEntry_C, Dropdown, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DropdownEntry_C, dropdownEntry, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DropdownEntry_C, TextBlock_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DropdownEntry_C, EntryText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DropdownEntry_C, Options, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DropdownEntry_C, OnSelectionChanged, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DropdownEntry_C, OnHovered, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DropdownEntry_C, 0x02A8);
		}

		// class UBP_AdvRichTextBlockImageDecorator_C : public UAdvRichTextBlockImageDecorator
		TEST_METHOD(BlueprintGeneratedClass__BP_AdvRichTextBlockImageDecorator__BP_AdvRichTextBlockImageDecorator_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AdvRichTextBlockImageDecorator_C, 0x0030);
		}

		// class UBP_MordhauCameraComponent_C : public UMordhauCameraComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauCameraComponent__BP_MordhauCameraComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MordhauCameraComponent_C, 0x09A0);
		}

		// class UBP_Horse1H_RightStrikeMotion_C : public UBP_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Horse1H_RightStrikeMotion__BP_Horse1H_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Horse1H_RightStrikeMotion_C, 0x1160);
		}

		// class UBP_NavArea_Team2Only_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__BP_NavArea_Team2Only__BP_NavArea_Team2Only_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavArea_Team2Only_C, 0x0048);
		}

		// class ABP_LocalInteractableChest_C : public ABP_LocalCooldownInteractable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LocalInteractableChest__BP_LocalInteractableChest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LocalInteractableChest_C, UberGraphFrame, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LocalInteractableChest_C, Audio, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LocalInteractableChest_C, ContentsMesh, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LocalInteractableChest_C, Box, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LocalInteractableChest_C, BoxMesh, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LocalInteractableChest_C, 0x03D8);
		}

		// class UBP_RightStabMotion_C : public UBP_StabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RightStabMotion__BP_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RightStabMotion_C, 0x1108);
		}

		// class ABP_OutGoreMeshNeck_C : public ABP_BaseGoreMesh_C
		TEST_METHOD(BlueprintGeneratedClass__BP_OutGoreMeshNeck__BP_OutGoreMeshNeck_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_OutGoreMeshNeck_C, UberGraphFrame, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_OutGoreMeshNeck_C, 0x0248);
		}

		// class URunHeadBobShakeRight_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__RunHeadBobShakeRight__RunHeadBobShakeRight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URunHeadBobShakeRight_C, 0x0160);
		}

		// class UBP_Battle1_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Battle1_Banner__BP_Battle1_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Battle1_Banner_C, 0x0060);
		}

		// class UBP_2HSwordAnimationProfile_Greatsword_C : public UBP_2HSwordAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2HSwordAnimationProfile_Greatsword__BP_2HSwordAnimationProfile_Greatsword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2HSwordAnimationProfile_Greatsword_C, 0x00C0);
		}

		// class UBP_KilledByPanelGearEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_KilledByPanelGearEntry__BP_KilledByPanelGearEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanelGearEntry_C, BackgroundImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanelGearEntry_C, Entry, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanelGearEntry_C, Text, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KilledByPanelGearEntry_C, 0x0248);
		}

		// class UBP_Watermark_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Watermark__BP_Watermark_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Watermark_C, BuildNo, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Watermark_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Watermark_C, SteamId, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Watermark_C, 0x0248);
		}

		// class UBP_VoteKickMenu_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_VoteKickMenu__BP_VoteKickMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, Background, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, Border_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, ChoiceList, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, Container, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, TeamDamageText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, TextBlock_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, TextBlock_4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, VoteNoText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, VoteYesText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, PlayerName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, StartedByPlayerName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VoteKickMenu_C, TeamDamage, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VoteKickMenu_C, 0x02A4);
		}

		// class UBP_KilledByPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_KilledByPanel__BP_KilledByPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, EntryAnimation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, ArmorBox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, BP_PlayerWidget, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, GearVerticalBox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, HeadArmor, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, HealthProgressBar, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, Image_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, Image_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, Image_7, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, Image_8, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, KillStats, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, LegArmor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, PerkVerticalBox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, StamProgressBar, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, StatusBars, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, TextBlock_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, TextBlock_3, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, TorsoArmor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, OurKills, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, TheirKills, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, Stamina, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KilledByPanel_C, Health, 0x02D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KilledByPanel_C, 0x02D8);
		}

		// class UBP_Announcement_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Announcement__BP_Announcement_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, Exit_Anim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, Entry_Anim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, Image_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, Overlay_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, Overlay_5, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, TextBlock_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, TextBlock_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, Text, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, Subtext, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, ShowingAnnouncement, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, UnknownData_RMGE, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, ReceivedAnnouncementText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, ReceivedAnnouncementSubtext, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Announcement_C, ShowingOutOfBounds, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Announcement_C, 0x02D9);
		}

		// class UBP_BlackSallet_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BlackSallet__BP_BlackSallet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlackSallet_C, 0x01C8);
		}

		// class UHitShakeHitstop_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__HitShakeHitstop__HitShakeHitstop_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitShakeHitstop_C, 0x0160);
		}

		// class UBP_VeteransBarbute_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransBarbute__BP_VeteransBarbute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransBarbute_C, 0x01C8);
		}

		// class UBP_ModList_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ModList__BP_ModList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, Button_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, Image_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ModList_C, ScrollBox_1, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ModList_C, 0x0250);
		}

		// class UBP_SalletPainted_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SalletPainted__BP_SalletPainted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SalletPainted_C, 0x01C8);
		}

		// class UBP_Billhook_ElegantHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Billhook_ElegantHead__BP_Billhook_ElegantHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Billhook_ElegantHead_C, 0x0078);
		}

		// class UBP_BillhookSpiralwrapShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BillhookSpiralwrapShaft__BP_BillhookSpiralwrapShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BillhookSpiralwrapShaft_C, 0x0078);
		}

		// class UBP_Dagger_TribalGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Dagger_TribalGuard__BP_Dagger_TribalGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Dagger_TribalGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Dagger_TribalGuard_C, 0x0080);
		}

		// class ABP_Thrown1HAxeProjectile_C : public ABP_ThrownSpinningProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Thrown1HAxeProjectile__BP_Thrown1HAxeProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Thrown1HAxeProjectile_C, 0x07D0);
		}

		// class UBP_Spear_PeninsularHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Spear_PeninsularHead__BP_Spear_PeninsularHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Spear_PeninsularHead_C, 0x0078);
		}

		// class UBP_Greatsword_BeastSlayerBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_BeastSlayerBlade__BP_Greatsword_BeastSlayerBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Greatsword_BeastSlayerBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_BeastSlayerBlade_C, 0x0080);
		}

		// class UBP_Greatsword_CrossRainGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_CrossRainGuard__BP_Greatsword_CrossRainGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Greatsword_CrossRainGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_CrossRainGuard_C, 0x0080);
		}

		// class UBP_Greatsword_GatekeeperBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_GatekeeperBlade__BP_Greatsword_GatekeeperBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Greatsword_GatekeeperBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_GatekeeperBlade_C, 0x0080);
		}

		// class UBP_LadderAnimationProfile_C : public UBP_MeleeWeaponAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LadderAnimationProfile__BP_LadderAnimationProfile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LadderAnimationProfile_C, 0x00C0);
		}

		// class UBP_FistsAnimationProfile_C : public UBP_MeleeWeaponAnimationProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FistsAnimationProfile__BP_FistsAnimationProfile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FistsAnimationProfile_C, 0x00C0);
		}

		// class UHitShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__HitShake__HitShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitShake_C, 0x0160);
		}

		// class UBP_Poleaxe_ChampionsHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_ChampionsHead__BP_Poleaxe_ChampionsHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_ChampionsHead_C, 0x0078);
		}

		// class UBP_Poleaxe_CrowHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_CrowHead__BP_Poleaxe_CrowHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_CrowHead_C, 0x0078);
		}

		// class UBP_Poleaxe_RefinedHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_RefinedHead__BP_Poleaxe_RefinedHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_RefinedHead_C, 0x0078);
		}

		// class ABP_Halberd_C : public ABP_Polearm_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Halberd__BP_Halberd_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Halberd_C, 0x1C28);
		}

		// class UBP_ArmingSword_NoblesBasketHilt_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_NoblesBasketHilt__BP_ArmingSword_NoblesBasketHilt_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_NoblesBasketHilt_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_NoblesBasketHilt_C, 0x0080);
		}

		// class UBP_ArmingSword_FloralHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmingSword_FloralHandle__BP_ArmingSword_FloralHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArmingSword_FloralHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmingSword_FloralHandle_C, 0x0080);
		}

		// class UBP_ZweihanderCommander_CutterBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ZweihanderCommander_CutterBlade__BP_ZweihanderCommander_CutterBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ZweihanderCommander_CutterBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ZweihanderCommander_CutterBlade_C, 0x0080);
		}

		// class UBP_ZweihanderCommander_QuatrecurlGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ZweihanderCommander_QuatrecurlGuard__BP_ZweihanderCommander_QuatrecurlGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ZweihanderCommander_QuatrecurlGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ZweihanderCommander_QuatrecurlGuard_C, 0x0080);
		}

		// class UBP_ZweihanderCommander_SlimGrip_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ZweihanderCommander_SlimGrip__BP_ZweihanderCommander_SlimGrip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ZweihanderCommander_SlimGrip_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ZweihanderCommander_SlimGrip_C, 0x0080);
		}

		// class ABP_OneHandedSword_C : public ABP_MordhauWeapon_C
		TEST_METHOD(BlueprintGeneratedClass__BP_OneHandedSword__BP_OneHandedSword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_OneHandedSword_C, 0x1C28);
		}

		// class UBP_MatchmakingScreen_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MatchmakingScreen__BP_MatchmakingScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BP_BrawlGameModeEntry, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BP_DuelGameModeEntry, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BP_DuelLeaderboards, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BP_FrontlineGameModeEntry, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BP_HordeGameModeEntry, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BP_InvasionGameModeEntry, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BP_OfficialRules, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BP_QuickPlayCategory, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BP_RankedCategory, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BP_TeamfightGameModeEntry, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BP_TeamfightLeaderboards, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, Button_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, Button_Rules, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, ButtonText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, CasualModes, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, CasualRegionComboBox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, DebugTextBox, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, GeneralCategories, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, Image_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, Image_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, Image_3, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, Image_4, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, MultiLineEditableTextBox_1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, Overlay_5, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, RankedModes, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, RankedRegionComboBox, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, Rules, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, SearchButton, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, SizeBox_10, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, TextBlock_1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, TextBlock_2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, TextBlock_4, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, TextBlock_5, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, WidgetSwitcher_1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, WidgetSwitcher_Leaderboards, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, MainMenu, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, bIsSearching, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, UnknownData_EZVE, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, GameInstance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, SearchTimer, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, PartyLeader, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, PartySize, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, PartyState, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, IsPartyReady, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, IsJoining, 0x03DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, IsRankedTab, 0x03DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, TimeoutStartTime, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, Tickets, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, QueueNames, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, PartyGroupID, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, MatchQueueName, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, MatchOwnerID, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, SearchFailureDialog, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, bCancellingSearch, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, bCanTickSearch, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, UnknownData_M6G5, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, NumHandledQueues, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, TicketQueueNames, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, bIsRankedSearch, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, UnknownData_3VEJ, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, LocationPreference, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, ServerIdx, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, SearchState, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, UnknownData_KV4N, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, PartyMembers, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, PartyMemberEntities, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, bFailedToReserveSlots, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, bCreatedTicket, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, UnknownData_BGRL, 0x04DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, Matches, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, MatchQueueNames, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, MatchMembers, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, bHasPendingMatches, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, bNeedsWidgetsUpdate, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, bEncounteredError, 0x0552);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, UnknownData_HBVE, 0x0553);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, TimerValue, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, bDidSelectRegion, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, UnknownData_MPVW, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, BanEndTime, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, MemberIdx, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingScreen_C, bStartingSearch, 0x056C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MatchmakingScreen_C, 0x056D);
		}

		// class UBP_Leaderboards_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Leaderboards__BP_Leaderboards_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, Left_Entry_Anim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, Right_Entry_Anim, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_4, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_6, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_C_7, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_C_8, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_C_9, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_C_10, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_C_11, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_C_12, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_C_13, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, BP_LeaderboardEntry_C_14, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, CurrentPlayerEntry, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, ScrollBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, TextBlock_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, bUpdatingLeaderboards, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, bUpdatedLeaderboards, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, UnknownData_Y7CV, 0x02E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, LastAvatarUpdateTime, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, bUpdatedAvatars, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, UnknownData_U31S, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, Leaderboard_Name, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboards_C, Header_Text, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Leaderboards_C, 0x0320);
		}

		// class UBP_FencingDoubletPadded_C : public UBP_Tier1UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FencingDoubletPadded__BP_FencingDoubletPadded_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FencingDoubletPadded_C, 0x01E8);
		}

		// class UBP_FlutedChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlutedChest__BP_FlutedChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlutedChest_C, 0x01E8);
		}

		// class UAvfMediaSettings : public UObject
		TEST_METHOD(Class__AvfMediaFactory__AvfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, NativeAudioOut, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, UnknownData_OKN7, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvfMediaSettings, 0x0030);
		}

		// class ABP_Maul_C : public ABP_BattleAxe_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Maul__BP_Maul_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Maul_C, 0x1C28);
		}

		// class ABP_Federschwert_C : public ABP_TwoHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Federschwert__BP_Federschwert_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Federschwert_C, 0x1C28);
		}

		// class ABP_Crossbow_C : public ABP_MissileEquipment_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Crossbow__BP_Crossbow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Crossbow_C, UberGraphFrame, 0x0CD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Crossbow_C, 0x0CE0);
		}

		// class UBP_RoundShield_LeftStabMotion_C : public UBP_Shield_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RoundShield_LeftStabMotion__BP_RoundShield_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RoundShield_LeftStabMotion_C, 0x1108);
		}

		// class UBP_Polehammer_Shaft2_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Shaft2__BP_Polehammer_Shaft2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Shaft2_C, 0x0078);
		}

		// class UBP_PlayerStatsMenu_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PlayerStatsMenu__BP_PlayerStatsMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, AssistsEntry, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, BallistaKills, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Battlecries, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Blocks, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Chambers, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Disarms, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, FireKills, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, FistKills, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, HeadHitsMelee, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, HeadHitsProj, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, HeadsDecapitated, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, HitsMelee, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, HitsProj, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Image_9, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Image_10, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Image_11, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Image_12, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Image_13, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, KickKills, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, KillsEntry, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, LadderKills, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, LegHitsMelee, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, LegHitsProj, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Mostassistsinonematch, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Mostdamagetakeninonelife, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Mostkillsinonelife, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, Mostkillsinonematch, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, PommelKills, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, ProjectilesBlocked, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, ProjectilesDeflected, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, TorsoHitsMelee, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, TorsoHitsProj, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerStatsMenu_C, TrainingSwordKills, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerStatsMenu_C, 0x0348);
		}

		// class UBP_WoodColor9_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor9__BP_WoodColor9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor9_C, 0x0078);
		}

		// class UBP_WoodColor13_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor13__BP_WoodColor13_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor13_C, 0x0078);
		}

		// class UBP_WoodColor12_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor12__BP_WoodColor12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor12_C, 0x0078);
		}

		// class UBP_WoodColor1_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor1__BP_WoodColor1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor1_C, 0x0078);
		}

		// class UBP_SkinColor8_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_SkinColor8__BP_SkinColor8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SkinColor8_C, 0x0078);
		}

		// class UBP_PlateColor22_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor22__BP_PlateColor22_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor22_C, 0x0078);
		}

		// class UBP_PlateColor21_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor21__BP_PlateColor21_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor21_C, 0x0078);
		}

		// class UBP_PlateColor20_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor20__BP_PlateColor20_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor20_C, 0x0078);
		}

		// class UBP_Gothic3_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Gothic3__BP_Gothic3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gothic3_C, 0x0060);
		}

		// class UBP_LongLooseMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_LongLooseMale02__BP_LongLooseMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongLooseMale02_C, 0x0078);
		}

		// class UBP_ContextPopupEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ContextPopupEntry__BP_ContextPopupEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_C, Button_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_C, TextBlock_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_C, ButtonLabel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_C, ButtonIndex, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_C, UnknownData_MB78, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_C, HoverText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopupEntry_C, Wrapper, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ContextPopupEntry_C, 0x0288);
		}

		// class ABP_SubField_C : public ASubField
		TEST_METHOD(BlueprintGeneratedClass__BP_SubField__BP_SubField_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SubField_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SubField_C, ParticleSystem, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SubField_C, Box, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SubField_C, DefaultSceneRoot, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SubField_C, 0x0258);
		}

		// class UBP_NetIndicator_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_NetIndicator__BP_NetIndicator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NetIndicator_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NetIndicator_C, PacketLossIndicator, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NetIndicator_C, PacketLossText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NetIndicator_C, PingIndicator, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NetIndicator_C, PingText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NetIndicator_C, LastReceiveTime, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NetIndicator_C, Ping, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NetIndicator_C, PingThreshold, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NetIndicator_C, PacketsLostThreshold, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NetIndicator_C, 0x0268);
		}

		// class UBP_SettingEntryParent_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SettingEntryParent__BP_SettingEntryParent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SettingEntryParent_C, Hide_if_console, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SettingEntryParent_C, 0x0231);
		}

		// class UBP_BannerEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BannerEntry__BP_BannerEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, BackgroundBlur_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, Banner, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, Border, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, Button_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, lock, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, Selected, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, UnknownData_9ZHD, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, BadgeID, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, Available, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, UnknownData_EGOD, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, PlayerMenu, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerEntry_C, Tooltip, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BannerEntry_C, 0x0290);
		}

		// class ABP_PurchaseEffect_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_PurchaseEffect__BP_PurchaseEffect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PurchaseEffect_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PurchaseEffect_C, SC_Purchase, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PurchaseEffect_C, PointLight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PurchaseEffect_C, PPPurchase, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PurchaseEffect_C, P_PurchaseEmberEffect, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PurchaseEffect_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PurchaseEffect_C, Intensity_Curve, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PurchaseEffect_C, IntensityTime, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PurchaseEffect_C, 0x025C);
		}

		// class UBP_DeathmatchGameModeMetadata_C : public UGameModeMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_DeathmatchGameModeMetadata__BP_DeathmatchGameModeMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DeathmatchGameModeMetadata_C, 0x00D0);
		}

		// class UBP_ArchersDualBracer_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArchersDualBracer__BP_ArchersDualBracer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArchersDualBracer_C, 0x01B8);
		}

		// class UBP_Plate_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Plate_Arms__BP_Plate_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Plate_Arms_C, 0x01B8);
		}

		// class ABP_InGoreMeshNeck_C : public ABP_BaseGoreMesh_C
		TEST_METHOD(BlueprintGeneratedClass__BP_InGoreMeshNeck__BP_InGoreMeshNeck_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_InGoreMeshNeck_C, UberGraphFrame, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_InGoreMeshNeck_C, 0x0248);
		}

		// class UBP_ChoiceMenuEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ChoiceMenuEntry__BP_ChoiceMenuEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenuEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenuEntry_C, Background, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenuEntry_C, Border_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenuEntry_C, BP_ButtonPrompt, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenuEntry_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenuEntry_C, Overlay_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenuEntry_C, SlotNumber, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenuEntry_C, WeaponName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenuEntry_C, Text, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChoiceMenuEntry_C, ID, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChoiceMenuEntry_C, 0x028C);
		}

		// class ABP_TorsoPickup_C : public ABP_WearablePickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TorsoPickup__BP_TorsoPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TorsoPickup_C, 0x0408);
		}

		// class UBP_EyeColor6_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor6__BP_EyeColor6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor6_C, 0x0078);
		}

		// class UBP_EyeColor12_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor12__BP_EyeColor12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor12_C, 0x0078);
		}

		// class UBP_EyeColor11_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor11__BP_EyeColor11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor11_C, 0x0078);
		}

		// class UBP_Cloth45_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth45__BP_Cloth45_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth45_C, 0x0078);
		}

		// class UBP_Cloth40_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth40__BP_Cloth40_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth40_C, 0x0078);
		}

		// class UBP_Cloth34_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth34__BP_Cloth34_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth34_C, 0x0078);
		}

		// class UBP_Cloth32_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth32__BP_Cloth32_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth32_C, 0x0078);
		}

		// class UBP_Cloth29_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth29__BP_Cloth29_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth29_C, 0x0078);
		}

		// class UBP_Cloth28_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth28__BP_Cloth28_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth28_C, 0x0078);
		}

		// class UBP_Cloth27_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth27__BP_Cloth27_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth27_C, 0x0078);
		}

		// class UBP_Cloth16_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth16__BP_Cloth16_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth16_C, 0x0078);
		}

		// class UBP_WanderersScarf_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WanderersScarf__BP_WanderersScarf_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_WanderersScarf_C, UberGraphFrame, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WanderersScarf_C, 0x01A8);
		}

		// class UBP_GermanSalletClosedRR_C : public UBP_GermanSalletBuffet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletClosedRR__BP_GermanSalletClosedRR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletClosedRR_C, 0x01C8);
		}

		// class UBP_GermanSallet_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSallet__BP_GermanSallet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSallet_C, 0x01C8);
		}

		// class UBP_conicfacemask_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_conicfacemask__BP_conicfacemask_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_conicfacemask_C, 0x01C8);
		}

		// class UBP_LinedAventail_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LinedAventail__BP_LinedAventail_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LinedAventail_C, 0x01A0);
		}

		// class UBP_RaisedArmet_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RaisedArmet__BP_RaisedArmet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RaisedArmet_C, 0x01C8);
		}

		// class UBP_NormanCasque_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NormanCasque__BP_NormanCasque_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NormanCasque_C, 0x01C8);
		}

		// class UBP_Rapier_CagedGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rapier_CagedGuard__BP_Rapier_CagedGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rapier_CagedGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rapier_CagedGuard_C, 0x0080);
		}

		// class UBP_Rapier_FineBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rapier_FineBlade__BP_Rapier_FineBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rapier_FineBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rapier_FineBlade_C, 0x0080);
		}

		// class UBP_Battleaxe_guardian_handle03_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Battleaxe_guardian_handle03__BP_Battleaxe_guardian_handle03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Battleaxe_guardian_handle03_C, 0x0078);
		}

		// class UBP_Zweihander_FlamingBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Zweihander_FlamingBlade__BP_Zweihander_FlamingBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Zweihander_FlamingBlade_C, 0x0078);
		}

		// class UBP_Zweihander_GuillotineBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Zweihander_GuillotineBlade__BP_Zweihander_GuillotineBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Zweihander_GuillotineBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Zweihander_GuillotineBlade_C, 0x0080);
		}

		// class UBP_Emblem_Warbros_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Warbros__BP_Emblem_Warbros_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Warbros_C, 0x0060);
		}

		// class UBP_Emblem_Walkingtree_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Walkingtree__BP_Emblem_Walkingtree_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Walkingtree_C, 0x0060);
		}

		// class UBP_Emblem_TempestKnights_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_TempestKnights__BP_Emblem_TempestKnights_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_TempestKnights_C, 0x0060);
		}

		// class UBP_Emblem_Risingunicorn_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Risingunicorn__BP_Emblem_Risingunicorn_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Risingunicorn_C, 0x0060);
		}

		// class UBP_LeatherColor22_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor22__BP_LeatherColor22_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor22_C, 0x0078);
		}

		// class UBP_LeatherColor21_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor21__BP_LeatherColor21_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor21_C, 0x0078);
		}

		// class UBP_LeatherColor20_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor20__BP_LeatherColor20_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor20_C, 0x0078);
		}

		// class UBP_Cloth10_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth10__BP_Cloth10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth10_C, 0x0078);
		}

		// class UBlockShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__BlockShake__BlockShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlockShake_C, 0x0160);
		}

		// class ABP_MordhauGameState_C : public AMordhauGameState
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauGameState__BP_MordhauGameState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, UberGraphFrame, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, DefaultSceneRoot, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, MatchEndInfo, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, VoteKickInfo, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, MatchEndInfoReplicated, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, UsesSpawnSelectScreen, 0x07D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, NoAmmoBoxes, 0x07D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, NoPreplacedEquipment, 0x07D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, HideTargetNamesIfAlive, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, OnlyLivingPlayersInScoreboard, 0x07D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, NoScoreInScoreboard, 0x07D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, IsVoteOngoing, 0x07D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, VoteYesVotes, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, VoteNoVotes, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, Voters, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, AllowsVoteKick, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, UsesCompetitiveRank, 0x0831);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, Scoreboard_Entry_Type, 0x0832);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, UnknownData_X9TO, 0x0833);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauGameState_C, LastVoteKickRequestTime, 0x0838);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauGameState_C, 0x0888);
		}

		// class ABP_Catapult_C : public AMordhauWheeledVehicle
		TEST_METHOD(BlueprintGeneratedClass__BP_Catapult__BP_Catapult_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Catapult_C, UberGraphFrame, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Catapult_C, MoveSound, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Catapult_C, ProjectileArmShooter, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Catapult_C, Projectile, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Catapult_C, BackCapsule, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Catapult_C, Box1, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Catapult_C, Box, 0x0CA0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Catapult_C, 0x0CA8);
		}

		// class UHitShakeThrowable_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__HitShakeThrowable__HitShakeThrowable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitShakeThrowable_C, 0x0160);
		}

		// class UBP_ThrowingAxe_Francisca_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrowingAxe_Francisca__BP_ThrowingAxe_Francisca_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ThrowingAxe_Francisca_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ThrowingAxe_Francisca_C, 0x0080);
		}

		// class UBP_ScotsmanMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_ScotsmanMale02__BP_ScotsmanMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScotsmanMale02_C, 0x0078);
		}

		// class UBP_MuttonchopsMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_MuttonchopsMale02__BP_MuttonchopsMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MuttonchopsMale02_C, 0x0078);
		}

		// class UBP_FriendlyMuttonchopsMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_FriendlyMuttonchopsMale02__BP_FriendlyMuttonchopsMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FriendlyMuttonchopsMale02_C, 0x0078);
		}

		// class UBP_PolearmLong_RightStrikeMotion_C : public UBP_Polearm_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PolearmLong_RightStrikeMotion__BP_PolearmLong_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PolearmLong_RightStrikeMotion_C, 0x1160);
		}

		// class UBP_SavoyardSmile_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SavoyardSmile__BP_SavoyardSmile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SavoyardSmile_C, 0x01C8);
		}

		// class UBP_CoveredFlatTop_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CoveredFlatTop__BP_CoveredFlatTop_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CoveredFlatTop_C, 0x01C8);
		}

		// class UBP_VeteransHelmPlume_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransHelmPlume__BP_VeteransHelmPlume_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransHelmPlume_C, 0x01C8);
		}

		// class UBP_Horse1H_LeftStabMotion_C : public UBP_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Horse1H_LeftStabMotion__BP_Horse1H_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Horse1H_LeftStabMotion_C, 0x1108);
		}

		// class UBP_GermanKettleRaised_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanKettleRaised__BP_GermanKettleRaised_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanKettleRaised_C, 0x01C8);
		}

		// class UBP_SlittedKettle_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SlittedKettle__BP_SlittedKettle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SlittedKettle_C, 0x01C8);
		}

		// class UBP_PaddedCoif_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PaddedCoif__BP_PaddedCoif_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PaddedCoif_C, 0x01C8);
		}

		// class UBP_BastardSword_SlasherGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword_SlasherGuard__BP_BastardSword_SlasherGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BastardSword_SlasherGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BastardSword_SlasherGuard_C, 0x0080);
		}

		// class UBP_DrapedCuirass_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DrapedCuirass__BP_DrapedCuirass_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DrapedCuirass_C, 0x01E8);
		}

		// class UBP_DrapedCuirassTorn_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DrapedCuirassTorn__BP_DrapedCuirassTorn_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DrapedCuirassTorn_C, 0x01E8);
		}

		// class UBP_PaintedMaximilianChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PaintedMaximilianChest__BP_PaintedMaximilianChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PaintedMaximilianChest_C, 0x01E8);
		}

		// class UBP_JoinedHosen_Poleyns_C : public UBP_Tier2LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JoinedHosen_Poleyns__BP_JoinedHosen_Poleyns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JoinedHosen_Poleyns_C, 0x01B8);
		}

		// class ACableActor : public AActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0228);
		}

		// class UCableComponent : public UMeshComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_J6ZB, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_ZYTL, 0x046E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_0KHB, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x04B0);
		}

		// class UBP_Executioner_RingerBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Executioner_RingerBlade__BP_Executioner_RingerBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Executioner_RingerBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Executioner_RingerBlade_C, 0x0080);
		}

		// class UBP_Executioner_PlainHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Executioner_PlainHandle__BP_Executioner_PlainHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Executioner_PlainHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Executioner_PlainHandle_C, 0x0080);
		}

		// class UBP_Executioner_GothicGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Executioner_GothicGuard__BP_Executioner_GothicGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Executioner_GothicGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Executioner_GothicGuard_C, 0x0080);
		}

		// class UBP_Executioner_FirmHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Executioner_FirmHandle__BP_Executioner_FirmHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Executioner_FirmHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Executioner_FirmHandle_C, 0x0080);
		}

		// class UGameplayTask : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_4UPY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_4R8B, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_G6E7, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0068);
		}

		// class UGameplayTask_ClaimResource : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0068);
		}

		// class UGameplayTask_SpawnActor : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, Success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_2DMU, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00A8);
		}

		// class UGameplayTask_TimeLimitedExecution : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_QNE1, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x0098);
		}

		// class UGameplayTask_WaitDelay : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_GBAZ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0080);
		}

		// class UGameplayTaskOwnerInterface : public UInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0028);
		}

		// class UGameplayTaskResource : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_9AVE, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_PZ5C, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0038);
		}

		// class UGameplayTasksComponent : public UActorComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_K9JQ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_RB8Z, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_CX5M, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0120);
		}

		// class UBP_Polehammer_Head8_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Head8__BP_Polehammer_Head8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Head8_C, 0x0078);
		}

		// class UBP_Polehammer_Head4_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Polehammer_Head4__BP_Polehammer_Head4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Polehammer_Head4_C, 0x0078);
		}

		// class UBP_FurColor7_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor7__BP_FurColor7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor7_C, 0x0078);
		}

		// class UBP_FurColor2_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor2__BP_FurColor2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor2_C, 0x0078);
		}

		// class UBP_ShrugWhatever_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_ShrugWhatever__BP_ShrugWhatever_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShrugWhatever_C, 0x0130);
		}

		// class UBP_Flourish_TwoHanded_Short_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Flourish_TwoHanded_Short__BP_Flourish_TwoHanded_Short_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Flourish_TwoHanded_Short_C, 0x0130);
		}

		// class UBP_Flourish_TwoHanded_Large_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Flourish_TwoHanded_Large__BP_Flourish_TwoHanded_Large_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Flourish_TwoHanded_Large_C, 0x0130);
		}

		// class UBP_DisarmedMotion_C : public UDisarmedMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_DisarmedMotion__BP_DisarmedMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DisarmedMotion_C, 0x00A8);
		}

		// class UBP_QuitMenu_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_QuitMenu__BP_QuitMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_QuitMenu_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_QuitMenu_C, DesktopButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_QuitMenu_C, Image_9, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_QuitMenu_C, MainMenuButton, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_QuitMenu_C, 0x0258);
		}

		// class UBP_ProfileSelectButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ProfileSelectButton__BP_ProfileSelectButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelectButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelectButton_C, HoverAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelectButton_C, Button_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelectButton_C, TextBlock_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelectButton_C, ProfileName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelectButton_C, OnProfileButtonClicked, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelectButton_C, ProfileId, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ProfileSelectButton_C, 0x027C);
		}

		// class UBP_ProfileSelectedButton_C : public UBP_ProfileSelectButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ProfileSelectedButton__BP_ProfileSelectedButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelectedButton_C, UnknownData_2DIN, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelectedButton_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelectedButton_C, Button_Selected, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileSelectedButton_C, TextBlock_Selected, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ProfileSelectedButton_C, 0x0298);
		}

		// class UBP_Longsword_StyrianHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Longsword_StyrianHandle__BP_Longsword_StyrianHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Longsword_StyrianHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Longsword_StyrianHandle_C, 0x0080);
		}

		// class UBP_Longsword_TwineGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Longsword_TwineGuard__BP_Longsword_TwineGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Longsword_TwineGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Longsword_TwineGuard_C, 0x0080);
		}

		// class UBP_SplintedArms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SplintedArms__BP_SplintedArms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SplintedArms_C, 0x01B8);
		}

		// class UBP_Gothic_ChestLow_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Gothic_ChestLow__BP_Gothic_ChestLow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Gothic_ChestLow_C, 0x01A0);
		}

		// class UBP_SegmentedGauntletsFluted_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SegmentedGauntletsFluted__BP_SegmentedGauntletsFluted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SegmentedGauntletsFluted_C, 0x01A0);
		}

		// class ABP_EnvironmentMovableLight_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EnvironmentMovableLight__BP_EnvironmentMovableLight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, SpotLight, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, SwayHolder, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Pitch_Frequency, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Pitch_Magnitude, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Jaw_Frequency, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Jaw_Magnitude, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Roll_Frequency, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Roll_Magnitude, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Pitch_Speed, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Jaw_Speed, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Roll_Speed, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, UnknownData_THYM, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Transform, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Transform_Frequency, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, UnknownData_BNO3, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EnvironmentMovableLight_C, Original_Transform, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EnvironmentMovableLight_C, 0x02E0);
		}

		// class UBP_ReinforcedGreathelmWinged_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ReinforcedGreathelmWinged__BP_ReinforcedGreathelmWinged_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ReinforcedGreathelmWinged_C, 0x01C8);
		}

		// class UBP_ChaperoneHat_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChaperoneHat__BP_ChaperoneHat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChaperoneHat_C, 0x01C8);
		}

		// class UBP_SalletOpen_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SalletOpen__BP_SalletOpen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SalletOpen_C, 0x01C8);
		}

		// class UBP_falchion_BoardingBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_falchion_BoardingBlade__BP_falchion_BoardingBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_falchion_BoardingBlade_C, 0x0078);
		}

		// class UBP_falchion_ConventionalGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_falchion_ConventionalGuard__BP_falchion_ConventionalGuard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_falchion_ConventionalGuard_C, 0x0078);
		}

		// class UBP_falchion_SimpleHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_falchion_SimpleHandle__BP_falchion_SimpleHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_falchion_SimpleHandle_C, 0x0078);
		}

		// class UBP_Falchion_Sullen_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Falchion_Sullen__BP_Falchion_Sullen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Falchion_Sullen_C, 0x0078);
		}

		// class UBP_KastenBurst_Skirt_01_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KastenBurst_Skirt_01__BP_KastenBurst_Skirt_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KastenBurst_Skirt_01_C, 0x01A0);
		}

		// class ABP_Longbow_C : public ABP_Bow_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Longbow__BP_Longbow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Longbow_C, 0x0D59);
		}

		// class UBP_cleaver_BaronsCutter_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_cleaver_BaronsCutter__BP_cleaver_BaronsCutter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_cleaver_BaronsCutter_C, 0x0078);
		}

		// class UBP_HealthWidget_C : public UMordhauUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_HealthWidget__BP_HealthWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HealthWidget_C, Image_1, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HealthWidget_C, 0x0240);
		}

		// class UBP_Buckler_RightStrikeMotion_C : public UBP_Shield_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Buckler_RightStrikeMotion__BP_Buckler_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Buckler_RightStrikeMotion_C, 0x1160);
		}

		// class UBP_Buckler_LeftStabMotion_C : public UBP_Shield_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Buckler_LeftStabMotion__BP_Buckler_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Buckler_LeftStabMotion_C, 0x1108);
		}

		// class UBP_Emblem_Skull_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Skull__BP_Emblem_Skull_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Skull_C, 0x0060);
		}

		// class UBP_MetalDetailColor5_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor5__BP_MetalDetailColor5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor5_C, 0x0078);
		}

		// class UBP_MetalDetailColor3_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor3__BP_MetalDetailColor3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor3_C, 0x0078);
		}

		// class UBP_MetalDetailColor27_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor27__BP_MetalDetailColor27_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor27_C, 0x0078);
		}

		// class UBP_MetalDetailColor1_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor1__BP_MetalDetailColor1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor1_C, 0x0078);
		}

		// class UBP_LeatherColor8_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor8__BP_LeatherColor8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor8_C, 0x0078);
		}

		// class UBP_HairColor4_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_HairColor4__BP_HairColor4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HairColor4_C, 0x0078);
		}

		// class ABP_DeployableBallistaProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DeployableBallistaProjectile__BP_DeployableBallistaProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallistaProjectile_C, UnknownData_298S, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DeployableBallistaProjectile_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DeployableBallistaProjectile_C, 0x07D0);
		}

		// class UBP_Italian_pauldrons2x2_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Italian_pauldrons2x2__BP_Italian_pauldrons2x2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Italian_pauldrons2x2_C, 0x01A0);
		}

		// class UBP_HussarShouldersLeopardSnowPauldronsTrim_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HussarShouldersLeopardSnowPauldronsTrim__BP_HussarShouldersLeopardSnowPauldronsTrim_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HussarShouldersLeopardSnowPauldronsTrim_C, 0x01A0);
		}

		// class UBP_BaseMainMenu_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BaseMainMenu__BP_BaseMainMenu_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BaseMainMenu_C, 0x0230);
		}

		// class UBP_BlackSalletPaintedVisorUp_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BlackSalletPaintedVisorUp__BP_BlackSalletPaintedVisorUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlackSalletPaintedVisorUp_C, 0x01C8);
		}

		// class UBP_Quarterstaff_Poorman_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Quarterstaff_Poorman__BP_Quarterstaff_Poorman_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Quarterstaff_Poorman_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Quarterstaff_Poorman_C, 0x0080);
		}

		// class ABP_Shortsword_C : public ABP_OneHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shortsword__BP_Shortsword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Shortsword_C, 0x1C28);
		}

		// class UBP_ShortSword_DecoratedSeax_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortSword_DecoratedSeax__BP_ShortSword_DecoratedSeax_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortSword_DecoratedSeax_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortSword_DecoratedSeax_C, 0x0080);
		}

		// class UBP_ShortSword_Seax_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortSword_Seax__BP_ShortSword_Seax_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortSword_Seax_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortSword_Seax_C, 0x0080);
		}

		// class UBP_MordhauWearable_C : public UMordhauWearable
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauWearable__BP_MordhauWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MordhauWearable_C, 0x01A0);
		}

		// class UBP_Tier2HeadWearable_C : public UBP_HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier2HeadWearable__BP_Tier2HeadWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier2HeadWearable_C, 0x01C8);
		}

		// class UBP_Estoc_NeedleBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Estoc_NeedleBlade__BP_Estoc_NeedleBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Estoc_NeedleBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Estoc_NeedleBlade_C, 0x0080);
		}

		// class UBP_WorkersHoodLowered_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WorkersHoodLowered__BP_WorkersHoodLowered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WorkersHoodLowered_C, 0x01A0);
		}

		// class UBP_HoodUnderHelmet_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HoodUnderHelmet__BP_HoodUnderHelmet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HoodUnderHelmet_C, 0x01A0);
		}

		// class UBP_Perk_C : public UPerk
		TEST_METHOD(BlueprintGeneratedClass__BP_Perk__BP_Perk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Perk_C, 0x0068);
		}

		// class ABP_SlaveProgressDriver_C : public ABP_MordhauActor_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SlaveProgressDriver__BP_SlaveProgressDriver_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, Box, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, SkeletalMesh, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, SmoothedValue, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, UnknownData_D1OP, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, AnimatedMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, RaiseSpeed, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, LowerSpeed, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, CurrentMovementSound, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, MasterCrank, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, Curve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, AnimatedMaterialIndex, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SlaveProgressDriver_C, SmoothedValuePostCurve, 0x03CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SlaveProgressDriver_C, 0x03D0);
		}

		// class UBP_FallenLongsword_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FallenLongsword__BP_FallenLongsword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FallenLongsword_C, 0x0078);
		}

		// class UBP_GermanSalletPlumeRaised_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletPlumeRaised__BP_GermanSalletPlumeRaised_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletPlumeRaised_C, 0x01C8);
		}

		// class UBP_GermanSalletRaised_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletRaised__BP_GermanSalletRaised_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletRaised_C, 0x01C8);
		}

		// class ABP_MordhauMainMenuGameMode_C : public AMordhauGameMode
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauMainMenuGameMode__BP_MordhauMainMenuGameMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauMainMenuGameMode_C, DefaultSceneRoot, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauMainMenuGameMode_C, 0x05A8);
		}

		// class UBP_GreathelmBand_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GreathelmBand__BP_GreathelmBand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GreathelmBand_C, 0x01C8);
		}

		// class UBP_messer_CatlegGrip_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_CatlegGrip__BP_messer_CatlegGrip_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_CatlegGrip_C, 0x0078);
		}

		// class UBP_messer_ClamShellGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_ClamShellGuard__BP_messer_ClamShellGuard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_ClamShellGuard_C, 0x0078);
		}

		// class UBP_messer_HouseholderGrip_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_HouseholderGrip__BP_messer_HouseholderGrip_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_HouseholderGrip_C, 0x0078);
		}

		// class UBP_messer_SharkfinBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_SharkfinBlade__BP_messer_SharkfinBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_SharkfinBlade_C, 0x0078);
		}

		// class UBP_messer_SwissSaber_guard1_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_SwissSaber_guard1__BP_messer_SwissSaber_guard1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_SwissSaber_guard1_C, 0x0078);
		}

		// class UBP_messer_SwissSaber_guard3_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_SwissSaber_guard3__BP_messer_SwissSaber_guard3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_SwissSaber_guard3_C, 0x0078);
		}

		// class UBP_2hmace_Goedendag_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2hmace_Goedendag__BP_2hmace_Goedendag_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2hmace_Goedendag_C, 0x0078);
		}

		// class UBP_Hauberk_C : public UBP_Tier2UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Hauberk__BP_Hauberk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Hauberk_C, 0x01E8);
		}

		// class UBP_BasicShouldersSquare_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BasicShouldersSquare__BP_BasicShouldersSquare_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BasicShouldersSquare_C, 0x01A0);
		}

		// class UBP_HUDWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_HUDWidget__BP_HUDWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, AnnouncementContainer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, ButtonPromptsContainer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, ChatBoxContainer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, CrosshairContainer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, EquipmentContainer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, EquipmentInfoContainer, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, KilledByPanelContainer, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, KillFeedContainer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, MOTDContainer, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, NetIndicatorContainer, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, ObjectivesContainer, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, PostMatchScreenContainer, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, ScoreboardContainer, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, ScoreFeedContainer, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, SkillTreeContainer, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, StatusBarContainer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, TargetInfoContainer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, TipsContainer, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HUDWidget_C, TargetDistance, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HUDWidget_C, 0x02C4);
		}

		// class UBP_MailSleeveOverCloth_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MailSleeveOverCloth__BP_MailSleeveOverCloth_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MailSleeveOverCloth_C, 0x01B8);
		}

		// class UBP_LongSkirt_CoverBack_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LongSkirt_CoverBack__BP_LongSkirt_CoverBack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LongSkirt_CoverBack_C, 0x01A0);
		}

		// class UBP_LeatherLamellarSkirt_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherLamellarSkirt__BP_LeatherLamellarSkirt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherLamellarSkirt_C, 0x01A0);
		}

		// class UBP_ExecutionerHood_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ExecutionerHood__BP_ExecutionerHood_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ExecutionerHood_C, 0x01C8);
		}

		// class UBP_Longsword_ScoundrelBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Longsword_ScoundrelBlade__BP_Longsword_ScoundrelBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Longsword_ScoundrelBlade_C, 0x0078);
		}

		// class UBP_Longsword_ShallowGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Longsword_ShallowGuard__BP_Longsword_ShallowGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Longsword_ShallowGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Longsword_ShallowGuard_C, 0x0080);
		}

		// class UBP_TaigaMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_TaigaMapMetadata__BP_TaigaMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TaigaMapMetadata_C, 0x00A8);
		}

		// class UBP_ThePitMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_ThePitMapMetadata__BP_ThePitMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ThePitMapMetadata_C, 0x00A8);
		}

		// class UBP_ContrabandMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_ContrabandMapMetadata__BP_ContrabandMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ContrabandMapMetadata_C, 0x00A8);
		}

		// class UBP_Landsknetcht_Legs_C : public UBP_Tier1LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Landsknetcht_Legs__BP_Landsknetcht_Legs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Landsknetcht_Legs_C, 0x01B8);
		}

		// class UPlayFabAdminAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabAdminAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, UnknownData_D9ZD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, CallAuthenticationContext, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, RequestJsonObj, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, ResponseJsonObj, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, UnknownData_QNG3, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabAdminAPI, 0x0840);
		}

		// class UPlayFabAdminModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabAdminModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabAdminModelDecoder, 0x0028);
		}

		// class UPlayFabAuthenticationAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabAuthenticationAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, UnknownData_EVE9, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, CallAuthenticationContext, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, RequestJsonObj, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, ResponseJsonObj, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, UnknownData_OMOQ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabAuthenticationAPI, 0x0110);
		}

		// class UPlayFabAuthenticationModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabAuthenticationModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabAuthenticationModelDecoder, 0x0028);
		}

		// class UPlayFabClientAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabClientAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, UnknownData_ZVAT, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, CallAuthenticationContext, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, RequestJsonObj, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, ResponseJsonObj, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, UnknownData_OUM9, 0x0AC0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabClientAPI, 0x0B10);
		}

		// class UPlayFabClientModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabClientModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabClientModelDecoder, 0x0028);
		}

		// class UPlayFabCloudScriptAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabCloudScriptAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, UnknownData_I8JW, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, CallAuthenticationContext, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, RequestJsonObj, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, ResponseJsonObj, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, UnknownData_XEG2, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabCloudScriptAPI, 0x01C0);
		}

		// class UPlayFabCloudScriptModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabCloudScriptModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabCloudScriptModelDecoder, 0x0028);
		}

		// class UPlayFabDataAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabDataAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, UnknownData_PK13, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, CallAuthenticationContext, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, RequestJsonObj, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, ResponseJsonObj, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, UnknownData_N8MT, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabDataAPI, 0x0160);
		}

		// class UPlayFabDataModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabDataModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabDataModelDecoder, 0x0028);
		}

		// class UPlayFabEventsAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabEventsAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, UnknownData_G8X0, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, CallAuthenticationContext, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, RequestJsonObj, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, ResponseJsonObj, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, UnknownData_OC6L, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabEventsAPI, 0x0110);
		}

		// class UPlayFabEventsModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabEventsModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabEventsModelDecoder, 0x0028);
		}

		// class UPlayFabExperimentationAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabExperimentationAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, UnknownData_H60Z, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, CallAuthenticationContext, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, RequestJsonObj, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, ResponseJsonObj, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, UnknownData_8M1H, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabExperimentationAPI, 0x01C0);
		}

		// class UPlayFabExperimentationModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabExperimentationModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabExperimentationModelDecoder, 0x0028);
		}

		// class UPlayFabGroupsAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabGroupsAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, UnknownData_E6AT, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, CallAuthenticationContext, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, RequestJsonObj, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, ResponseJsonObj, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, UnknownData_AHXM, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabGroupsAPI, 0x0280);
		}

		// class UPlayFabGroupsModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabGroupsModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabGroupsModelDecoder, 0x0028);
		}

		// class UPlayFabInsightsAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabInsightsAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, UnknownData_VV2Z, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, CallAuthenticationContext, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, RequestJsonObj, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, ResponseJsonObj, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, UnknownData_6AFI, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabInsightsAPI, 0x0150);
		}

		// class UPlayFabInsightsModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabInsightsModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabInsightsModelDecoder, 0x0028);
		}

		// class UPlayFabJsonObject : public UObject
		TEST_METHOD(Class__PlayFab__PlayFabJsonObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabJsonObject, UnknownData_GPCW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabJsonObject, 0x0038);
		}

		// class UPlayFabJsonValue : public UObject
		TEST_METHOD(Class__PlayFab__PlayFabJsonValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabJsonValue, UnknownData_FBSY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabJsonValue, 0x0038);
		}

		// class UPlayFabLocalizationAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabLocalizationAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, UnknownData_35D2, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, CallAuthenticationContext, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, RequestJsonObj, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, ResponseJsonObj, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, UnknownData_PPZ9, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabLocalizationAPI, 0x0100);
		}

		// class UPlayFabLocalizationModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabLocalizationModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabLocalizationModelDecoder, 0x0028);
		}

		// class UPlayFabMatchmakerAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabMatchmakerAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, UnknownData_3STR, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, CallAuthenticationContext, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, RequestJsonObj, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, ResponseJsonObj, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, UnknownData_U680, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabMatchmakerAPI, 0x0140);
		}

		// class UPlayFabMatchmakerModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabMatchmakerModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabMatchmakerModelDecoder, 0x0028);
		}

		// class UPlayFabMultiplayerAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabMultiplayerAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, UnknownData_9YO6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, CallAuthenticationContext, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, RequestJsonObj, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, ResponseJsonObj, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, UnknownData_LJNM, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabMultiplayerAPI, 0x04C0);
		}

		// class UPlayFabMultiplayerModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabMultiplayerModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabMultiplayerModelDecoder, 0x0028);
		}

		// class UPlayFabProfilesAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabProfilesAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, UnknownData_85U8, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, CallAuthenticationContext, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, RequestJsonObj, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, ResponseJsonObj, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, UnknownData_5GR4, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabProfilesAPI, 0x0160);
		}

		// class UPlayFabProfilesModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabProfilesModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabProfilesModelDecoder, 0x0028);
		}

		// class UPlayFabServerAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabServerAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, UnknownData_1A2K, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, CallAuthenticationContext, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, RequestJsonObj, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, ResponseJsonObj, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, UnknownData_4HS6, 0x08F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabServerAPI, 0x0940);
		}

		// class UPlayFabServerModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabServerModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabServerModelDecoder, 0x0028);
		}

		// class UPlayFabUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabUtilities, 0x0028);
		}

		// class UMaterialExpressionSpriteTextureSampler : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Paper2D__MaterialExpressionSpriteTextureSampler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, bSampleAdditionalTextures, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, UnknownData_Z07P, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, AdditionalSlotIndex, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, SlotDisplayName, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpriteTextureSampler, 0x0110);
		}

		// class APaperCharacter : public ACharacter
		TEST_METHOD(Class__Paper2D__PaperCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperCharacter, Sprite, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperCharacter, 0x04C0);
		}

		// class UPaperFlipbook : public UObject
		TEST_METHOD(Class__Paper2D__PaperFlipbook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, FramesPerSecond, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_52XY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, KeyFrames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, DefaultMaterial, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, CollisionSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_KY9L, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbook, 0x0050);
		}

		// class APaperFlipbookActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperFlipbookActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperFlipbookActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperFlipbookActor, 0x0228);
		}

		// class UPaperFlipbookComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperFlipbookComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SourceFlipbook, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, Material, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, PlayRate, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_7IIK, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, AccumulatedTime, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedFrameIndex, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SpriteColor, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedBodySetup, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, OnFinishedPlaying, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbookComponent, 0x0460);
		}

		// class APaperGroupedSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperGroupedSpriteActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperGroupedSpriteActor, 0x0228);
		}

		// class UPaperGroupedSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, InstanceMaterials, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, PerInstanceSpriteData, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, UnknownData_KPF8, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperGroupedSpriteComponent, 0x0450);
		}

		// class UPaperRuntimeSettings : public UObject
		TEST_METHOD(Class__Paper2D__PaperRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableSpriteAtlasGroups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableTerrainSplineEditing, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bResizeSpriteDataToMatchTextures, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, UnknownData_U0NO, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperRuntimeSettings, 0x0030);
		}

		// class UPaperSprite : public UObject
		TEST_METHOD(Class__Paper2D__PaperSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_CF8A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceUV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceDimension, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, DefaultMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, Sockets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SpriteCollisionDomain, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_H67O, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, PixelsPerUnrealUnit, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BodySetup, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterialSplitIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_PAT6, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedRenderData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSprite, 0x00A8);
		}

		// class APaperSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperSpriteActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperSpriteActor, 0x0228);
		}

		// class UPaperSpriteAtlas : public UObject
		TEST_METHOD(Class__Paper2D__PaperSpriteAtlas)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteAtlas, 0x0028);
		}

		// class UPaperSpriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__PaperSpriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteBlueprintLibrary, 0x0028);
		}

		// class UPaperSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SourceSprite, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, MaterialOverride, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SpriteColor, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, UnknownData_J9RP, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteComponent, 0x0440);
		}

		// class APaperTerrainActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTerrainActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, DummyRoot, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, SplineComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, RenderComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTerrainActor, 0x0238);
		}

		// class UPaperTerrainComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bClosedSpline, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bFilledSpline, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_MO6X, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, AssociatedSpline, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, RandomSeed, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SegmentOverlapAmount, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainColor, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, ReparamStepsPerSegment, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SpriteCollisionDomain, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_UHXM, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CollisionThickness, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_SMQ4, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CachedBodySetup, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_VFQN, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainComponent, 0x0450);
		}

		// class UPaperTerrainMaterial : public UDataAsset
		TEST_METHOD(Class__Paper2D__PaperTerrainMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, InteriorFill, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainMaterial, 0x0048);
		}

		// class UPaperTerrainSplineComponent : public USplineComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainSplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainSplineComponent, UnknownData_EJ6Y, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainSplineComponent, 0x04F0);
		}

		// class UPaperTileLayer : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerWidth, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerHeight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_ZIHJ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionThicknessOverride, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionOffsetOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerColor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_0QYI, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedCells, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, TileSet, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedGrid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileLayer, 0x0098);
		}

		// class UPaperTileMap : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapWidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapHeight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileWidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileHeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, PixelsPerUnrealUnit, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerLayer, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SelectedTileSet, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, Material, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, CollisionThickness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SpriteCollisionDomain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, ProjectionMode, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_RU9S, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, HexSideLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_CNLH, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, BodySetup, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, LayerNameIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_RUWH, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMap, 0x00A8);
		}

		// class APaperTileMapActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTileMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTileMapActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTileMapActor, 0x0228);
		}

		// class UPaperTileMapComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperTileMapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_KW78, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapHeight, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileWidth, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileHeight, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, DefaultLayerTileSet, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, Material, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileLayers, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMapColor, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UseSingleLayerIndex, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, bUseSingleLayer, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_54H9, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMap, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_Z1J1, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMapComponent, 0x0470);
		}

		// class UPaperTileSet : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSheet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, BorderMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileSpacing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, DrawingOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, WidthInTiles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, HeightInTiles, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedWidth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedHeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Terrains, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Margin, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Spacing, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileSet, 0x00A8);
		}

		// class UTileMapBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__TileMapBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileMapBlueprintLibrary, 0x0028);
		}

		// class UBP_SplintedLegs_C : public UBP_Tier2LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SplintedLegs__BP_SplintedLegs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SplintedLegs_C, 0x01B8);
		}

		// class UBP_JoinedHosen_Cuisses_C : public UBP_Tier2LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JoinedHosen_Cuisses__BP_JoinedHosen_Cuisses_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JoinedHosen_Cuisses_C, 0x01B8);
		}

		// class UBP_ScoreboardDuelEntry_C : public UBP_ScoreboardEntryParent_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ScoreboardDuelEntry__BP_ScoreboardDuelEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, UnknownData_WOI8, 0x037F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, BP_PlayerWidget, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, Button_1, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, Image_5, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, Image_6, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, Image_9, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, Image_11, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, Image_14, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, Image_50, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, Overlay_10, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, SizeBox_10, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, TextBlock_789, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, TextBlock_790, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, TextBlock_792, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, BackgroundColor, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, HighlightedBackgroundColor, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, DeadNameColor, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, AliveNameColor, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreboardDuelEntry_C, RankInt, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScoreboardDuelEntry_C, 0x0464);
		}

		// class AArchVisCharacter : public ACharacter
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAxisName, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAtRateAxisName, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAxisName, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAtRateAxisName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveForwardAxisName, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveRightAxisName, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Pitch, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Yaw, 0x051C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArchVisCharacter, 0x0520);
		}

		// class UArchVisCharMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalAcceleration, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalDeceleration, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxRotationalVelocity, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MinPitch, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxPitch, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingFriction, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingSpeed, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingAcceleration, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, UnknownData_BMEO, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchVisCharMovementComponent, 0x0660);
		}

		// class UBP_maulBohemian_BruteHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maulBohemian_BruteHead__BP_maulBohemian_BruteHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maulBohemian_BruteHead_C, 0x0078);
		}

		// class UBP_maul_RudeHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maul_RudeHead__BP_maul_RudeHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maul_RudeHead_C, 0x0078);
		}

		// class UBP_Estoc_BentGuard_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Estoc_BentGuard__BP_Estoc_BentGuard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Estoc_BentGuard_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Estoc_BentGuard_C, 0x0080);
		}

		// class UBP_maulBohemian_RebelNail_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_maulBohemian_RebelNail__BP_maulBohemian_RebelNail_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_maulBohemian_RebelNail_C, 0x0078);
		}

		// class UBP_BlacksmithHammerPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BlacksmithHammerPart__BP_BlacksmithHammerPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlacksmithHammerPart_C, 0x0078);
		}

		// class AControlPointMeshActor : public AActor
		TEST_METHOD(Class__Landscape__ControlPointMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPointMeshActor, ControlPointMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlPointMeshActor, 0x0228);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_7YKJ, 0x0484);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x0490);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_N92K, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0ScreenSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_DTMT, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_OUZJ, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_4M3F, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bMeshHoles, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MeshHolesMaxLod, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_DRSU, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, RuntimeVirtualTextures, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureNumLods, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureLodBias, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureRenderPassType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_W77O, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_6VWG, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_JQ6V, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_L32R, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_M5OK, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_8Y4R, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_VV42, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_4SVW, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_ONBP, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_CONS, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x04ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x04EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLayersContent, 0x04EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, WeightmapUsageMap, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0540);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0540);
		}

		// class ALandscapeBlueprintBrushBase : public AActor
		TEST_METHOD(Class__Landscape__LandscapeBlueprintBrushBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeBlueprintBrushBase, 0x0220);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseX, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_VKX7, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_1AHY, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_FH74, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_2PUX, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_VAV5, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x05E0);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0220);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_O2TB, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0270);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x03F0);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_NJNB, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_DK21, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_SQXO, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_B6GR, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_W6SQ, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x04D0);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_4KAQ, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_81TX, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0210);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_XNZ4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_GZRR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, TextureStreamingInfo, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_6BR0, 0x0421);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x0428);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_GDHE, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x04F0);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0228);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_EBJG, 0x04A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x04B0);
		}

		// class ULandscapeSettings : public UDeveloperSettings
		TEST_METHOD(Class__Landscape__LandscapeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, MaxNumberOfLayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, UnknownData_HH8V, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSettings, 0x0040);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0420);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LayerWidthRatio, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideFalloffFactor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideFalloffFactor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideLayerFalloffFactor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideLayerFalloffFactor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_GR7C, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x00A8);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_PY82, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_VRF6, 0x055C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x0560);
		}

		// class ULandscapeSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Landscape__LandscapeSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSubsystem, UnknownData_27CF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSubsystem, 0x0098);
		}

		// class ULandscapeWeightmapUsage : public UObject
		TEST_METHOD(Class__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, ChannelUsage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, LayerGuid, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeWeightmapUsage, 0x0058);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_JTDY, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_NOKT, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_HHM2, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_304W, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0090);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_706S, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_412H, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_72OK, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_BSZW, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_QV2W, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0088);
		}

		// class ABP_RockBag_C : public ABP_ThrowableEquipment_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RockBag__BP_RockBag_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RockBag_C, 0x0CD8);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_NZS9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_H4WR, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_1BID, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_HW70, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_HZWN, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_VN83, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_BWL2, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_OSV4, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_2NV8, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_NLVF, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_6YHO, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_ERR6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_J2W7, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_5356, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0220);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_M4ZW, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_RV4E, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0240);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_VG34, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00D8);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_DZOT, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E0);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_I0UB, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_ABGH, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0080);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_CEVY, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// class ABP_Scythe_C : public ABP_Halberd_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Scythe__BP_Scythe_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Scythe_C, 0x1C28);
		}

		// class UBP_BoltQuiver_C : public UQuiver
		TEST_METHOD(BlueprintGeneratedClass__BP_BoltQuiver__BP_BoltQuiver_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BoltQuiver_C, 0x0070);
		}

		// class UCrossbow_AB_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Crossbow_AB__Crossbow_AB_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossbow_AB_C, UnknownData_42V8, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossbow_AB_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossbow_AB_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossbow_AB_C, AnimGraphNode_Slot, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossbow_AB_C, AnimGraphNode_TwoWayBlend, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossbow_AB_C, AnimGraphNode_SequenceEvaluator_2, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossbow_AB_C, AnimGraphNode_SequenceEvaluator, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossbow_AB_C, Loaded, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrossbow_AB_C, 0x044C);
		}

		// class ABP_BoltProjectile_C : public ABP_MissileProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BoltProjectile__BP_BoltProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BoltProjectile_C, 0x07C4);
		}

		// class ABP_RecurveBowArrowFire_C : public ABP_RecurveBowArrow_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RecurveBowArrowFire__BP_RecurveBowArrowFire_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RecurveBowArrowFire_C, 0x07C4);
		}

		// class UBP_Falx_RingedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Falx_RingedHandle__BP_Falx_RingedHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Falx_RingedHandle_C, 0x0078);
		}

		// class UBP_Falx_ReaperBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Falx_ReaperBlade__BP_Falx_ReaperBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Falx_ReaperBlade_C, 0x0078);
		}

		// class UBP_GambesonCollarLow_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GambesonCollarLow__BP_GambesonCollarLow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GambesonCollarLow_C, 0x01A0);
		}

		// class ABP_Falx_C : public ABP_TwoHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Falx__BP_Falx_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Falx_C, 0x1C28);
		}

		// class UBP_HelmetStrap_Open_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HelmetStrap_Open__BP_HelmetStrap_Open_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HelmetStrap_Open_C, 0x01A0);
		}

		// class UBP_ChainCoif_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainCoif__BP_ChainCoif_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainCoif_C, 0x01A0);
		}

		// class UBP_HelmetStrap_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HelmetStrap__BP_HelmetStrap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HelmetStrap_C, 0x01A0);
		}

		// class UBP_KillFeed_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_KillFeed__BP_KillFeed_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeed_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeed_C, Entries, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeed_C, EntriesArray, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeed_C, TimeForKillFeedToDisappear, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeed_C, MaxEntries, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_KillFeed_C, LoopingIndex, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KillFeed_C, 0x025C);
		}

		// class UImpactShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__ImpactShake__ImpactShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImpactShake_C, 0x0160);
		}

		// class UBP_ScoreEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ScoreEntry__BP_ScoreEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, FadeOut, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, FadeIn, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, Name, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, Pointblock, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, TextBlock_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, Label, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, Points, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, UnknownData_1NM3, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, PlayerName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, PointsText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScoreEntry_C, ScoreFeed, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScoreEntry_C, 0x02B0);
		}

		// class UBP_BannerSelection_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BannerSelection__BP_BannerSelection_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerSelection_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerSelection_C, BannerSelection, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerSelection_C, BP_PlayerWidget, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerSelection_C, CancelButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerSelection_C, Grid, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerSelection_C, Image_10, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerSelection_C, Image_35, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerSelection_C, SizeBox_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BannerSelection_C, PlayerMenu, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BannerSelection_C, 0x0278);
		}

		// class UBP_ServerBrowser_C : public UBP_MenuContentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ServerBrowser__BP_ServerBrowser_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, AllButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_5, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_6, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_7, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_8, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_9, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_10, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_11, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_12, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_13, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_14, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_15, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_16, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_17, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_18, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_19, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_20, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_21, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_22, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_46, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_47, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_48, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_49, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_50, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_51, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_52, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_53, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BP_MordhauServerBrowserEntry_C_54, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, DownArrow, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, Entries, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, FavoritesButton, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, FriendsButton, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, GameModeComboBox, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, HasPlayersCheckbox, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, Image_1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, Image_2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, Image_3, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, Image_4, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, Image_6, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, Image_53, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, Image_54, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, IsModdedCheckbox, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, JoinButton, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, LanButton, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, MapNameAscendSort, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, MapNameButton, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, MapNameDescendSort, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, MaxPingEntry, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, NoPasswordCheckbox, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, NotFullCheckbox, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, PingAscendSort, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, PingButton, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, PingDescendSort, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, PlayerCountAscendSort, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, PlayerCountDescendSort, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, PlayersButton, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, RecentButton, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, RefreshButton, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, Refreshing, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, RentServerButton, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, ServerNameAscendSort, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, ServerNameButton, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, ServerNameDescendSort, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, ServerNameFilter, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, TextBlock, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, SelectedEntry, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, AntiCheat, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, ServerList, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, bNotFull, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, bHasPlayers, 0x047B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, bNoPassword, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, bIsModded, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, UnknownData_9AFR, 0x047E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, MismatchDialog, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, GameInstance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, bCanJoin, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, UnknownData_H8HE, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, ProfaneWords, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, bIsNaughtyServer, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, UnknownData_8U1R, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, BlacklistedServers, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, SessionToJoin, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, ServerSort, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, UnknownData_37BU, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ServerBrowser_C, Sessions, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ServerBrowser_C, 0x05E8);
		}

		// class UBP_GothicChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GothicChest__BP_GothicChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GothicChest_C, 0x01E8);
		}

		// class UAB_Chest_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Chest__AB_Chest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Chest_C, UnknownData_AD4L, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Chest_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Chest_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Chest_C, AnimGraphNode_MeshRefPose, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Chest_C, AnimGraphNode_ModifyBone_3, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Chest_C, AnimGraphNode_ModifyBone_2, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Chest_C, AnimGraphNode_ModifyBone, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Chest_C, AnimGraphNode_BlendListByBool, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Chest_C, AnimGraphNode_ComponentToLocalSpace, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Chest_C, AnimGraphNode_LocalRefPose, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Chest_C, Opened, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Chest_C, 0x06A9);
		}

		// class ABP_TurdProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TurdProjectile__BP_TurdProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TurdProjectile_C, 0x07C4);
		}

		// class UBP_Fists_LeftStrikeMotion_C : public UBP_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Fists_LeftStrikeMotion__BP_Fists_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Fists_LeftStrikeMotion_C, 0x1160);
		}

		// class UBP_LadderFists_LeftStrikeMotion_C : public UBP_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LadderFists_LeftStrikeMotion__BP_LadderFists_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LadderFists_LeftStrikeMotion_C, 0x1160);
		}

		// class UBP_LadderFists_LeftStabMotion_C : public UBP_LeftStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LadderFists_LeftStabMotion__BP_LadderFists_LeftStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LadderFists_LeftStabMotion_C, 0x1108);
		}

		// class UBP_Emblem_CrippleKing_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_CrippleKing__BP_Emblem_CrippleKing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_CrippleKing_C, 0x0060);
		}

		// class UBP_Emblem_Valhallebarde_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Valhallebarde__BP_Emblem_Valhallebarde_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Valhallebarde_C, 0x0060);
		}

		// class UBP_Emblem_MetaMan_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_MetaMan__BP_Emblem_MetaMan_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_MetaMan_C, 0x0060);
		}

		// class UBP_Emblem_MeleeSlasher_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_MeleeSlasher__BP_Emblem_MeleeSlasher_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_MeleeSlasher_C, 0x0060);
		}

		// class UAB_DeployableBallista_C : public UAdvancedCharacterAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_DeployableBallista__AB_DeployableBallista_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_Root, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_7, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_6, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_5, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_4, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_3, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_2, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_TransitionResult, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_SequencePlayer_3, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_StateResult_4, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_SequencePlayer_2, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_StateResult_3, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_SequencePlayer, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_StateResult_2, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_SequenceEvaluator, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_StateResult, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_StateMachine, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_LocalToComponentSpace, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_ModifyBone_3, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_ComponentToLocalSpace, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_ModifyBone_2, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, AnimGraphNode_ModifyBone, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, ReloadTime, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, HasDriverFloat, 0x0AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, LookUp, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, State, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, SpawnTurnValue, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, Turn, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, Roll, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DeployableBallista_C, Pitch, 0x0B14);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_DeployableBallista_C, 0x0B18);
		}

		// class UBP_OneTeamSelect_C : public UBP_TeamSelect_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_OneTeamSelect__BP_OneTeamSelect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, AutoAssignButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, BP_OneTeamSelectEntry, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, Button_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, CloseButton, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, Image_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, Image_9, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, Image_195, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, Image_196, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, Image_197, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, spectateIcon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, SpectatorButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, TextBlock_30, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OneTeamSelect_C, TextBlock_34, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_OneTeamSelect_C, 0x02A0);
		}

		// class UBP_ChainmailArms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainmailArms__BP_ChainmailArms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainmailArms_C, 0x01B8);
		}

		// class UBP_VeteranBasicCuffs_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteranBasicCuffs__BP_VeteranBasicCuffs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteranBasicCuffs_C, 0x01B8);
		}

		// class UBP_Chain_ChestLow_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Chain_ChestLow__BP_Chain_ChestLow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Chain_ChestLow_C, 0x01A0);
		}

		// class UBP_ShortMantle_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortMantle__BP_ShortMantle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortMantle_C, UberGraphFrame, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortMantle_C, 0x01A8);
		}

		// class UBP_ChainmailShirt_C : public UBP_Tier2UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainmailShirt__BP_ChainmailShirt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainmailShirt_C, 0x01E8);
		}

		// class ABP_MainMenuTrackingTarget_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_MainMenuTrackingTarget__BP_MainMenuTrackingTarget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuTrackingTarget_C, DefaultSceneRoot, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MainMenuTrackingTarget_C, 0x0228);
		}

		// class UBP_Vaalsgarde_Basic_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Vaalsgarde_Basic__BP_Vaalsgarde_Basic_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Vaalsgarde_Basic_C, 0x01C8);
		}

		// class UBP_FlatTemplar_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlatTemplar__BP_FlatTemplar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlatTemplar_C, 0x01C8);
		}

		// class UBP_RaisedBascinet_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RaisedBascinet__BP_RaisedBascinet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RaisedBascinet_C, 0x01C8);
		}

		// class UBP_falchion_SpikedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_falchion_SpikedHandle__BP_falchion_SpikedHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_falchion_SpikedHandle_C, 0x0078);
		}

		// class UBP_2hmace_FlangedHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2hmace_FlangedHead__BP_2hmace_FlangedHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2hmace_FlangedHead_C, 0x0078);
		}

		// class UBP_FirePotPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FirePotPart__BP_FirePotPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FirePotPart_C, 0x0078);
		}

		// class ABP_Bullet1411_C : public ABP_ArrowProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bullet1411__BP_Bullet1411_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bullet1411_C, 0x07C4);
		}

		// class ABP_ProgressDriver_C : public ABP_SwitchInteractable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ProgressDriver__BP_ProgressDriver_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, UnknownData_BP6L, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, Box, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, SkeletalMesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, SmoothedValue, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, UnknownData_DH91, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, AnimatedMaterial, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, RaiseSpeed, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, LowerSpeed, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, CurrentMovementSound, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, TargetProgressActors, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, CanInterruptRaising, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, CanInterruptLowering, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, UnknownData_IVPT, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, SlaveCranks, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, AnimatedMaterialIndex, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, PostCurveSmoothedValue, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, Curve, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, PreventInteractRaised, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, PreventInteractLowered, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, AutoInteractRaised, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProgressDriver_C, AutoInteractLowered, 0x040B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ProgressDriver_C, 0x040C);
		}

		// class UBP_Spear_FreeShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Spear_FreeShaft__BP_Spear_FreeShaft_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spear_FreeShaft_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Spear_FreeShaft_C, 0x0080);
		}

		// class UBP_SpearSkin_ChampionsSpear_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SpearSkin_ChampionsSpear__BP_SpearSkin_ChampionsSpear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SpearSkin_ChampionsSpear_C, 0x0078);
		}

		// class ABP_Spear_C : public ABP_Polearm_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Spear__BP_Spear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Spear_C, 0x1C28);
		}

		// class UBP_claymore_WanderersBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_claymore_WanderersBlade__BP_claymore_WanderersBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_claymore_WanderersBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_claymore_WanderersBlade_C, 0x0080);
		}

		// class UBP_Greatsword_Danesword_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Greatsword_Danesword__BP_Greatsword_Danesword_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Greatsword_Danesword_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Greatsword_Danesword_C, 0x0080);
		}

		// class UBP_ShieldParryMotion_C : public UBP_ParryMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShieldParryMotion__BP_ShieldParryMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShieldParryMotion_C, 0x0570);
		}

		// class UBP_KiteShieldPart_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KiteShieldPart__BP_KiteShieldPart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KiteShieldPart_C, 0x0078);
		}

		// class UBP_KiteShieldPartCrusader_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KiteShieldPartCrusader__BP_KiteShieldPartCrusader_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KiteShieldPartCrusader_C, 0x0078);
		}

		// class ABP_KiteShield_C : public ABP_MordhauShield_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KiteShield__BP_KiteShield_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_KiteShield_C, 0x1C48);
		}

		// class UBP_FriendlyWidget_C : public UMordhauUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_FriendlyWidget__BP_FriendlyWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendlyWidget_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendlyWidget_C, TextBlock_1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FriendlyWidget_C, 0x0248);
		}

		// class UBP_Yield1_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Yield1__BP_Yield1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Yield1_C, 0x0130);
		}

		// class UBP_Wave_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Wave__BP_Wave_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Wave_C, 0x0130);
		}

		// class UBP_1H_LeftStrikeMotion_C : public UBP_LeftStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_1H_LeftStrikeMotion__BP_1H_LeftStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_1H_LeftStrikeMotion_C, 0x1160);
		}

		// class UBP_1H_RightStrikeMotion_C : public UBP_RightStrikeMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_1H_RightStrikeMotion__BP_1H_RightStrikeMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_1H_RightStrikeMotion_C, 0x1160);
		}

		// class UBP_Tier1LegsWearable_C : public UBP_LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tier1LegsWearable__BP_Tier1LegsWearable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tier1LegsWearable_C, 0x01B8);
		}

		// class UBP_ScaleSabaton_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ScaleSabaton__BP_ScaleSabaton_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScaleSabaton_C, 0x01A0);
		}

		// class UBP_VeteransSabatonsSpur_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransSabatonsSpur__BP_VeteransSabatonsSpur_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransSabatonsSpur_C, 0x01A0);
		}

		// class ULightPropagationVolumeBlendable : public UObject
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_1TI0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_PNBZ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0078);
		}

		// class UMagicLeapHandMeshingComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingComponent, 0x00B0);
		}

		// class UMagicLeapHandMeshingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingFunctionLibrary, 0x0028);
		}

		// class UBP_JoinedHosen_C : public UBP_Tier1LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JoinedHosen__BP_JoinedHosen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JoinedHosen_C, 0x01B8);
		}

		// class UBP_Estoc_SlimHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Estoc_SlimHandle__BP_Estoc_SlimHandle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Estoc_SlimHandle_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Estoc_SlimHandle_C, 0x0080);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_349H, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0058);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_H7LO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bDisplayHelpInAutoComplete, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_6UTP, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_48KD, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_WLNX, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x00F0);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_1TKN, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_AFB1, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_BXQQ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInAR, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bSupportAR, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_5C0F, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0118);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_N3PX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// class ABP_ExecutionerSword_C : public ABP_TwoHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ExecutionerSword__BP_ExecutionerSword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ExecutionerSword_C, 0x1C28);
		}

		// class ABP_Javelin_C : public ABP_ThrowableEquipment_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Javelin__BP_Javelin_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Javelin_C, 0x0CD8);
		}

		// class UBP_FDL02_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_FDL02__BP_FDL02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FDL02_C, 0x0060);
		}

		// class UBP_WoodColor16_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor16__BP_WoodColor16_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor16_C, 0x0078);
		}

		// class UBP_WoodColor11_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_WoodColor11__BP_WoodColor11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WoodColor11_C, 0x0078);
		}

		// class UBP_PlateColor23_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor23__BP_PlateColor23_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor23_C, 0x0078);
		}

		// class UBP_PlateColor10_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlateColor10__BP_PlateColor10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlateColor10_C, 0x0078);
		}

		// class UBOT_EasternVarangian_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_EasternVarangian__BOT_EasternVarangian_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_EasternVarangian_C, 0x0108);
		}

		// class UBOT_Pikeman2_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Pikeman2__BOT_Pikeman2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Pikeman2_C, 0x0108);
		}

		// class UBOT_Knight_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Knight__BOT_Knight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Knight_C, 0x0108);
		}

		// class UBP_Recruit_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Recruit__BP_Recruit_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Recruit_C, 0x0060);
		}

		// class UBP_Moderator_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Moderator__BP_Moderator_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Moderator_C, 0x0060);
		}

		// class UBP_Developer_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Developer__BP_Developer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Developer_C, 0x0060);
		}

		// class UBP_Mordhau1_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Mordhau1__BP_Mordhau1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Mordhau1_C, 0x0060);
		}

		// class UBP_HolyHammer_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_HolyHammer_Banner__BP_HolyHammer_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HolyHammer_Banner_C, 0x0060);
		}

		// class UBP_HeadingOff_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_HeadingOff_Banner__BP_HeadingOff_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeadingOff_Banner_C, 0x0060);
		}

		// class UBP_Chain3_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Chain3__BP_Chain3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Chain3_C, 0x0060);
		}

		// class UBP_MessySideSwoopMale02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_MessySideSwoopMale02__BP_MessySideSwoopMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MessySideSwoopMale02_C, 0x0078);
		}

		// class UBP_Stubble1Male02_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Stubble1Male02__BP_Stubble1Male02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Stubble1Male02_C, 0x0078);
		}

		// class UBP_SoulPatch2_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_SoulPatch2__BP_SoulPatch2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SoulPatch2_C, 0x0078);
		}

		// class ABP_BallistaProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BallistaProjectile__BP_BallistaProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BallistaProjectile_C, UnknownData_G498, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BallistaProjectile_C, UberGraphFrame, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BallistaProjectile_C, PhysicsHandle, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BallistaProjectile_C, DoNotAttachToPawns, 0x07D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BallistaProjectile_C, 0x07D9);
		}

		// class UBP_FaceCustomization_C : public UBP_CustomizationTab_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_FaceCustomization__BP_FaceCustomization_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, UnknownData_082W, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, AgeSlider, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, BackButton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Button_1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Button_2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Button_3, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Button_4, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Button_5, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Button_6, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Button_7, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Button_8, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Button_9, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, EntriesTitle, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, EyebrowsButton, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, EyebrowsText, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, EyeColorPicker, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, FaceButton, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, FaceText, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, FacialHairButton, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, FacialHairText, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, HairButton, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, HairColorPicker, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, HairText, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Image_2, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Image_3, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, ItemEntriesBox, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, RandomizeFaceButton, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, ResetFaceButton, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, VoiceButton, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, VoiceName, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, VoicePitchSlider, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, WidgetSwitcher_1, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, WheelCooldown, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, HoldingLMB, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, HoldingRMB, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, HoldingMMB, 0x0436);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, UnknownData_J9LJ, 0x0437);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, LastSelectedSymmetryBoneName, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, LastSelectedBoneName, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, LastSelectedDoll, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, CurrentLevel, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Symmetry, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, UnknownData_JHH9, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, LastSelectedBoneFaceIdx, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, HasChangedAnything, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, UnknownData_GZ4H, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, SavedMousePos, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, AccumulatedMouseX, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, AccumulatedMouseY, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, History, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, Mode, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, ChangeVector, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, PreviousDecals, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, ChangeVectorLeftover, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, UnknownData_BIF0, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, RandomVoiceCommands, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FaceCustomization_C, RandomExp, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FaceCustomization_C, 0x04C4);
		}

		// class UBP_MenuButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MenuButton__BP_MenuButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, Button, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, Image_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, TextBlock_16, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, ButtonText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, DeselectedStyle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, SelectedStyle, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, bIsSelected, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, UnknownData_67VQ, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, Style, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, OnSelected, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, Index, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, UnknownData_WI7X, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MenuButton_C, OtherButtons, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MenuButton_C, 0x0430);
		}

		// class UBP_MatchmakingSearchWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MatchmakingSearchWidget__BP_MatchmakingSearchWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingSearchWidget_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingSearchWidget_C, EntryAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingSearchWidget_C, SpinnerAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingSearchWidget_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingSearchWidget_C, Image_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingSearchWidget_C, Image_5, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingSearchWidget_C, TextBlock, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MatchmakingSearchWidget_C, Text, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MatchmakingSearchWidget_C, 0x0280);
		}

		// class UBP_GameModeCategory_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GameModeCategory__BP_GameModeCategory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, HoverAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, BP_RadialGradient, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, EntryButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, Image_4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, Image_5, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, Image_6, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, Image_7, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, ModeName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, Overlay_6, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, TextBlock_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, TextBlock_2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, Thumbnail, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, SelectedStyle, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, DeselectedStyle, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, Clicked, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, ThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, ThumbnailOffset, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, ThumbnailScale, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, RibbonText, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, Info_Text, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameModeCategory_C, Category_Label, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GameModeCategory_C, 0x0420);
		}

		// class UBP_CustomizationItemEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CustomizationItemEntry__BP_CustomizationItemEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationItemEntry_C, Name, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationItemEntry_C, ID, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationItemEntry_C, UnknownData_4XX2, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationItemEntry_C, OnHover, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationItemEntry_C, OnClick, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationItemEntry_C, Selected, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationItemEntry_C, UnknownData_679D, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CustomizationItemEntry_C, SortBias, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CustomizationItemEntry_C, 0x0278);
		}

		// class UBP_ArchersArms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArchersArms__BP_ArchersArms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArchersArms_C, 0x01B8);
		}

		// class UBP_ArchersBracer_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArchersBracer__BP_ArchersBracer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArchersBracer_C, 0x01B8);
		}

		// class UBP_Brigandine_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Brigandine_Arms__BP_Brigandine_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Brigandine_Arms_C, 0x01B8);
		}

		// class UAB_SeparatedBodyPartAnimation_C : public USeparatedBodyPartAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_SeparatedBodyPartAnimation__AB_SeparatedBodyPartAnimation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_Root, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_22, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ComponentToLocalSpace, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_21, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_20, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_19, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_18, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_17, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_16, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_15, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_14, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_13, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_12, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_11, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_10, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_9, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_8, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_7, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_6, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_5, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_LocalToComponentSpace, 0x1578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_CopyPoseFromMesh, 0x1598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_4, 0x16D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_3, 0x17E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone_2, 0x18E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SeparatedBodyPartAnimation_C, AnimGraphNode_ModifyBone, 0x19F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_SeparatedBodyPartAnimation_C, 0x1AF8);
		}

		// class ABP_HelmetPickup_C : public ABP_WearablePickup_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HelmetPickup__BP_HelmetPickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HelmetPickup_C, 0x0408);
		}

		// class ABP_FistsWeapon_C : public AFistsWeapon
		TEST_METHOD(BlueprintGeneratedClass__BP_FistsWeapon__BP_FistsWeapon_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FistsWeapon_C, 0x1C20);
		}

		// class UBP_EyeColor2_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor2__BP_EyeColor2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor2_C, 0x0078);
		}

		// class UBP_EyeColor14_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor14__BP_EyeColor14_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor14_C, 0x0078);
		}

		// class UBP_Cloth46_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth46__BP_Cloth46_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth46_C, 0x0078);
		}

		// class UBP_Cloth41_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth41__BP_Cloth41_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth41_C, 0x0078);
		}

		// class UBP_Cloth33_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth33__BP_Cloth33_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth33_C, 0x0078);
		}

		// class UBP_Cloth3_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth3__BP_Cloth3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth3_C, 0x0078);
		}

		// class UBP_Cloth17_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth17__BP_Cloth17_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth17_C, 0x0078);
		}

		// class UBP_MailOverGambeson2_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MailOverGambeson2__BP_MailOverGambeson2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MailOverGambeson2_C, 0x01A0);
		}

		// class UBP_GermanSalletRaisedRR_C : public UBP_GermanSalletBuffet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletRaisedRR__BP_GermanSalletRaisedRR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletRaisedRR_C, 0x01C8);
		}

		// class UBP_GermanSalletBevorPlumeRR_C : public UBP_GermanSalletBuffet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletBevorPlumeRR__BP_GermanSalletBevorPlumeRR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletBevorPlumeRR_C, 0x01C8);
		}

		// class UBP_Bare_Chest_C : public UBP_Tier0UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bare_Chest__BP_Bare_Chest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bare_Chest_C, 0x01E8);
		}

		// class UBP_HeavyBarbute_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HeavyBarbute__BP_HeavyBarbute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HeavyBarbute_C, 0x01C8);
		}

		// class UBP_ScoutHat_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ScoutHat__BP_ScoutHat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScoutHat_C, 0x01C8);
		}

		// class UBP_BurgonetBuffet_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BurgonetBuffet__BP_BurgonetBuffet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BurgonetBuffet_C, 0x01C8);
		}

		// class UBP_KlappvisierStandard_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KlappvisierStandard__BP_KlappvisierStandard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KlappvisierStandard_C, 0x01C8);
		}

		// class UBP_KlappvisierNoVisor_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KlappvisierNoVisor__BP_KlappvisierNoVisor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KlappvisierNoVisor_C, 0x01C8);
		}

		// class UBP_Battleaxe_guardian_handle02_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Battleaxe_guardian_handle02__BP_Battleaxe_guardian_handle02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Battleaxe_guardian_handle02_C, 0x0078);
		}

		// class UBP_Poleaxe_BluntHead_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Poleaxe_BluntHead__BP_Poleaxe_BluntHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Poleaxe_BluntHead_C, 0x0078);
		}

		// class UBP_CastelloMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_CastelloMapMetadata__BP_CastelloMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CastelloMapMetadata_C, 0x00A8);
		}

		// class UBP_LeatherColor25_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor25__BP_LeatherColor25_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor25_C, 0x0078);
		}

		// class UBP_LeatherColor24_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor24__BP_LeatherColor24_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor24_C, 0x0078);
		}

		// class UBP_LeatherColor23_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor23__BP_LeatherColor23_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor23_C, 0x0078);
		}

		// class UBP_Cloth11_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_Cloth11__BP_Cloth11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Cloth11_C, 0x0078);
		}

		// class UBOT_Klappvisier_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Klappvisier__BOT_Klappvisier_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Klappvisier_C, 0x0108);
		}

		// class UBOT_Hounskull_C : public UBP_BotProfile_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Hounskull__BOT_Hounskull_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBOT_Hounskull_C, 0x0108);
		}

		// class ABP_WearablePickup_C : public ASkeletalMeshMordhauActor
		TEST_METHOD(BlueprintGeneratedClass__BP_WearablePickup__BP_WearablePickup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WearablePickup_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WearablePickup_C, Wearables, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WearablePickup_C, Tier, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WearablePickup_C, UnknownData_PAM2, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WearablePickup_C, EquipSound, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WearablePickup_C, MainSlot, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WearablePickup_C, UnknownData_POAO, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WearablePickup_C, Name, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WearablePickup_C, 0x0408);
		}

		// class ABP_OutGoreMesh_C : public ABP_BaseGoreMesh_C
		TEST_METHOD(BlueprintGeneratedClass__BP_OutGoreMesh__BP_OutGoreMesh_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_OutGoreMesh_C, UberGraphFrame, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_OutGoreMesh_C, 0x0248);
		}

		// class UWalkHeadBobShakeRight_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__WalkHeadBobShakeRight__WalkHeadBobShakeRight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWalkHeadBobShakeRight_C, 0x0160);
		}

		// class UWalkHeadBobShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__WalkHeadBobShake__WalkHeadBobShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWalkHeadBobShake_C, 0x0160);
		}

		// class UBP_MordhauUtilityLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauUtilityLibrary__BP_MordhauUtilityLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MordhauUtilityLibrary_C, 0x0028);
		}

		// class ABP_MordhauSpectator_C : public AMordhauSpectator
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauSpectator__BP_MordhauSpectator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauSpectator_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauSpectator_C, CineCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauSpectator_C, SpeedChangeDelta, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauSpectator_C, UnknownData_VHGW, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauSpectator_C, FocusOnObjectTypes, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauSpectator_C, CameraFocus, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauSpectator_C, FocusChangeDelta, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauSpectator_C, CameraRotation, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauSpectator_C, CameraLocation, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauSpectator_C, 0x0318);
		}

		// class ABP_Ballista_C : public ABP_MordhauVehicle_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Ballista__BP_Ballista_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ballista_C, UberGraphFrame, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ballista_C, MoveSound, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ballista_C, ProjectileTurretShooter, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ballista_C, Bolt, 0x0C48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Ballista_C, 0x0C50);
		}

		// class ABP_ToolBox_C : public ABP_2HThrowableBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ToolBox__BP_ToolBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolBox_C, UberGraphFrame, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolBox_C, MordhauHUDWidget, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolBox_C, BuildingSystem, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolBox_C, ObjectType, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolBox_C, UnknownData_LNHP, 0x0CEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolBox_C, SpawnableObjects, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolBox_C, PreviewMeshComponent, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolBox_C, NextAvailableTime, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolBox_C, Cooldown, 0x0D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolBox_C, WidgetDisplay, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ToolBox_C, LastTraceText, 0x0D18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ToolBox_C, 0x0D30);
		}

		// class ABP_ThrownWeaponProjectile_C : public ABP_MordhauProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ThrownWeaponProjectile__BP_ThrownWeaponProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ThrownWeaponProjectile_C, UnknownData_JI6P, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ThrownWeaponProjectile_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ThrownWeaponProjectile_C, 0x07D0);
		}

		// class UHitShakeCouch_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__HitShakeCouch__HitShakeCouch_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitShakeCouch_C, 0x0160);
		}

		// class ABP_MordhauCameraManager_C : public AMordhauCameraManager
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauCameraManager__BP_MordhauCameraManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MordhauCameraManager_C, UberGraphFrame, 0x2D90);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MordhauCameraManager_C, 0x2D98);
		}

		// class UBP_2HSword_RightStabMotion_C : public UBP_RightStabMotion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_2HSword_RightStabMotion__BP_2HSword_RightStabMotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_2HSword_RightStabMotion_C, 0x1108);
		}

		// class UBP_Moustache2_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Moustache2__BP_Moustache2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Moustache2_C, 0x0078);
		}

		// class UBP_Moustache_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Moustache__BP_Moustache_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Moustache_C, 0x0078);
		}

		// class UBP_FlatFaceVisorUp_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlatFaceVisorUp__BP_FlatFaceVisorUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlatFaceVisorUp_C, 0x01C8);
		}

		// class UBP_Bretache_Nasal_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bretache_Nasal__BP_Bretache_Nasal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bretache_Nasal_C, 0x01C8);
		}

		// class UBP_VeteransBarbutePlumeUp_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransBarbutePlumeUp__BP_VeteransBarbutePlumeUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransBarbutePlumeUp_C, 0x01C8);
		}

		// class UBP_VikingSword_RingGrip_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingSword_RingGrip__BP_VikingSword_RingGrip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VikingSword_RingGrip_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingSword_RingGrip_C, 0x0080);
		}

		// class UBP_VikingSword_TriangularHilt_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingSword_TriangularHilt__BP_VikingSword_TriangularHilt_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VikingSword_TriangularHilt_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingSword_TriangularHilt_C, 0x0080);
		}

		// class UBP_VikingSword_TrilobedHilt_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VikingSword_TrilobedHilt__BP_VikingSword_TrilobedHilt_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VikingSword_TrilobedHilt_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VikingSword_TrilobedHilt_C, 0x0080);
		}

		// class UBP_BastardSword_MerchantBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword_MerchantBlade__BP_BastardSword_MerchantBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BastardSword_MerchantBlade_C, 0x0078);
		}

		// class UBP_DrapedCuirassCut_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DrapedCuirassCut__BP_DrapedCuirassCut_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DrapedCuirassCut_C, 0x01E8);
		}

		// class UBP_PaintedItalianChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PaintedItalianChest__BP_PaintedItalianChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PaintedItalianChest_C, 0x01E8);
		}

		// class UBP_CoatOfPlates_C : public UBP_Tier2UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CoatOfPlates__BP_CoatOfPlates_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CoatOfPlates_C, 0x01E8);
		}

		// class UBP_Landsknecht_Boots_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Landsknecht_Boots__BP_Landsknecht_Boots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Landsknecht_Boots_C, 0x01A0);
		}

		// class UBP_WanderersShorts_C : public UBP_Tier0LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WanderersShorts__BP_WanderersShorts_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WanderersShorts_C, 0x01B8);
		}

		// class UBP_Flutted_Legs_C : public UBP_Tier3LegsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Flutted_Legs__BP_Flutted_Legs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Flutted_Legs_C, 0x01B8);
		}

		// class UAssetTagsSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__AssetTags__AssetTagsSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetTagsSubsystem, 0x0030);
		}

		// class UBP_MordhauGameInstance_C : public UMordhauGameInstance
		TEST_METHOD(BlueprintGeneratedClass__BP_MordhauGameInstance__BP_MordhauGameInstance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauGameInstance_C, UberGraphFrame, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauGameInstance_C, PasswordDialog, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauGameInstance_C, NetworkErrorDialog, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauGameInstance_C, JoiningDialog, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauGameInstance_C, JoinDelay, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauGameInstance_C, UnknownData_2DRU, 0x0BA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauGameInstance_C, JoinDelayTimer, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauGameInstance_C, SessionToJoin, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauGameInstance_C, WantsCasualRequeue, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauGameInstance_C, WantsRankedRequeue, 0x0CC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MordhauGameInstance_C, BackendConnectionTimeout, 0x0CC2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MordhauGameInstance_C, 0x0CC3);
		}

		// class UMagicLeapARPinComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, ObjectUID, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UserIndex, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, AutoPinType, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, bShouldPinActor, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_0C9G, 0x0206);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinDataClass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinned, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinLost, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedCFUID, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedSceneComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_UYGF, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinComponent, 0x0320);
		}

		// class UMagicLeapARPinFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinFunctionLibrary, 0x0028);
		}

		// class UMagicLeapARPinSettings : public UObject
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, UpdateCheckFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, OnUpdatedEventTriggerDelta, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, UnknownData_JIGI, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSettings, 0x0040);
		}

		// class UMagicLeapARPinSaveGame : public USaveGame
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinnedID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, UnknownData_EH16, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, ComponentWorldTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinTransform, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSaveGame, 0x00A0);
		}

		// class UBP_FurColor9_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor9__BP_FurColor9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor9_C, 0x0078);
		}

		// class UBP_FurColor8_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor8__BP_FurColor8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor8_C, 0x0078);
		}

		// class UBP_FurColor3_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_FurColor3__BP_FurColor3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurColor3_C, 0x0078);
		}

		// class UBP_EyeColor7_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeColor7__BP_EyeColor7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeColor7_C, 0x0078);
		}

		// class UBP_Flourish_TwoHanded_Medium_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Flourish_TwoHanded_Medium__BP_Flourish_TwoHanded_Medium_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Flourish_TwoHanded_Medium_C, 0x0130);
		}

		// class UBP_Emote_Throatcut1_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Emote_Throatcut1__BP_Emote_Throatcut1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emote_Throatcut1_C, 0x0130);
		}

		// class UBP_Disapprove_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Disapprove__BP_Disapprove_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Disapprove_C, 0x0130);
		}

		// class UBP_Dance_C : public UEmoteMotion
		TEST_METHOD(BlueprintGeneratedClass__BP_Dance__BP_Dance_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Dance_C, 0x0130);
		}

		// class UBP_InformationDialog_C : public UMordhauDialog
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InformationDialog__BP_InformationDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InformationDialog_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InformationDialog_C, BP_OneButtonDialog, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InformationDialog_C, TextBlock_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InformationDialog_C, InfoText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InformationDialog_C, ButtonClicked, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InformationDialog_C, 0x0270);
		}

		// class UBP_TeamSelectPlayerEntry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TeamSelectPlayerEntry__BP_TeamSelectPlayerEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectPlayerEntry_C, NameText, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TeamSelectPlayerEntry_C, PlayerName, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TeamSelectPlayerEntry_C, 0x0250);
		}

		// class UBP_ContextPopup_Interface_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ContextPopup_Interface__BP_ContextPopup_Interface_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopup_Interface_C, Image_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ContextPopup_Interface_C, VerticalBox_2, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ContextPopup_Interface_C, 0x0240);
		}

		// class UBP_LeatherPadLeft_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherPadLeft__BP_LeatherPadLeft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherPadLeft_C, 0x01A0);
		}

		// class UBP_RimmedPauldrons_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RimmedPauldrons__BP_RimmedPauldrons_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RimmedPauldrons_C, 0x01A0);
		}

		// class UBP_PreorderPauldronsChain_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PreorderPauldronsChain__BP_PreorderPauldronsChain_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PreorderPauldronsChain_C, 0x01A0);
		}

		// class UBP_TeutonicLongsword_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TeutonicLongsword__BP_TeutonicLongsword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TeutonicLongsword_C, 0x0078);
		}

		// class UBP_Leather_ChestLow_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Leather_ChestLow__BP_Leather_ChestLow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Leather_ChestLow_C, 0x01A0);
		}

		// class UBP_Bare_Arms_C : public UBP_ArmsWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bare_Arms__BP_Bare_Arms_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bare_Arms_C, 0x01B8);
		}

		// class UBP_SavoyardBarred_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SavoyardBarred__BP_SavoyardBarred_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SavoyardBarred_C, 0x01C8);
		}

		// class UBP_ItalianArmetRaised_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ItalianArmetRaised__BP_ItalianArmetRaised_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItalianArmetRaised_C, 0x01C8);
		}

		// class UBP_ItalianArmetNoVisor_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ItalianArmetNoVisor__BP_ItalianArmetNoVisor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ItalianArmetNoVisor_C, 0x01C8);
		}

		// class UBP_VeteransBarbuteRaised_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransBarbuteRaised__BP_VeteransBarbuteRaised_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransBarbuteRaised_C, 0x01C8);
		}

		// class UBP_ArmetPlume_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmetPlume__BP_ArmetPlume_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmetPlume_C, 0x01C8);
		}

		// class UBP_MailleHoodLowered_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MailleHoodLowered__BP_MailleHoodLowered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MailleHoodLowered_C, 0x01C8);
		}

		// class UBP_GreathelmPaint_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GreathelmPaint__BP_GreathelmPaint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GreathelmPaint_C, 0x01C8);
		}

		// class UBP_HoodCoif_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HoodCoif__BP_HoodCoif_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HoodCoif_C, 0x01A0);
		}

		// class UBP_DecoratedItalianRapier_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DecoratedItalianRapier__BP_DecoratedItalianRapier_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DecoratedItalianRapier_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DecoratedItalianRapier_C, 0x0080);
		}

		// class UBP_Axe_CarvedHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Axe_CarvedHandle__BP_Axe_CarvedHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Axe_CarvedHandle_C, 0x0078);
		}

		// class UBP_Axe_StraightHandle_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Axe_StraightHandle__BP_Axe_StraightHandle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Axe_StraightHandle_C, 0x0078);
		}

		// class UBP_BastardSword_Engraved_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BastardSword_Engraved__BP_BastardSword_Engraved_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BastardSword_Engraved_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BastardSword_Engraved_C, 0x0080);
		}

		// class UBP_HauberkLow_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HauberkLow__BP_HauberkLow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HauberkLow_C, 0x01A0);
		}

		// class UBP_Corazzina_C : public UBP_Tier2UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Corazzina__BP_Corazzina_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Corazzina_C, 0x01E8);
		}

		// class UBP_BreastplateOverJoupon_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BreastplateOverJoupon__BP_BreastplateOverJoupon_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BreastplateOverJoupon_C, 0x01E8);
		}

		// class UBP_KastenBurst_Skirt_02_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KastenBurst_Skirt_02__BP_KastenBurst_Skirt_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KastenBurst_Skirt_02_C, 0x01A0);
		}

		// class UBP_WreckerPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WreckerPerk__BP_WreckerPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WreckerPerk_C, 0x0068);
		}

		// class UBP_SmithPerk_C : public UBP_Perk_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmithPerk__BP_SmithPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SmithPerk_C, 0x0068);
		}

		// class UBP_Battle2_Banner_C : public UBadge
		TEST_METHOD(BlueprintGeneratedClass__BP_Battle2_Banner__BP_Battle2_Banner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Battle2_Banner_C, 0x0060);
		}

		// class UBP_MetalDetailColor9_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor9__BP_MetalDetailColor9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor9_C, 0x0078);
		}

		// class UBP_MetalDetailColor7_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor7__BP_MetalDetailColor7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor7_C, 0x0078);
		}

		// class UBP_MetalDetailColor6_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor6__BP_MetalDetailColor6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor6_C, 0x0078);
		}

		// class UBP_MetalDetailColor12_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_MetalDetailColor12__BP_MetalDetailColor12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MetalDetailColor12_C, 0x0078);
		}

		// class UBP_LeatherColor9_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor9__BP_LeatherColor9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor9_C, 0x0078);
		}

		// class UBP_LeatherColor7_C : public UMordhauColor
		TEST_METHOD(BlueprintGeneratedClass__BP_LeatherColor7__BP_LeatherColor7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeatherColor7_C, 0x0078);
		}

		// class UBP_MessySideSwoopMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_MessySideSwoopMale01__BP_MessySideSwoopMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MessySideSwoopMale01_C, 0x0078);
		}

		// class UBP_Medium1Male01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Medium1Male01__BP_Medium1Male01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Medium1Male01_C, 0x0078);
		}

		// class UBP_BowlCutMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_BowlCutMale01__BP_BowlCutMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BowlCutMale01_C, 0x0078);
		}

		// class UBP_Stubble1Male01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_Stubble1Male01__BP_Stubble1Male01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Stubble1Male01_C, 0x0078);
		}

		// class UBP_ScotsmanMale01_C : public UCharacterHair
		TEST_METHOD(BlueprintGeneratedClass__BP_ScotsmanMale01__BP_ScotsmanMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScotsmanMale01_C, 0x0078);
		}

		// class UBP_BuildableComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_BuildableComponent__BP_BuildableComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BuildableComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BuildableComponent_C, Builder, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BuildableComponent_C, PlaceableLimitName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BuildableComponent_C, OrignPlanterController, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BuildableComponent_C, HasNotifiedDestruction, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BuildableComponent_C, 0x00D1);
		}

		// class UBP_JeweledWarCrown_C : public UBP_Tier1HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JeweledWarCrown__BP_JeweledWarCrown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JeweledWarCrown_C, 0x01C8);
		}

		// class UBP_BlackSalletCoveredVisorUp_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BlackSalletCoveredVisorUp__BP_BlackSalletCoveredVisorUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlackSalletCoveredVisorUp_C, 0x01C8);
		}

		// class ABP_Quarterstaff_C : public ABP_Polearm_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Quarterstaff__BP_Quarterstaff_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Quarterstaff_C, 0x1C28);
		}

		// class UBP_Quarterstaff_Segmented_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Quarterstaff_Segmented__BP_Quarterstaff_Segmented_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Quarterstaff_Segmented_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Quarterstaff_Segmented_C, 0x0080);
		}

		// class UBP_ShortSwordFullerBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortSwordFullerBlade__BP_ShortSwordFullerBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortSwordFullerBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortSwordFullerBlade_C, 0x0080);
		}

		// class UBP_ShortSwordPiercerBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ShortSwordPiercerBlade__BP_ShortSwordPiercerBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShortSwordPiercerBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShortSwordPiercerBlade_C, 0x0080);
		}

		// class UBP_Halberd_NimbleShaft_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Halberd_NimbleShaft__BP_Halberd_NimbleShaft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Halberd_NimbleShaft_C, 0x0078);
		}

		// class UBP_EyeBandage_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_EyeBandage__BP_EyeBandage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EyeBandage_C, 0x01A0);
		}

		// class UBP_ChainTabardLow_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ChainTabardLow__BP_ChainTabardLow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChainTabardLow_C, 0x01A0);
		}

		// class UMagicLeapPrivilegesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPrivileges__MagicLeapPrivilegesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPrivilegesFunctionLibrary, 0x0028);
		}

		// class UMagicLeapSecureStorage : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapSecureStorage__MagicLeapSecureStorage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSecureStorage, 0x0028);
		}

		// class UBP_WanderersHoodLowered_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WanderersHoodLowered__BP_WanderersHoodLowered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WanderersHoodLowered_C, 0x01A0);
		}

		// class UBP_FurCoif_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FurCoif__BP_FurCoif_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FurCoif_C, 0x01A0);
		}

		// class UBP_VeteransGorget_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VeteransGorget__BP_VeteransGorget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VeteransGorget_C, 0x01A0);
		}

		// class UBP_Spectacles_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Spectacles__BP_Spectacles_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Spectacles_C, 0x01A0);
		}

		// class UImgMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FrameRateOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x00B0);
		}

		// class UBP_Emblem_Archerpest_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Emblem_Archerpest__BP_Emblem_Archerpest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Emblem_Archerpest_C, 0x0060);
		}

		// class UBP_Templar01_C : public UEmblem
		TEST_METHOD(BlueprintGeneratedClass__BP_Templar01__BP_Templar01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Templar01_C, 0x0060);
		}

		// class UBP_GermanSalletPlumeHelm_C : public UBP_Tier2HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GermanSalletPlumeHelm__BP_GermanSalletPlumeHelm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GermanSalletPlumeHelm_C, 0x01C8);
		}

		// class ABP_Messer_C : public ABP_TwoHandedSword_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Messer__BP_Messer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Messer_C, 0x1C28);
		}

		// class UBP_messer_BraggartBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_messer_BraggartBlade__BP_messer_BraggartBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_messer_BraggartBlade_C, 0x0078);
		}

		// class UBP_TargeShieldPartHandPavise_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TargeShieldPartHandPavise__BP_TargeShieldPartHandPavise_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TargeShieldPartHandPavise_C, 0x0078);
		}

		// class UBP_BurgundianCuirass_covered_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BurgundianCuirass_covered__BP_BurgundianCuirass_covered_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BurgundianCuirass_covered_C, 0x01E8);
		}

		// class UBP_ArmetRegular_C : public UBP_Tier3HeadWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ArmetRegular__BP_ArmetRegular_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArmetRegular_C, 0x01C8);
		}

		// class UBP_Dagger_PuncturingBlade_C : public UBP_MordhauEquipmentPart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Dagger_PuncturingBlade__BP_Dagger_PuncturingBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Dagger_PuncturingBlade_C, UberGraphFrame, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Dagger_PuncturingBlade_C, 0x0080);
		}

		// class UBP_Grad64Override_C : public UMapMetadataOverride
		TEST_METHOD(BlueprintGeneratedClass__BP_Grad64Override__BP_Grad64Override_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Grad64Override_C, 0x0098);
		}

		// class UBP_GradMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_GradMapMetadata__BP_GradMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GradMapMetadata_C, 0x00A8);
		}

		// class UBP_CampMapMetadata_C : public UMapMetadata
		TEST_METHOD(BlueprintGeneratedClass__BP_CampMapMetadata__BP_CampMapMetadata_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CampMapMetadata_C, 0x00A8);
		}

		// class UBP_FlatChest_C : public UBP_Tier3UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlatChest__BP_FlatChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FlatChest_C, 0x01E8);
		}

		// class UBP_KnightPauldrons3x3_C : public UBP_MordhauWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_KnightPauldrons3x3__BP_KnightPauldrons3x3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KnightPauldrons3x3_C, 0x01A0);
		}

		// class UBP_LamellarChest_C : public UBP_Tier2UpperChestWearable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LamellarChest__BP_LamellarChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LamellarChest_C, 0x01E8);
		}

		// struct FNiagaraTypeDefinition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, ClassStructOrEnum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnderlyingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnknownData_ZGX3, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinition, 0x0010);
		}

		// struct FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, TypeDef, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableBase, 0x0018);
		}

		// struct FNiagaraVariable : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, VarData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariable, 0x0028);
		}

		// struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableWithOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, Offset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, UnknownData_HJA0, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableWithOffset, 0x0020);
		}

		// struct FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_PRPU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, SortedParameterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, ParameterData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, DataInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UObjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_C0EW, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterStore, 0x00B8);
		}

		// struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserRedirectionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserRedirectionParameterStore, UserParameterRedirects, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserRedirectionParameterStore, 0x0108);
		}

		// struct FNCPoolElement
		TEST_METHOD(ScriptStruct__Niagara__NCPoolElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, UnknownData_Y51F, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPoolElement, 0x0010);
		}

		// struct FNCPool
		TEST_METHOD(ScriptStruct__Niagara__NCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, UnknownData_ZAJE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPool, 0x0038);
		}

		// struct FNiagaraUserParameterBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserParameterBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserParameterBinding, Parameter, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserParameterBinding, 0x0028);
		}

		// struct FNDIStaticMeshSectionFilter
		TEST_METHOD(ScriptStruct__Niagara__NDIStaticMeshSectionFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNDIStaticMeshSectionFilter, AllowedMaterialSlots, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNDIStaticMeshSectionFilter, 0x0010);
		}

		// struct FNiagaraDeviceProfileStateEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDeviceProfileStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, QualityLevelMask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, SetQualityLevelMask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDeviceProfileStateEntry, 0x0010);
		}

		// struct FNiagaraPlatformSet
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, QualityLevelMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_DFFT, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, DeviceProfileStates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_USGX, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSet, 0x0020);
		}

		// struct FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, UnknownData_XFTB, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, SpawnCountScale, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettings, 0x0028);
		}

		// struct FNiagaraEmitterScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraEventReceiverProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventReceiverProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEventGenerator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEmitter, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventReceiverProperties, 0x0018);
		}

		// struct FNiagaraTypeLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentByteOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentRegisterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentByteOffsets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentRegisterOffsets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeLayoutInfo, 0x0040);
		}

		// struct FNiagaraDataSetID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, UnknownData_CPGO, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetID, 0x000C);
		}

		// struct FNiagaraDetailsLevelScaleOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDetailsLevelScaleOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Low, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Medium, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, High, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Epic, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Cine, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDetailsLevelScaleOverrides, 0x0014);
		}

		// struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverride, UnknownData_421V, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverride, 0x0030);
		}

		// struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraParameterSectionTemplate, Parameter, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraParameterSectionTemplate, 0x0048);
		}

		// struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraBoolParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, BoolChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraColorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, RedChannel, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, GreenChannel, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, BlueChannel, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, AlphaChannel, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraColorParameterSectionTemplate, 0x02C8);
		}

		// struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraFloatParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, FloatChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, 0x00E8);
		}

		// struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraIntegerParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, IntegerChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackImplementation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartBehavior, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_C31G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEvaluateBehavior, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_YH0Y, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndBehavior, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_XZM2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, AgeUpdateMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_0FE8, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackImplementation, 0x0028);
		}

		// struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackTemplate, 0x0020);
		}

		// struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraVectorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, VectorChannels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, ChannelsUsed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, UnknownData_V4OZ, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, 0x02D0);
		}

		// struct FNiagaraRandInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRandInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRandInfo, 0x000C);
		}

		// struct FNiagaraScriptVariableBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptVariableBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptVariableBinding, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptVariableBinding, 0x0008);
		}

		// struct FNiagaraVariableInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Variable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Definition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, DataInterface, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableInfo, 0x0048);
		}

		// struct FNiagaraSystemUpdateContext
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemUpdateContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReInit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, SystemSimsToDestroy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, UnknownData_N5O3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemUpdateContext, 0x0038);
		}

		// struct FNiagaraFunctionSignature
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFunctionSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Inputs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Outputs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, OwnerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, UnknownData_Q7QI, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, FunctionSpecifiers, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFunctionSignature, 0x0088);
		}

		// struct FBasicParticleData
		TEST_METHOD(ScriptStruct__Niagara__BasicParticleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Velocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasicParticleData, 0x001C);
		}

		// struct FMeshTriCoordinate
		TEST_METHOD(ScriptStruct__Niagara__MeshTriCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, Tri, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, BaryCoord, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriCoordinate, 0x0010);
		}

		// struct FNiagaraGraphViewSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraGraphViewSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Zoom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, bIsValid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, UnknownData_TEEY, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraGraphViewSettings, 0x0010);
		}

		// struct FNiagaraCollisionEventPayload
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCollisionEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, ParticleIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, PhysicalMaterialIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCollisionEventPayload, 0x002C);
		}

		// struct FNiagaraPlatformSetConflictEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, QualityLevelMask, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictEntry, 0x000C);
		}

		// struct FNiagaraPlatformSetConflictInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetAIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetBIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, Conflicts, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictInfo, 0x0018);
		}

		// struct FNiagaraScalabilityManager
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScalabilityManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, EffectType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, ManagedComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, UnknownData_98JG, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScalabilityManager, 0x0040);
		}

		// struct FNiagaraModuleDependency
		TEST_METHOD(ScriptStruct__Niagara__NiagaraModuleDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ScriptConstraint, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, UnknownData_BRO2, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraModuleDependency, 0x0028);
		}

		// struct FNiagaraScriptHighlight
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptHighlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, Color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptHighlight, 0x0028);
		}

		// struct FNiagaraSystemCompileRequest
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_S0ZX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, RootObjects, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_M01F, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompileRequest, 0x0080);
		}

		// struct FEmitterCompiledScriptPair
		TEST_METHOD(ScriptStruct__Niagara__EmitterCompiledScriptPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterCompiledScriptPair, UnknownData_E9TA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterCompiledScriptPair, 0x0078);
		}

		// struct FNiagaraVariableLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, FloatComponentStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, Int32ComponentStart, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, LayoutInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableLayoutInfo, 0x0048);
		}

		// struct FNiagaraDataSetCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, Variables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, VariableLayouts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalFloatComponents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalInt32Components, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_HLSL, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, ID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, SimTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_QO1I, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetCompiledData, 0x0040);
		}

		// struct FNiagaraEmitterCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, SpawnAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnIntervalVar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInterpSpawnStartDTVar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnGroupVar, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterAgeVar, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterRandomSeedVar, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterTotalSpawnedParticlesVar, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, DataSetCompiledData, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterCompiledData, 0x0140);
		}

		// struct FNiagaraInputConditionMetadata
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInputConditionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, TargetValues, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInputConditionMetadata, 0x0018);
		}

		// struct FNiagaraVariableMetaData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAdvancedDisplay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_5B0I, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditorSortPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bInlineEditConditionToggle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_EWAO, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditCondition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, VisibleCondition, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, PropertyMetaData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ScopeName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Usage, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_V92R, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bIsStaticSwitch, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_3WYU, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, StaticSwitchDefaultValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAddedToNodeGraphDeepCopy, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bOutputIsPersistent, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_L87K, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CachedNamespacelessVariableName, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bCreatedInSystemEditor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bUseLegacyNameString, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_SHNY, 0x00E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableMetaData, 0x00E8);
		}

		// struct FNiagaraParameterScopeInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterScopeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, Scope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_501A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_0ECJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, NamespaceString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterScopeInfo, 0x0018);
		}

		// struct FNiagaraCompileHashVisitorDebugInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCompileHashVisitorDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyValues, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHashVisitorDebugInfo, 0x0030);
		}

		// struct FNiagaraID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, AcquireTag, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraID, 0x0008);
		}

		// struct FNiagaraSpawnInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, InterpStartDt, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, IntervalDt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, SpawnGroup, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSpawnInfo, 0x0010);
		}

		// struct FNiagaraMatrix
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMatrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMatrix, 0x0040);
		}

		// struct FNiagaraTestStructInner
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTestStructInner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStructInner, InnerVector1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStructInner, InnerVector2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTestStructInner, 0x0018);
		}

		// struct FNiagaraTestStruct
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, Vector1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, Vector2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, InnerStruct1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, InnerStruct2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTestStruct, 0x0048);
		}

		// struct FNiagaraParameterMap
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterMap, UnknownData_H1PH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterMap, 0x0001);
		}

		// struct FNiagaraNumeric
		TEST_METHOD(ScriptStruct__Niagara__NiagaraNumeric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraNumeric, UnknownData_W1VG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraNumeric, 0x0001);
		}

		// struct FNiagaraBool
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBool, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBool, 0x0004);
		}

		// struct FNiagaraInt32
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInt32, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInt32, 0x0004);
		}

		// struct FNiagaraFloat
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFloat, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFloat, 0x0004);
		}

		// struct FNiagaraVariant
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, DataInterface, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Bytes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, CurrentMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_1GQH, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_2TJ7, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariant, 0x0028);
		}

		// struct FNiagaraWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Niagara__NiagaraWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraWorldManagerTickFunction, UnknownData_OJU6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraWorldManagerTickFunction, 0x0030);
		}

		// struct FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_VIJB, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxTimeWithoutRender, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettings, 0x0030);
		}

		// struct FNiagaraEmitterHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, IdName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, bIsEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_BSVV, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Name, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_0K1B, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Instance, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterHandle, 0x0030);
		}

		// struct FNiagaraSystemScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraEmitterScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraEventGeneratorProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventGeneratorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, MaxEventsPerFrame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, ID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, UnknownData_FTJJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, DataSetCompiledData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventGeneratorProperties, 0x0050);
		}

		// struct FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, Script, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventReceivers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventGenerators, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScriptProperties, 0x0028);
		}

		// struct FNiagaraScriptDataInterfaceCompileInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceCompileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UserPtrIdx, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_UF2O, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapRead, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapWrite, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, bIsPlaceholder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_GE6T, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceCompileInfo, 0x0038);
		}

		// struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, ExecutionMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_FJSS, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SpawnNumber, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MaxEventsPerFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEmitterID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEventName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, bRandomSpawnNumber, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_97SH, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MinSpawnNumber, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_P3VN, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventScriptProperties, 0x0058);
		}

		// struct FNiagaraVariableAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, BoundVariable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DataSetVariable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DefaultValueIfNonExistent, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableAttributeBinding, 0x0078);
		}

		// struct FNiagaraScriptExecutionPaddingInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionPaddingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestOffset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestSize, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionPaddingInfo, 0x0008);
		}

		// struct FNiagaraScriptDataUsageInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataUsageInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataUsageInfo, bReadsAttributeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataUsageInfo, 0x0001);
		}

		// struct FVMFunctionSpecifier
		TEST_METHOD(ScriptStruct__Niagara__VMFunctionSpecifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMFunctionSpecifier, 0x0010);
		}

		// struct FNiagaraStatScope
		TEST_METHOD(ScriptStruct__Niagara__NiagaraStatScope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FullName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FriendlyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraStatScope, 0x0010);
		}

		// struct FSimulationStageMetaData
		TEST_METHOD(ScriptStruct__Niagara__SimulationStageMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, IterationSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, UnknownData_F2VN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, OutputDestinations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MinStage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MaxStage, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulationStageMetaData, 0x0028);
		}

		// struct FNiagaraScriptDataInterfaceInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, DataInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UserPtrIdx, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UnknownData_GD9M, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapRead, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapWrite, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceInfo, 0x0038);
		}

		// struct FNiagaraMeshMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMeshMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, ExplicitMat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, UserParamBinding, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMeshMaterialOverride, 0x0030);
		}

		// struct FNiagaraBoundParameter
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBoundParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, SrcOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, DestOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBoundParameter, 0x0030);
		}

		// struct FNiagaraDataSetProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, UnknownData_RB68, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, Variables, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetProperties, 0x0020);
		}

		// struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, ParameterSize, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddedParameterSize, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddingInfo, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, UnknownData_QOHF, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionParameterStore, 0x00D8);
		}

		// struct FNiagaraVMExecutableDataId
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableDataId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, CompilerVersionID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_J642, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageTypeID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_COD7, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptCompileHash, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableDataId, 0x0048);
		}

		// struct FNiagaraParameters
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameters, Parameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameters, 0x0010);
		}

		// struct FVMExternalFunctionBindingInfo
		TEST_METHOD(ScriptStruct__Niagara__VMExternalFunctionBindingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, OwnerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, InputParamLocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, NumOutputs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, UnknownData_5RK3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, FunctionSpecifiers, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMExternalFunctionBindingInfo, 0x0038);
		}

		// struct FNiagaraVMExecutableData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ByteCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, OptimizedByteCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumTempRegisters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumUserPtrs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Parameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, InternalParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataSetToParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Attributes, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataUsage, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_77O6, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataInterfaceInfo, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, CalledVMExternalFunctions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ReadDataSets, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, WriteDataSets, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, StatScopes, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DIParamInfo, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, LastCompileStatus, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_8231, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, SimulationStageMetaData, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableData, 0x0128);
		}

		// struct FNiagaraVariableDataInterfaceBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableDataInterfaceBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableDataInterfaceBinding, BoundVariable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableDataInterfaceBinding, 0x0028);
		}

		// struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverride, UnknownData_BC6S, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverride, 0x0038);
		}

		// struct FNiagaraParameterDataSetBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, ParameterOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, DataSetComponentOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBinding, 0x0008);
		}

		// struct FNiagaraParameterDataSetBindingCollection
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBindingCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, FloatOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, Int32Offsets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBindingCollection, 0x0020);
		}

		// struct FNiagaraSystemCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, InstanceParamStore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, DataSetCompiledData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceParamsDataSetCompiledData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceParamsDataSetCompiledData, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceGlobalBinding, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceSystemBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceOwnerBinding, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceEmitterBindings, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceGlobalBinding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceSystemBinding, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceOwnerBinding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceEmitterBindings, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompiledData, 0x0258);
		}

		// struct FNiagaraSystemScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverrides, 0x0010);
		}

		// struct FMagicLeapLightEstimationColorTemperatureState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationColorTemperatureState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, ColorTemperatureKelvin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, AmbientColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, UnknownData_RY2M, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, Timestamp, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationColorTemperatureState, 0x0020);
		}

		// struct FMagicLeapLightEstimationAmbientGlobalState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationAmbientGlobalState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, AmbientIntensityNits, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, Timestamp, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationAmbientGlobalState, 0x0018);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_U2YV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_9P87, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_RWFM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_M6M2, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_DU6J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_ALOU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_XYSR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_3N1F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_O0J2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_6FZG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_KXUD, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_RAJZ, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_EADP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_1M4M, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_C3P4, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_SWI6, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_SREZ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_FU1R, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bApplyOutlineToDropShadows, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_UNP6, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0020);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_57FO, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_QAFW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0050);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_GTKR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHighlightedBrush, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHighlightedBrush, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x07C8);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_OWST, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowOffset, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowColorAndOpacity, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03B8);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03F0);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0218);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F0);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, StrikeBrush, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0268);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_LQ3H, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_W74X, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_ZBKI, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_487J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_UAF1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0FD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x1058);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_LLWM, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_8UIJ, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_673P, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_3BX7, 0x0A79);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A80);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_IYFP, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0A60);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x04F8);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_T8XI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_B8NK, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FCustomizedToolMenuEntry
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, UnknownData_5PFX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuEntry, 0x0004);
		}

		// struct FCustomizedToolMenuSection
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, UnknownData_KRT4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuSection, 0x0004);
		}

		// struct FCustomizedToolMenuNameArray
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuNameArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuNameArray, Names, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuNameArray, 0x0010);
		}

		// struct FCustomizedToolMenu
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Entries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, EntryOrder, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, SectionOrder, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, UnknownData_T3J0, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenu, 0x01E8);
		}

		// struct FChaosDestructionEvent
		TEST_METHOD(ScriptStruct__ChaosNiagara__ChaosDestructionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Velocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, AngularVelocity, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ParticleID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Time, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Type, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDestructionEvent, 0x0044);
		}

		// struct FNiagaraCompileHash
		TEST_METHOD(ScriptStruct__NiagaraCore__NiagaraCompileHash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHash, DataHash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHash, 0x0010);
		}

		// struct FMagicLeapImageTrackerTarget
		TEST_METHOD(ScriptStruct__MagicLeapImageTracker__MagicLeapImageTrackerTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTrackerTarget, UnknownData_74C7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapImageTrackerTarget, 0x00B0);
		}

		// struct FMultiUserClientConfig
		TEST_METHOD(ScriptStruct__MultiUserClientLibrary__MultiUserClientConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserClientConfig, DefaultServerURL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserClientConfig, DefaultSessionName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserClientConfig, DefaultSessionToRestore, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserClientConfig, ValidationMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserClientConfig, UnknownData_KZPL, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiUserClientConfig, 0x0038);
		}

		// struct FMultiUserConnectionError
		TEST_METHOD(ScriptStruct__MultiUserClientLibrary__MultiUserConnectionError)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserConnectionError, ErrorCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserConnectionError, UnknownData_YM93, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserConnectionError, UnknownData_IAIG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserConnectionError, ErrorMessage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiUserConnectionError, 0x0020);
		}

		// struct FMultiUserClientInfo
		TEST_METHOD(ScriptStruct__MultiUserClientLibrary__MultiUserClientInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserClientInfo, ClientEndpointId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserClientInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserClientInfo, AvatarColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUserClientInfo, Tags, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiUserClientInfo, 0x0040);
		}

		// struct FEquipmentModInfo
		TEST_METHOD(UserDefinedStruct__EquipmentModInfo__EquipmentModInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentModInfo, OriginalEquipmentClass_8_AD90F8AD4754C4E6B9BA689CF06C37B8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentModInfo, ModdedEquipmentClass_9_72A32AA846E4EA49923DFEBC0B6AC7CF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentModInfo, UsesEquipmentParts_11_6BBDFC714984D0C9CA7B8A944A3F4F7A, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquipmentModInfo, 0x0011);
		}

		// struct FMagicLeapPolygon
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPolygon, Vertices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPolygon, 0x0010);
		}

		// struct FMagicLeapPlaneBoundary
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Polygon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Holes, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundary, 0x0020);
		}

		// struct FMagicLeapPlaneBoundaries
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundaries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, Boundaries, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundaries, 0x0020);
		}

		// struct FMagicLeapPlaneResult
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlanePosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneOrientation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, ContentOrientation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneDimensions, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, UnknownData_Z3UH, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, ID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, InnerID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneResult, 0x0060);
		}

		// struct FMagicLeapPlanesQuery
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlanesQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, Flags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MaxResults, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinHoleLength, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinPlaneArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeOrientation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeExtents, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SimilarityThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bSearchVolumeTrackingSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bResultTrackingSpace, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, UnknownData_U7L1, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlanesQuery, 0x0060);
		}

		// struct FUVMapSettings
		TEST_METHOD(ScriptStruct__StaticMeshDescription__UVMapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, UVTile, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Position, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Scale, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUVMapSettings, 0x0038);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_7BX1, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FMagicLeapIdentityAttribute
		TEST_METHOD(ScriptStruct__MagicLeapIdentity__MagicLeapIdentityAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, UnknownData_G20K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapIdentityAttribute, 0x0018);
		}

		// struct FPlayFabProfile
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabProfile, UnknownData_07BW, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabProfile, PlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabProfile, Platform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabProfile, UnknownData_DBB4, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabProfile, PlatformAccountID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabProfile, 0x0030);
		}

		// struct FPlayFabEntity
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabEntity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabEntity, UnknownData_0S7R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabEntity, ID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabEntity, Type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabEntity, UnknownData_ZWRD, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabEntity, 0x0020);
		}

		// struct FPlayFabPlayerEntity : public FPlayFabEntity
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabPlayerEntity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabPlayerEntity, 0x0020);
		}

		// struct FPlayFabPlayer : public FPlayFabProfile
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabPlayer, Entity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabPlayer, Name, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabPlayer, 0x0060);
		}

		// struct FLeaderboardEntry
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__LeaderboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardEntry, Player, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardEntry, Position, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardEntry, Value, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardEntry, 0x0068);
		}

		// struct FPlayFabMatchmakingAttributes
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabMatchmakingAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingAttributes, Region, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingAttributes, UnknownData_AUOQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingAttributes, MMR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingAttributes, OpenSlots, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingAttributes, UnknownData_B5XN, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingAttributes, Pings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabMatchmakingAttributes, 0x0060);
		}

		// struct FPlayFabPort
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabPort)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabPort, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabPort, Num, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabPort, UnknownData_E8MN, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabPort, 0x0018);
		}

		// struct FPlayFabServerDetails
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabServerDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabServerDetails, IPV4Address, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabServerDetails, Ports, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabServerDetails, Region, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabServerDetails, UnknownData_VI0F, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabServerDetails, 0x0028);
		}

		// struct FPlayFabMatchmakingPlayer
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabMatchmakingPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingPlayer, Entity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingPlayer, TeamID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingPlayer, Attributes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabMatchmakingPlayer, 0x0090);
		}

		// struct FPlayFabMatchmakingMatch
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabMatchmakingMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, QueueName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, MatchId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, OwnerID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, GroupID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, Status, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, UnknownData_G3C5, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, Members, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, RegisteredMembers, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, ServerDetails, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, LocationPreference, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, Region, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatchmakingMatch, UnknownData_M7I8, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabMatchmakingMatch, 0x00A8);
		}

		// struct FPlayFabGameServer
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabGameServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, ServerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, State, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, UnknownData_R5X0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, LastHeartbeat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, Runtime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, ServerDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, Version, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, UnknownData_TIMX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, ServerName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, MapName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, GameMode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, QueueName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, Players, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, MaxPlayers, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, ReservedSlots, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, bIsModded, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, bIsOfficial, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, bAllowJoin, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, bIsPasswordProtected, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, UnknownData_4DQX, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, Mods, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, Pings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, Location, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, UnknownData_WWHX, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, AccountID, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGameServer, OperatingSystem, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabGameServer, 0x0100);
		}

		// struct FModFile
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__ModFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModFile, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModFile, FileSizeInMb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModFile, 0x0008);
		}

		// struct FModInfo
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__ModInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModInfo, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModInfo, DateUpdated, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModInfo, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModInfo, Summary, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModInfo, Thumbnail, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModInfo, SubmittedBy, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModInfo, ModFile, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModInfo, 0x0050);
		}

		// struct FItemStack
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__ItemStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemStack, ItemDefID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemStack, Quantity, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemStack, 0x0008);
		}

		// struct FPlayFabMatch
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatch, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatch, ServerId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatch, GameMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatch, Map, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatch, TopScore, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatch, AvgScore, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatch, Score, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatch, UnknownData_5SI9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatch, StartTimestamp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabMatch, EndTimestamp, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabMatch, 0x0060);
		}

		// struct FMountedMod
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__MountedMod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountedMod, PakPaths, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountedMod, Mod, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMountedMod, 0x0060);
		}

		// struct FInstalledMod
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__InstalledMod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstalledMod, Path, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstalledMod, Mod, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstalledMod, 0x0060);
		}

		// struct FQueuedModDownload
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__QueuedModDownload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedModDownload, Path, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedModDownload, Progress, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedModDownload, SizeInMb, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedModDownload, Mod, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedModDownload, 0x0068);
		}

		// struct FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRequest, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRequest, UnknownData_0W7I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRequest, MaxRetries, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRequest, RetryDelay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRequest, Retries, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRequest, Timestamp, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRequest, Priority, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRequest, bAllowMultiple, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRequest, UnknownData_PTFO, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabRequest, 0x0020);
		}

		// struct FAuthenticateSessionTicketPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__AuthenticateSessionTicketPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticateSessionTicketPlayFabRequest, Player, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticateSessionTicketPlayFabRequest, PlayerId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticateSessionTicketPlayFabRequest, UnknownData_W4TW, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticateSessionTicketPlayFabRequest, SessionTicket, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthenticateSessionTicketPlayFabRequest, 0x0098);
		}

		// struct FRefreshEntityTokenPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__RefreshEntityTokenPlayFabRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRefreshEntityTokenPlayFabRequest, 0x0020);
		}

		// struct FLeaveMatchmakingMatchPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__LeaveMatchmakingMatchPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaveMatchmakingMatchPlayFabRequest, Match, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaveMatchmakingMatchPlayFabRequest, 0x00C8);
		}

		// struct FJoinMatchmakingMatchPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__JoinMatchmakingMatchPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinMatchmakingMatchPlayFabRequest, Match, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinMatchmakingMatchPlayFabRequest, 0x00C8);
		}

		// struct FUpdateAccountInfoPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__UpdateAccountInfoPlayFabRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateAccountInfoPlayFabRequest, 0x0020);
		}

		// struct FDeleteGroupRolePlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__DeleteGroupRolePlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteGroupRolePlayFabRequest, GroupID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteGroupRolePlayFabRequest, RoleId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteGroupRolePlayFabRequest, 0x0040);
		}

		// struct FCreateGroupRolePlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__CreateGroupRolePlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGroupRolePlayFabRequest, GroupID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGroupRolePlayFabRequest, RoleId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGroupRolePlayFabRequest, RoleName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateGroupRolePlayFabRequest, 0x0050);
		}

		// struct FRemoveGroupMembersPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__RemoveGroupMembersPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveGroupMembersPlayFabRequest, GroupID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveGroupMembersPlayFabRequest, RoleId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveGroupMembersPlayFabRequest, MemberIDs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRemoveGroupMembersPlayFabRequest, 0x0050);
		}

		// struct FListGroupMembersPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__ListGroupMembersPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FListGroupMembersPlayFabRequest, GroupID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FListGroupMembersPlayFabRequest, 0x0030);
		}

		// struct FListGroupMembershipOpportunitiesPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__ListGroupMembershipOpportunitiesPlayFabRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FListGroupMembershipOpportunitiesPlayFabRequest, 0x0020);
		}

		// struct FListGroupMembershipPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__ListGroupMembershipPlayFabRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FListGroupMembershipPlayFabRequest, 0x0020);
		}

		// struct FGetGroupPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetGroupPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetGroupPlayFabRequest, GroupID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetGroupPlayFabRequest, GroupName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetGroupPlayFabRequest, 0x0040);
		}

		// struct FLeaveGroupPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__LeaveGroupPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaveGroupPlayFabRequest, GroupID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaveGroupPlayFabRequest, 0x0030);
		}

		// struct FJoinGroupPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__JoinGroupPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinGroupPlayFabRequest, GroupID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinGroupPlayFabRequest, 0x0030);
		}

		// struct FCreateGroupPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__CreateGroupPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGroupPlayFabRequest, GroupName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateGroupPlayFabRequest, 0x0030);
		}

		// struct FSetObjectsPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__SetObjectsPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetObjectsPlayFabRequest, EntityId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetObjectsPlayFabRequest, EntityType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetObjectsPlayFabRequest, UnknownData_8RBX, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSetObjectsPlayFabRequest, 0x0050);
		}

		// struct FGetObjectsPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetObjectsPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetObjectsPlayFabRequest, EntityId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetObjectsPlayFabRequest, EntityType, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetObjectsPlayFabRequest, 0x0040);
		}

		// struct FCancelServerBackfillTicketForPlayerPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__CancelServerBackfillTicketForPlayerPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCancelServerBackfillTicketForPlayerPlayFabRequest, QueueName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCancelServerBackfillTicketForPlayerPlayFabRequest, PlayerEntity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCancelServerBackfillTicketForPlayerPlayFabRequest, 0x0050);
		}

		// struct FGetServerBackfillTicketForPlayerPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetServerBackfillTicketForPlayerPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetServerBackfillTicketForPlayerPlayFabRequest, QueueName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetServerBackfillTicketForPlayerPlayFabRequest, PlayerEntity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetServerBackfillTicketForPlayerPlayFabRequest, 0x0050);
		}

		// struct FCancelServerBackfillTicketPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__CancelServerBackfillTicketPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCancelServerBackfillTicketPlayFabRequest, QueueName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCancelServerBackfillTicketPlayFabRequest, TicketId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCancelServerBackfillTicketPlayFabRequest, 0x0040);
		}

		// struct FGetServerBackfillTicketPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetServerBackfillTicketPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetServerBackfillTicketPlayFabRequest, QueueName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetServerBackfillTicketPlayFabRequest, TicketId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetServerBackfillTicketPlayFabRequest, 0x0040);
		}

		// struct FCreateServerBackfillTicketPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__CreateServerBackfillTicketPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateServerBackfillTicketPlayFabRequest, QueueName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateServerBackfillTicketPlayFabRequest, ServerDetails, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateServerBackfillTicketPlayFabRequest, Members, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateServerBackfillTicketPlayFabRequest, Timeout, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateServerBackfillTicketPlayFabRequest, UnknownData_G3FL, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateServerBackfillTicketPlayFabRequest, 0x0070);
		}

		// struct FCancelMatchmakingTicketPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__CancelMatchmakingTicketPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCancelMatchmakingTicketPlayFabRequest, QueueName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCancelMatchmakingTicketPlayFabRequest, 0x0030);
		}

		// struct FGetMatchmakingMatchPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetMatchmakingMatchPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetMatchmakingMatchPlayFabRequest, QueueName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetMatchmakingMatchPlayFabRequest, MatchId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetMatchmakingMatchPlayFabRequest, 0x0040);
		}

		// struct FGetMatchmakingTicketPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetMatchmakingTicketPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetMatchmakingTicketPlayFabRequest, QueueName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetMatchmakingTicketPlayFabRequest, TicketId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetMatchmakingTicketPlayFabRequest, 0x0040);
		}

		// struct FJoinMatchmakingTicketPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__JoinMatchmakingTicketPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinMatchmakingTicketPlayFabRequest, QueueName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinMatchmakingTicketPlayFabRequest, TicketId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinMatchmakingTicketPlayFabRequest, Attributes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinMatchmakingTicketPlayFabRequest, 0x00A0);
		}

		// struct FCreateMatchmakingTicketPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__CreateMatchmakingTicketPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingTicketPlayFabRequest, QueueName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingTicketPlayFabRequest, Attributes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingTicketPlayFabRequest, Members, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingTicketPlayFabRequest, Timeout, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingTicketPlayFabRequest, UnknownData_750J, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateMatchmakingTicketPlayFabRequest, 0x00A8);
		}

		// struct FReportMatchEndedPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__ReportMatchEndedPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportMatchEndedPlayFabRequest, Region, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportMatchEndedPlayFabRequest, Map, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportMatchEndedPlayFabRequest, PlayerSeconds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportMatchEndedPlayFabRequest, WinnerTeam, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReportMatchEndedPlayFabRequest, 0x0048);
		}

		// struct FReportTimeLeftPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__ReportTimeLeftPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportTimeLeftPlayFabRequest, Map, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportTimeLeftPlayFabRequest, PlayerCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportTimeLeftPlayFabRequest, UnknownData_W0OJ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportTimeLeftPlayFabRequest, TimeLeft, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReportTimeLeftPlayFabRequest, 0x0048);
		}

		// struct FClearRestrictionPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__ClearRestrictionPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClearRestrictionPlayFabRequest, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClearRestrictionPlayFabRequest, Restriction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClearRestrictionPlayFabRequest, UnknownData_VVMO, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClearRestrictionPlayFabRequest, 0x0038);
		}

		// struct FApplyRestrictionPlayFabRequest : public FClearRestrictionPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__ApplyRestrictionPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FApplyRestrictionPlayFabRequest, EndTimestamp, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FApplyRestrictionPlayFabRequest, 0x0040);
		}

		// struct FEndMatchPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__EndMatchPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndMatchPlayFabRequest, Match, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndMatchPlayFabRequest, 0x0080);
		}

		// struct FStartMatchPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__StartMatchPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchPlayFabRequest, Match, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartMatchPlayFabRequest, 0x0080);
		}

		// struct FRefreshGameServerPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__RefreshGameServerPlayFabRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRefreshGameServerPlayFabRequest, 0x0020);
		}

		// struct FUpdateGameServerPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__UpdateGameServerPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, ServerName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, MapName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, GameMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, QueueName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, Players, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, MaxPlayers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, ReservedSlots, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, RegionName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, BeaconListenPort, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, bAllowJoin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, bIsPasswordProtected, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, UnknownData_P6FX, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, Mods, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, Pings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, Location, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, OperatingSystem, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, DockerHost, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameServerPlayFabRequest, DockerServer, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateGameServerPlayFabRequest, 0x00F0);
		}

		// struct FRegisterGameServerPlayFabRequest : public FUpdateGameServerPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__RegisterGameServerPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegisterGameServerPlayFabRequest, PublicIP, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRegisterGameServerPlayFabRequest, 0x0100);
		}

		// struct FAbortMatchPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__AbortMatchPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbortMatchPlayFabRequest, ServerId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbortMatchPlayFabRequest, MatchId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAbortMatchPlayFabRequest, 0x0040);
		}

		// struct FGetMatchRewardsPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetMatchRewardsPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetMatchRewardsPlayFabRequest, ServerId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetMatchRewardsPlayFabRequest, MatchId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetMatchRewardsPlayFabRequest, 0x0040);
		}

		// struct FGetLeaderboardPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetLeaderboardPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetLeaderboardPlayFabRequest, LeaderboardName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetLeaderboardPlayFabRequest, 0x0030);
		}

		// struct FGetServerInfoPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetServerInfoPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetServerInfoPlayFabRequest, ServerId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetServerInfoPlayFabRequest, 0x0030);
		}

		// struct FGetGameServersPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetGameServersPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetGameServersPlayFabRequest, IncludesFilter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetGameServersPlayFabRequest, ExcludesFilter, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetGameServersPlayFabRequest, 0x00C0);
		}

		// struct FGrantItemsPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GrantItemsPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrantItemsPlayFabRequest, ItemIds, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrantItemsPlayFabRequest, 0x0030);
		}

		// struct FUnlockItemsPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__UnlockItemsPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockItemsPlayFabRequest, ItemIds, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUnlockItemsPlayFabRequest, 0x0030);
		}

		// struct FImportInventoryPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__ImportInventoryPlayFabRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportInventoryPlayFabRequest, 0x0020);
		}

		// struct FGetPlayFabIDsFromEpicIDsPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetPlayFabIDsFromEpicIDsPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetPlayFabIDsFromEpicIDsPlayFabRequest, AccountIDs, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetPlayFabIDsFromEpicIDsPlayFabRequest, 0x0030);
		}

		// struct FGetPlayFabIDsFromSteamIDsPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetPlayFabIDsFromSteamIDsPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetPlayFabIDsFromSteamIDsPlayFabRequest, SteamIDs, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetPlayFabIDsFromSteamIDsPlayFabRequest, 0x0030);
		}

		// struct FGetCatalogItemsPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetCatalogItemsPlayFabRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetCatalogItemsPlayFabRequest, 0x0020);
		}

		// struct FPlayFabStat
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabStat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabStat, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabStat, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabStat, Version, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabStat, bIsDirty, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabStat, UnknownData_TWWL, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabStat, 0x0020);
		}

		// struct FUpdatePlayerStatsPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__UpdatePlayerStatsPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdatePlayerStatsPlayFabRequest, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdatePlayerStatsPlayFabRequest, Stats, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdatePlayerStatsPlayFabRequest, 0x0080);
		}

		// struct FGetPlayerStatsPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetPlayerStatsPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetPlayerStatsPlayFabRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetPlayerStatsPlayFabRequest, 0x0030);
		}

		// struct FGetPlayerPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetPlayerPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetPlayerPlayFabRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetPlayerPlayFabRequest, 0x0030);
		}

		// struct FGetPlayerInventoryPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetPlayerInventoryPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetPlayerInventoryPlayFabRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetPlayerInventoryPlayFabRequest, 0x0030);
		}

		// struct FGetPlayerDataPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetPlayerDataPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetPlayerDataPlayFabRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetPlayerDataPlayFabRequest, 0x0030);
		}

		// struct FGetTitleInternalDataPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetTitleInternalDataPlayFabRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetTitleInternalDataPlayFabRequest, 0x0020);
		}

		// struct FGetTitleDataPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GetTitleDataPlayFabRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetTitleDataPlayFabRequest, 0x0020);
		}

		// struct FUpdateTimeDriftPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__UpdateTimeDriftPlayFabRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateTimeDriftPlayFabRequest, 0x0020);
		}

		// struct FLoginWithServerPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__LoginWithServerPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoginWithServerPlayFabRequest, UniqueId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoginWithServerPlayFabRequest, 0x0030);
		}

		// struct FLoginWithEpicPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__LoginWithEpicPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoginWithEpicPlayFabRequest, AccountID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoginWithEpicPlayFabRequest, AuthToken, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoginWithEpicPlayFabRequest, 0x0040);
		}

		// struct FLoginWithSteamPlayFabRequest : public FPlayFabRequest
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__LoginWithSteamPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoginWithSteamPlayFabRequest, AuthTicket, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoginWithSteamPlayFabRequest, 0x0030);
		}

		// struct FGroupInvite
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__GroupInvite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupInvite, GroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupInvite, RoleId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupInvite, InvitedById, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupInvite, InvitedId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupInvite, Expires, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupInvite, 0x0048);
		}

		// struct FPlayFabBackfillTicket
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabBackfillTicket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBackfillTicket, QueueName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBackfillTicket, TicketId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBackfillTicket, MatchId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBackfillTicket, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBackfillTicket, UnknownData_NJNA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBackfillTicket, CreationTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBackfillTicket, Timeout, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBackfillTicket, UnknownData_GOUA, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBackfillTicket, Members, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBackfillTicket, CancellationReason, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBackfillTicket, ServerDetails, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabBackfillTicket, 0x0090);
		}

		// struct FReward
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__Reward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReward, PlayFabId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReward, Gold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReward, XP, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReward, 0x0018);
		}

		// struct FPlayFabServerInfo
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabServerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabServerInfo, ServerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabServerInfo, Mods, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabServerInfo, 0x0020);
		}

		// struct FPlayFabStats
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabStats, Stats, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabStats, 0x0050);
		}

		// struct FPlayFabPlayerData
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabPlayerData, bImportedInventory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabPlayerData, UnknownData_FYP4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabPlayerData, Matches, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabPlayerData, 0x0018);
		}

		// struct FPlayFabTitleInternalData
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabTitleInternalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabTitleInternalData, OfficialAdmins, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabTitleInternalData, DevelopmentAdmins, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabTitleInternalData, 0x0020);
		}

		// struct FPlayFabRewardSettings
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabRewardSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRewardSettings, XPBaseValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRewardSettings, XPPlaytimeFactor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRewardSettings, XPAvgScoreFactor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRewardSettings, XPTopScoreFactor, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRewardSettings, GoldBaseValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRewardSettings, GoldPlaytimeFactor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRewardSettings, GoldAvgScoreFactor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRewardSettings, GoldTopScoreFactor, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRewardSettings, PlacementGoldFirst, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRewardSettings, PlacementGoldSecond, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRewardSettings, PlacementGoldScoreFactor, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabRewardSettings, 0x002C);
		}

		// struct FPlayFabTitleData
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabTitleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabTitleData, BlacklistedServers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabTitleData, ProfaneWords, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabTitleData, IngameEvent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabTitleData, UnknownData_SSZ3, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabTitleData, RewardSettings, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabTitleData, GlobalBannedPlayers, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabTitleData, GlobalMutedPlayers, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabTitleData, OfficialBannedPlayers, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabTitleData, OfficialMutedPlayers, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabTitleData, 0x0190);
		}

		// struct FPlayFabGroupEntity : public FPlayFabEntity
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabGroupEntity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabGroupEntity, 0x0020);
		}

		// struct FPlayFabGroup
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGroup, Entity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGroup, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGroup, CreationTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGroup, AdminRoleId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGroup, MemberRoleId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabGroup, Roles, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabGroup, 0x0068);
		}

		// struct FPlayFabServer : public FPlayFabProfile
		TEST_METHOD(ScriptStruct__MordhauOnlineSubsystem__PlayFabServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabServer, Entity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabServer, 0x0050);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_X240, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_OZON, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__TriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// struct FAdaptorPolygon2Group
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon2Group)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, UnknownData_AKML, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon2Group, 0x0048);
		}

		// struct FAdaptorTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorTriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorTriangleID, 0x0004);
		}

		// struct FAdaptorPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, UnknownData_7JTW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon, 0x0018);
		}

		// struct FPolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// struct FMeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_J42F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// struct FMeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_QAFH, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// struct FMeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// struct FPolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_OH95, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// struct FVertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// struct FVertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// struct FVertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// struct FChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_7GTZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// struct FVertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// struct FVertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_SOU5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// struct FAttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_IVFS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// struct FAttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_NUKM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// struct FAttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_QO9I, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// struct FVertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// struct FPolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_RY28, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// struct FVertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// struct FPolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_U2GY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_SWHJ, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0020);
		}

		// struct FEdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_SQXC, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0020);
		}

		// struct FVertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_IVN3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_BY8V, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// struct FVertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_W5DG, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// struct FSubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_K59M, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// struct FSubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// struct FSubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// struct FSubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// struct FSubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// struct FRenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_7EQA, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// struct FRenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_KGVO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// struct FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_9KFU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, GeometryCollectionCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, StartFrameOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, EndFrameOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, PlayRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_B5YB, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionParams, 0x0030);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplateParameters : public FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionStartTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionEndTime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, 0x0038);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplate, 0x0058);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_8SI9, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_ZMYT, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FModioError
		TEST_METHOD(ScriptStruct__modio__ModioError)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioError, Code, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioError, UnknownData_4A05, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioError, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioError, Errors, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioError, 0x0028);
		}

		// struct FModioResponse
		TEST_METHOD(ScriptStruct__modio__ModioResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioResponse, Code, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioResponse, ResultCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioResponse, ResultLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioResponse, ResultOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioResponse, ResultTotal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioResponse, ResultCached, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioResponse, UnknownData_SUCQ, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioResponse, Error, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioResponse, 0x0040);
		}

		// struct FModioLogo
		TEST_METHOD(ScriptStruct__modio__ModioLogo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioLogo, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioLogo, Original, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioLogo, Thumb320x180, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioLogo, Thumb640x360, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioLogo, Thumb1280x720, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioLogo, 0x0050);
		}

		// struct FModioAvatar
		TEST_METHOD(ScriptStruct__modio__ModioAvatar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioAvatar, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioAvatar, Original, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioAvatar, Thumb50x50, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioAvatar, Thumb100x100, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioAvatar, 0x0040);
		}

		// struct FModioFilehash
		TEST_METHOD(ScriptStruct__modio__ModioFilehash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioFilehash, Md5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioFilehash, 0x0010);
		}

		// struct FModioDownload
		TEST_METHOD(ScriptStruct__modio__ModioDownload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioDownload, DateExpires, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioDownload, UnknownData_SZJX, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioDownload, BinaryUrl, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioDownload, 0x0018);
		}

		// struct FModioImage
		TEST_METHOD(ScriptStruct__modio__ModioImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioImage, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioImage, Original, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioImage, Thumb320x180, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioImage, 0x0030);
		}

		// struct FModioStats
		TEST_METHOD(ScriptStruct__modio__ModioStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, ModId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, PopularityRankPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, PopularityRankTotalMods, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, DownloadsTotal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, SubscribersTotal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, RatingsTotal, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, RatingsPositive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, RatingsNegative, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, RatingsPercentagePositive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, DateExpires, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, RatingsWeightedAggregate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, UnknownData_QZRK, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioStats, RatingsDisplayText, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioStats, 0x0040);
		}

		// struct FModioModTag
		TEST_METHOD(ScriptStruct__modio__ModioModTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModTag, DateAdded, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModTag, UnknownData_HTWY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModTag, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioModTag, 0x0018);
		}

		// struct FModioMetadataKVP
		TEST_METHOD(ScriptStruct__modio__ModioMetadataKVP)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMetadataKVP, Metakey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMetadataKVP, Metavalue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioMetadataKVP, 0x0020);
		}

		// struct FModioUser
		TEST_METHOD(ScriptStruct__modio__ModioUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUser, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUser, DateOnline, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUser, Username, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUser, NameId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUser, Timezone, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUser, Language, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUser, ProfileUrl, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUser, Avatar, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioUser, 0x0098);
		}

		// struct FModioModfile
		TEST_METHOD(ScriptStruct__modio__ModioModfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, ModId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, VirusStats, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, VirusPositive, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, DateAdded, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, DateScanned, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, Filesize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, Filename, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, Version, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, VirustotalHash, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, Changelog, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, MetadataBlob, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, Filehash, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfile, Download, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioModfile, 0x0098);
		}

		// struct FModioMedia
		TEST_METHOD(ScriptStruct__modio__ModioMedia)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMedia, Youtube, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMedia, Sketchfab, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMedia, Images, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioMedia, 0x0030);
		}

		// struct FModioMod
		TEST_METHOD(ScriptStruct__modio__ModioMod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, GameId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, Status, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, Visible, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, MaturityOption, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, DateAdded, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, DateUpdated, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, DateLive, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, HomepageUrl, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, NameId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, Summary, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, DescriptionPlainText, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, MetadataBlob, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, ProfileUrl, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, Logo, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, SubmittedBy, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, ModFile, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, Media, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, Stats, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, Tags, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioMod, MetadataKVP, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioMod, 0x02B0);
		}

		// struct FModioModDependency
		TEST_METHOD(ScriptStruct__modio__ModioModDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModDependency, ModId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModDependency, DateAdded, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioModDependency, 0x0008);
		}

		// struct FModioIcon
		TEST_METHOD(ScriptStruct__modio__ModioIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioIcon, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioIcon, Original, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioIcon, Thumb64x64, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioIcon, Thumb128x128, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioIcon, Thumb256x256, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioIcon, 0x0050);
		}

		// struct FModioHeaderImage
		TEST_METHOD(ScriptStruct__modio__ModioHeaderImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioHeaderImage, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioHeaderImage, Original, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioHeaderImage, 0x0020);
		}

		// struct FModioGameTagOption
		TEST_METHOD(ScriptStruct__modio__ModioGameTagOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGameTagOption, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGameTagOption, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGameTagOption, Hidden, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGameTagOption, UnknownData_HFAM, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGameTagOption, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioGameTagOption, 0x0038);
		}

		// struct FModioGame
		TEST_METHOD(ScriptStruct__modio__ModioGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, Status, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, SubmittedBy, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, DateAdded, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, DateUpdated, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, DateLive, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, PresentationOption, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, SubmissionOption, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, CurationOption, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, CommunityOptions, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, RevenueOptions, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, ApiAccessOptions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, MaturityOptions, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, UGCName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, Icon, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, Logo, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, Header, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, Name, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, NameId, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, Summary, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, Instructions, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, InstructionsUrl, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, ProfileUrl, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioGame, TagOptions, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioGame, 0x0208);
		}

		// struct FModioUserEvent
		TEST_METHOD(ScriptStruct__modio__ModioUserEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUserEvent, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUserEvent, GameId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUserEvent, ModId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUserEvent, UserId, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUserEvent, EventType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioUserEvent, DateAdded, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioUserEvent, 0x0018);
		}

		// struct FModioRating
		TEST_METHOD(ScriptStruct__modio__ModioRating)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioRating, GameId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioRating, ModId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioRating, Rating, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioRating, DateAdded, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioRating, 0x0010);
		}

		// struct FModioModEvent
		TEST_METHOD(ScriptStruct__modio__ModioModEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEvent, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEvent, ModId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEvent, UserId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEvent, EventType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEvent, DateAdded, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioModEvent, 0x0014);
		}

		// struct FModioFieldFilterCreator
		TEST_METHOD(ScriptStruct__modio__ModioFieldFilterCreator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioFieldFilterCreator, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioFieldFilterCreator, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioFieldFilterCreator, UnknownData_Q47L, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioFieldFilterCreator, Value, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioFieldFilterCreator, 0x0028);
		}

		// struct FModioSortCreator
		TEST_METHOD(ScriptStruct__modio__ModioSortCreator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioSortCreator, ModSortType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioSortCreator, Ascending, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioSortCreator, 0x0002);
		}

		// struct FModioFilterCreator
		TEST_METHOD(ScriptStruct__modio__ModioFilterCreator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioFilterCreator, Sort, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioFilterCreator, UnknownData_YFQ9, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioFilterCreator, FullTextSearch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioFilterCreator, FieldFilters, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioFilterCreator, 0x0028);
		}

		// struct FModioInstalledMod
		TEST_METHOD(ScriptStruct__modio__ModioInstalledMod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioInstalledMod, Path, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioInstalledMod, Mod, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioInstalledMod, 0x02C0);
		}

		// struct FModioModCreator
		TEST_METHOD(ScriptStruct__modio__ModioModCreator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModCreator, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModCreator, LogoPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModCreator, Summary, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModCreator, NameId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModCreator, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModCreator, HomepageUrl, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModCreator, MetadataBlob, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModCreator, Tags, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModCreator, Visible, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModCreator, UnknownData_HNRH, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModCreator, MaturityOption, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioModCreator, 0x0088);
		}

		// struct FModioModEditor
		TEST_METHOD(ScriptStruct__modio__ModioModEditor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEditor, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEditor, Summary, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEditor, NameId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEditor, Description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEditor, HomepageUrl, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEditor, MetadataBlob, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEditor, Visible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEditor, UnknownData_1XVN, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModEditor, MaturityOption, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioModEditor, 0x0068);
		}

		// struct FModioModfileCreator
		TEST_METHOD(ScriptStruct__modio__ModioModfileCreator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfileCreator, Path, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfileCreator, Version, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfileCreator, Changelog, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfileCreator, Active, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfileCreator, UnknownData_D1ZZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioModfileCreator, Filehash, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioModfileCreator, 0x0048);
		}

		// struct FModioQueuedModDownload
		TEST_METHOD(ScriptStruct__modio__ModioQueuedModDownload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioQueuedModDownload, Path, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioQueuedModDownload, CurrentProgress, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioQueuedModDownload, TotalSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioQueuedModDownload, Mod, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioQueuedModDownload, 0x02D0);
		}

		// struct FModioQueuedModfileUpload
		TEST_METHOD(ScriptStruct__modio__ModioQueuedModfileUpload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioQueuedModfileUpload, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioQueuedModfileUpload, ModId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioQueuedModfileUpload, CurrentProgress, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioQueuedModfileUpload, TotalSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModioQueuedModfileUpload, Path, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModioQueuedModfileUpload, 0x0020);
		}

		// struct FInt64
		TEST_METHOD(ScriptStruct__Int64__Int64)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt64, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt64, 0x0008);
		}

		// struct FMagicLeapEyeBlinkState
		TEST_METHOD(ScriptStruct__MagicLeapEyeTracker__MagicLeapEyeBlinkState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, LeftEyeBlinked, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, RightEyeBlinked, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapEyeBlinkState, 0x0002);
		}

		// struct FNavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_FI4D, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// struct FNavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_6LGF, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// struct FSupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_XKRD, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// struct FNavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// struct FNavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_PMH1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// struct FNavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_6MC0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__NavigationSystem__NavLinkCustomInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, NavLinkUserId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, UnknownData_MHWM, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavLinkCustomInstanceData, 0x0060);
		}

		// struct FRecastNavMeshGenerationProperties
		TEST_METHOD(ScriptStruct__NavigationSystem__RecastNavMeshGenerationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TilePoolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileSizeUU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxSlope, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxStepHeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MinRegionArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MergeRegionSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MaxSimplificationError, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileNumberHardLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionPartitioning, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerPartitioning, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_FXI6, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionChunkSplits, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerChunkSplits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_6Z6W, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecastNavMeshGenerationProperties, 0x0040);
		}

		// struct FNavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// struct FLiveLinkSourceBufferManagementSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceBufferManagementSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidEngineTimeEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_Q8DZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidEngineTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_8TLC, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeClockOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeFrameRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bGenerateSubFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bUseTimecodeSmoothLatest, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_RGZN, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, SourceTimecodeFrameRate, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidTimecodeFrameEnabled, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_73Z9, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidTimecodeFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeFrameOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeClockOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, LatestOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, MaxNumberOfFrameToBuffered, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bKeepAtLeastOneFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_LMM2, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceBufferManagementSettings, 0x0050);
		}

		// struct FLiveLinkCurveConversionSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveConversionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveConversionSettings, CurveConversionAssetMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveConversionSettings, 0x0050);
		}

		// struct FLiveLinkSubjectName
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectName, 0x0008);
		}

		// struct FLiveLinkSourceHandle
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceHandle, UnknownData_JL24, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceHandle, 0x0018);
		}

		// struct FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseBlueprintData, UnknownData_ZKIH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseBlueprintData, 0x0008);
		}

		// struct FSubjectFrameHandle : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectFrameHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectFrameHandle, UnknownData_QPZP, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectFrameHandle, 0x0018);
		}

		// struct FLiveLinkTransform
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransform, UnknownData_23SM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransform, 0x0020);
		}

		// struct FCachedSubjectFrame
		TEST_METHOD(ScriptStruct__LiveLinkInterface__CachedSubjectFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSubjectFrame, UnknownData_32PD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedSubjectFrame, 0x0160);
		}

		// struct FSubjectMetadata
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, StringMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneTimecode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneFramerate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, UnknownData_FWRU, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectMetadata, 0x0070);
		}

		// struct FLiveLinkWorldTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkWorldTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkWorldTime, 0x0010);
		}

		// struct FLiveLinkMetaData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, StringMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, SceneTime, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkMetaData, 0x0060);
		}

		// struct FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, MetaData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, PropertyValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, UnknownData_PFUO, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseFrameData, 0x00A0);
		}

		// struct FLiveLinkAnimationFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkAnimationFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkAnimationFrameData, Transforms, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkAnimationFrameData, 0x00B0);
		}

		// struct FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseStaticData, PropertyNames, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseStaticData, 0x0010);
		}

		// struct FLiveLinkSkeletonStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSkeletonStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneParents, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSkeletonStaticData, 0x0030);
		}

		// struct FLiveLinkBasicBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBasicBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, FrameData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBasicBlueprintData, 0x00B8);
		}

		// struct FLiveLinkTransformStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformStaticData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformStaticData, 0x0010);
		}

		// struct FLiveLinkCameraStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFieldOfViewSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsAspectRatioSupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocalLengthSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsProjectionModeSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsApertureSupported, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocusDistanceSupported, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, UnknownData_ZV6J, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraStaticData, 0x0020);
		}

		// struct FLiveLinkTransformFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformFrameData, Transform, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformFrameData, 0x00D0);
		}

		// struct FLiveLinkCameraFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FieldOfView, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, AspectRatio, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocalLength, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, Aperture, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocusDistance, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, ProjectionMode, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, UnknownData_GF0J, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraFrameData, 0x00F0);
		}

		// struct FLiveLinkCameraBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, UnknownData_IRZ5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraBlueprintData, 0x0120);
		}

		// struct FLiveLinkLightStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsTemperatureSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsIntensitySupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsLightColorSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsInnerConeAngleSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsOuterConeAngleSupported, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsAttenuationRadiusSupported, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceLenghtSupported, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceRadiusSupported, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSoftSourceRadiusSupported, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, UnknownData_XSX2, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightStaticData, 0x0020);
		}

		// struct FLiveLinkLightFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, Temperature, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, Intensity, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, LightColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, InnerConeAngle, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, OuterConeAngle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, AttenuationRadius, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceRadius, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SoftSourceRadius, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceLength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, UnknownData_KUL3, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightFrameData, 0x0100);
		}

		// struct FLiveLinkLightBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, UnknownData_PT9Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightBlueprintData, 0x0130);
		}

		// struct FLiveLinkSubjectKey
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, Source, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, SubjectName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectKey, 0x0018);
		}

		// struct FLiveLinkSubjectPreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Role, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Settings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, VirtualSubject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, bEnabled, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, UnknownData_RJ9D, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectPreset, 0x0038);
		}

		// struct FLiveLinkSourcePreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourcePreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, Settings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, SourceType, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourcePreset, 0x0030);
		}

		// struct FLiveLinkRefSkeleton
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkRefSkeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneParents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkRefSkeleton, 0x0020);
		}

		// struct FLiveLinkSubjectRepresentation
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectRepresentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, Subject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, Role, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectRepresentation, 0x0010);
		}

		// struct FLiveLinkInterpolationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkInterpolationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, bUseInterpolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, UnknownData_R65B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, InterpolationOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkInterpolationSettings, 0x0008);
		}

		// struct FLiveLinkTimeSynchronizationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeSynchronizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeSynchronizationSettings, 0x000C);
		}

		// struct FLiveLinkSourceDebugInfo
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SubjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SnapshotIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, NumberOfBufferAtSnapshot, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceDebugInfo, 0x0010);
		}

		// struct FLiveLinkTransformBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, UnknownData_IRR7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, FrameData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformBlueprintData, 0x00F0);
		}

		// struct FLiveLinkCurveElement
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveElement, 0x000C);
		}

		// struct FLiveLinkFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, CurveElements, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, WorldTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, MetaData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameData, 0x0090);
		}

		// struct FLiveLinkFrameRate : public FFrameRate
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameRate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameRate, 0x0008);
		}

		// struct FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode_Base_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, Seconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, Frames, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, FrameRate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode_Base_DEPRECATED, 0x0010);
		}

		// struct FLiveLinkTimeCode : public FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode, 0x0010);
		}

		// struct FLiveLinkTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, SceneTime, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTime, 0x0018);
		}

		// struct FS_MainMenuNav
		TEST_METHOD(UserDefinedStruct__S_MainMenuNav__S_MainMenuNav)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_MainMenuNav, MainNavTab_4_3022F54544F31998755517B4FF5487B5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_MainMenuNav, SubNavTab_6_52399BE24410CC2E1F99F89A7D8484D1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_MainMenuNav, Onlyrelevantin_game_11_3BD3347248CA199442141696C699B1D4, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_MainMenuNav, 0x0019);
		}

		// struct FS_ChatMessage
		TEST_METHOD(UserDefinedStruct__S_ChatMessage__S_ChatMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ChatMessage, Message_3_4B10C631480E75A57ABB87B14A801CCD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ChatMessage, Player_7_3A373DDE43E2750E33C0E9BDF93D9427, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ChatMessage, Prefix_8_D025927646148CE4C4DDFC8B2ABD908B, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_ChatMessage, 0x0038);
		}

		// struct FWebJSCallbackBase
		TEST_METHOD(ScriptStruct__WebBrowser__WebJSCallbackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWebJSCallbackBase, UnknownData_LSSU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWebJSCallbackBase, 0x0020);
		}

		// struct FWebJSResponse : public FWebJSCallbackBase
		TEST_METHOD(ScriptStruct__WebBrowser__WebJSResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWebJSResponse, 0x0020);
		}

		// struct FWebJSFunction : public FWebJSCallbackBase
		TEST_METHOD(ScriptStruct__WebBrowser__WebJSFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWebJSFunction, 0x0020);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_WJNJ, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0024);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FAnimationEventBinding
		TEST_METHOD(ScriptStruct__UMG__AnimationEventBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Delegate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, AnimationEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_0864, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UserTag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_DR65, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationEventBinding, 0x0028);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_BNP4, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FUserWidgetPool
		TEST_METHOD(ScriptStruct__UMG__UserWidgetPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, ActiveWidgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, InactiveWidgets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, UnknownData_X6V7, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserWidgetPool, 0x0080);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FBlueprintWidgetAnimationDelegateBinding
		TEST_METHOD(ScriptStruct__UMG__BlueprintWidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UnknownData_TRHB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, AnimationToBind, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UserTag, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintWidgetAnimationDelegateBinding, 0x001C);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_TK8E, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0050);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_R47N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0024);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_2LS1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_7L3E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FMovieScene2DTransformSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Translation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Rotation, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Scale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Shear, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, BlendType, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, UnknownData_MPRZ, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Mask, 0x04AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformSectionTemplate, 0x04B0);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_OYFX, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0090);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x0270);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__UMG__WidgetComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetComponentInstanceData, UnknownData_YA8P, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetComponentInstanceData, 0x00B8);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x004C);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Box
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, UnknownData_O5HY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, HalfExtents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, BoneIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Box, 0x0030);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, SurfacePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_JJDP, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0028);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Boxes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0040);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_8N4Z, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_VA53, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, RemovedPartyMembers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0050);
		}

		// struct FSpectatorReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__SpectatorReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, SpectatorId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, Spectator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpectatorReservation, 0x0078);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_V294, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x0108);
		}

		// struct FInAppPurchaseReceiptInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo2, 0x0030);
		}

		// struct FOnlineProxyStoreOffer
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__OnlineProxyStoreOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, OfferId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, LongDescription, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPriceText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_MB8L, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, PriceText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, NumericPrice, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_HC63, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, CurrencyCode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ReleaseDate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ExpirationDate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DiscountType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_RO4D, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DynamicFields, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnlineProxyStoreOffer, 0x0110);
		}

		// struct FInAppPurchaseRestoreInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseRestoreInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo2, 0x0030);
		}

		// struct FInAppPurchaseReceiptInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, UnknownData_7OAC, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, ReceiptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DynamicFields, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo2, 0x00F8);
		}

		// struct FInAppPurchaseProductRequest2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductRequest2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, UnknownData_U5B1, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest2, 0x0018);
		}

		// struct FSubmixEffectDynamicProcessorFilterSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicProcessorFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, UnknownData_107W, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, Cutoff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, GainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicProcessorFilterSettings, 0x000C);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LinkMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_MISJ, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ExternalSubmix, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_P890, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyGainDb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyHighshelf, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyLowshelf, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_2TTO, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0050);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_L0NC, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0034);
		}

		// struct FSubmixEffectReverbFastSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbFastSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, bBypass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, UnknownData_622M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Density, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Diffusion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Gain, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, GainHF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DecayTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DecayHFRatio, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, ReflectionsGain, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, ReflectionsDelay, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, LateGain, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, LateDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, AirAbsorptionGainHF, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, WetLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DryLevel, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbFastSettings, 0x0038);
		}

		// struct FSynth1PatchCable
		TEST_METHOD(ScriptStruct__Synthesis__Synth1PatchCable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Destination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, UnknownData_LNF3, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth1PatchCable, 0x0008);
		}

		// struct FEpicSynth1Patch
		TEST_METHOD(ScriptStruct__Synthesis__EpicSynth1Patch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, UnknownData_L9X9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchCables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEpicSynth1Patch, 0x0018);
		}

		// struct FModularSynthPreset : public FTableRowBase
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_SNX5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_78YJ, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Gain, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Octave, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Semitones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Cents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1PulseWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Type, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_H2BX, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Gain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Octave, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Semitones, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Cents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2PulseWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Portamento, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_604J, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Pan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Frequency, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Gain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Type, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Mode, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1PatchType, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_E6UG, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Frequency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Gain, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Mode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2PatchType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_UXQN, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, GainDb, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, AttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, DecayTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, SustainGain, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ReleaseTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvPatchType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvBiasPatchType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_PDGM, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_6YXD, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDepth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeAttackTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDecayTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeSustainGain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeReleaseTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_88RO, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterFrequency, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterAlgorithm, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_2KYL, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_JXDD, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_7SEK, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayFeedback, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayWetlevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayRatio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_X5E4, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusDepth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFeedback, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFrequency, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_6KQ3, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Patches, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPreset, 0x00E0);
		}

		// struct FModularSynthPresetBankEntry
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPresetBankEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, PresetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, Preset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPresetBankEntry, 0x00F0);
		}

		// struct FSourceEffectBitCrusherSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedSampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedBits, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherSettings, 0x0008);
		}

		// struct FSourceEffectChorusSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Spread, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusSettings, 0x0018);
		}

		// struct FSourceEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_JZSO, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_ZH3M, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSourceEffectEnvelopeFollowerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEnvelopeFollowerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, AttackTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, ReleaseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, PeakMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, bIsAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, UnknownData_60YF, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEnvelopeFollowerSettings, 0x000C);
		}

		// struct FSourceEffectEQBand
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, UnknownData_4U4C, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQBand, 0x0010);
		}

		// struct FSourceEffectEQSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQSettings, 0x0010);
		}

		// struct FSourceEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterCircuit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_SUF8, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, CutoffFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterSettings, 0x000C);
		}

		// struct FSourceEffectFoldbackDistortionSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFoldbackDistortionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, InputGainDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, ThresholdDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, OutputGainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFoldbackDistortionSettings, 0x000C);
		}

		// struct FSourceEffectMidSideSpreaderSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectMidSideSpreaderSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, InputMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_Y28U, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, SpreadAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, OutputMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, bEqualPower, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_XLQ3, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectMidSideSpreaderSettings, 0x000C);
		}

		// struct FSourceEffectPannerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPannerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Spread, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Pan, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPannerSettings, 0x0008);
		}

		// struct FSourceEffectPhaserSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPhaserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, WetLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, LFOType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UseQuadraturePhase, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UnknownData_WU93, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPhaserSettings, 0x0010);
		}

		// struct FSourceEffectRingModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectRingModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, ModulatorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_FJ1R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Depth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, DryLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectRingModulationSettings, 0x0014);
		}

		// struct FSourceEffectSimpleDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectSimpleDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, SpeedOfSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DelayAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DryAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, WetAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, Feedback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, UnknownData_6JIO, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectSimpleDelaySettings, 0x0018);
		}

		// struct FSourceEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_75MX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectStereoDelaySettings, 0x0014);
		}

		// struct FSourceEffectWaveShaperSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectWaveShaperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, OutputGainDb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectWaveShaperSettings, 0x0008);
		}

		// struct FSubmixEffectConvolutionReverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectConvolutionReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, NormalizationVolumeDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bInvertRearChannelBleedPhase, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bSurroundRearChannelFlip, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_9TLI, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, ImpulseResponse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, AllowHArdwareAcceleration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_5PAN, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectConvolutionReverbSettings, 0x0020);
		}

		// struct FSubmixEffectDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, DelayLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDelaySettings, 0x000C);
		}

		// struct FSubmixEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterAlgorithm, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, UnknownData_3AST, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFilterSettings, 0x000C);
		}

		// struct FSubmixEffectFlexiverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFlexiverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, PreDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, DecayTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, RoomDampening, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, Complexity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFlexiverbSettings, 0x0010);
		}

		// struct FTapDelayInfo
		TEST_METHOD(ScriptStruct__Synthesis__TapDelayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapLineMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, UnknownData_HWY1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, DelayLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, OutputChannel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, PanInDegrees, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapId, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTapDelayInfo, 0x0018);
		}

		// struct FSubmixEffectTapDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectTapDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, Taps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectTapDelaySettings, 0x0018);
		}

		// struct FSynth2DSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__Synth2DSliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalThumbImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledThumbImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledBarImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BackgroundImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BarThickness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, UnknownData_W0JZ, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth2DSliderStyle, 0x02B8);
		}

		// struct FSynthKnobStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthKnobStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnob, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnobOverlay, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnob, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnobOverlay, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MinValueAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MaxValueAngle, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, KnobSize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, UnknownData_OG5I, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthKnobStyle, 0x0238);
		}

		// struct FPatchId
		TEST_METHOD(ScriptStruct__Synthesis__PatchId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatchId, ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatchId, 0x0004);
		}

		// struct FSynthSlateStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthSlateStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, SizeType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, ColorStyle, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, UnknownData_7YEM, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthSlateStyle, 0x0010);
		}

		// struct FRconParameter
		TEST_METHOD(ScriptStruct__Mordhau__RconParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconParameter, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconParameter, ParameterDescription, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconParameter, bRequiredParameter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconParameter, ExpectedJsonType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconParameter, UnknownData_9RK9, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRconParameter, 0x0028);
		}

		// struct FRconCommandInfo
		TEST_METHOD(ScriptStruct__Mordhau__RconCommandInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconCommandInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconCommandInfo, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconCommandInfo, Author, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconCommandInfo, Aliases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconCommandInfo, Parameters, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRconCommandInfo, 0x0050);
		}

		// struct FPrePhysTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Mordhau__PrePhysTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrePhysTickFunction, UnknownData_ZN32, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrePhysTickFunction, 0x0030);
		}

		// struct FSphericalLimbBounds
		TEST_METHOD(ScriptStruct__Mordhau__SphericalLimbBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalLimbBounds, StartSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalLimbBounds, EndSocket, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalLimbBounds, Radius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalLimbBounds, AttachSocket, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalLimbBounds, BoneStartCached, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalLimbBounds, BoneEndCached, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSphericalLimbBounds, 0x0034);
		}

		// struct FAnimNodePackedDismemberment
		TEST_METHOD(ScriptStruct__Mordhau__AnimNodePackedDismemberment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNodePackedDismemberment, DismemberedBonesIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNodePackedDismemberment, 0x0010);
		}

		// struct FDamageRecord
		TEST_METHOD(ScriptStruct__Mordhau__DamageRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageRecord, Source, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageRecord, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageRecord, Damage, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageRecord, 0x0010);
		}

		// struct FNetBlock
		TEST_METHOD(ScriptStruct__Mordhau__NetBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetBlock, BlockedReason, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetBlock, Flags, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetBlock, BlockedMove, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetBlock, Surface, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetBlock, BlockingActor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetBlock, Version, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetBlock, UnknownData_V9T5, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetBlock, 0x0010);
		}

		// struct FNetMotion
		TEST_METHOD(ScriptStruct__Mordhau__NetMotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetMotion, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetMotion, MotionType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetMotion, MotionParam0, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetMotion, MotionParam1, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetMotion, MotionParam2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetMotion, MotionDynamicParam, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetMotion, 0x0006);
		}

		// struct FGroupSoundEntry
		TEST_METHOD(ScriptStruct__Mordhau__GroupSoundEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundEntry, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundEntry, Time, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupSoundEntry, 0x0010);
		}

		// struct FGroupSoundPlayer
		TEST_METHOD(ScriptStruct__Mordhau__GroupSoundPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundPlayer, CurrentlyPlayingSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundPlayer, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundPlayer, Entries, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupSoundPlayer, 0x0018);
		}

		// struct FGroupSoundGroup
		TEST_METHOD(ScriptStruct__Mordhau__GroupSoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundGroup, GroupSoundPlayers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundGroup, SoundEntries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundGroup, SoundGroupsNum, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundGroup, EntryMaxAge, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundGroup, MinEntriesToPlaySound, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundGroup, UnknownData_PFMA, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundGroup, SoundCue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundGroup, FadeOutDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupSoundGroup, SoundGroupMergeDistance, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupSoundGroup, 0x0080);
		}

		// struct FServerStats
		TEST_METHOD(ScriptStruct__Mordhau__ServerStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStats, TargetTickRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStats, MinTickRate, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStats, MaxTickRate, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStats, AvgTickRate, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStats, InBytesPerSecond, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStats, OutBytesPerSecond, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStats, ConfiguredInternetSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStats, NumPlayers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStats, MaxPlayers, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerStats, 0x0018);
		}

		// struct FPlayerCommand
		TEST_METHOD(ScriptStruct__Mordhau__PlayerCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCommand, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCommand, UnknownData_0AHT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCommand, UniquePlayerID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCommand, IntParam, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCommand, UnknownData_ICR0, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCommand, StringParam, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerCommand, 0x0030);
		}

		// struct FReplicatedProjectileInfo
		TEST_METHOD(ScriptStruct__Mordhau__ReplicatedProjectileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedProjectileInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedProjectileInfo, Orientation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedProjectileInfo, HitNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedProjectileInfo, BounceForce, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedProjectileInfo, Creator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedProjectileInfo, HitSurface, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedProjectileInfo, bHasStopped, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedProjectileInfo, bHasHitWorld, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedProjectileInfo, HitCounter, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedProjectileInfo, 0x0034);
		}

		// struct FFindServerSessionsFilter
		TEST_METHOD(ScriptStruct__Mordhau__FindServerSessionsFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, bIsNotFull, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, bHasPlayers, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, bIsEmpty, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, bIsNotPasswordProtected, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, bIsDevBuild, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, bIsOfficial, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, bIsMatchmaking, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, bIsModded, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, AntiCheat, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, UnknownData_ISXU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, MinOpenSlots, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, MinSlots, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, MaxSlots, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, MaxPing, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, UnknownData_0H9B, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, ServerName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, GameMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, Region, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindServerSessionsFilter, UnknownData_TU6A, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindServerSessionsFilter, 0x0048);
		}

		// struct FServerAddress
		TEST_METHOD(ScriptStruct__Mordhau__ServerAddress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddress, IP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddress, Port, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddress, UnknownData_RRP0, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddress, 0x0008);
		}

		// struct FMordhauColorItemTable
		TEST_METHOD(ScriptStruct__Mordhau__MordhauColorItemTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauColorItemTable, TableName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauColorItemTable, Entries, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMordhauColorItemTable, 0x0028);
		}

		// struct FAchievement
		TEST_METHOD(ScriptStruct__Mordhau__Achievement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAchievement, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAchievement, 0x0008);
		}

		// struct FSpineSpaceAdditive
		TEST_METHOD(ScriptStruct__Mordhau__SpineSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpineSpaceAdditive, head, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpineSpaceAdditive, Neck, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpineSpaceAdditive, Spine1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpineSpaceAdditive, LeftShoulder, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpineSpaceAdditive, LeftArm, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpineSpaceAdditive, LeftForearm, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpineSpaceAdditive, LeftHand, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpineSpaceAdditive, RightShoulder, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpineSpaceAdditive, RightArm, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpineSpaceAdditive, RightForearm, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpineSpaceAdditive, RightHand, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpineSpaceAdditive, 0x0084);
		}

		// struct FHighMidLowSpineSpaceAdditive
		TEST_METHOD(ScriptStruct__Mordhau__HighMidLowSpineSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHighMidLowSpineSpaceAdditive, High, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHighMidLowSpineSpaceAdditive, Mid, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHighMidLowSpineSpaceAdditive, Low, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHighMidLowSpineSpaceAdditive, 0x018C);
		}

		// struct FAnglingSpineSpaceAdditive
		TEST_METHOD(ScriptStruct__Mordhau__AnglingSpineSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnglingSpineSpaceAdditive, Right, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnglingSpineSpaceAdditive, Left, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnglingSpineSpaceAdditive, 0x0318);
		}

		// struct FPerspectiveBlendSpaceBase
		TEST_METHOD(ScriptStruct__Mordhau__PerspectiveBlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveBlendSpaceBase, ThirdPerson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveBlendSpaceBase, FirstPerson, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveBlendSpaceBase, 0x0010);
		}

		// struct FGameplayTagCondition
		TEST_METHOD(ScriptStruct__Mordhau__GameplayTagCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCondition, RequiredTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCondition, BlockedTags, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCondition, 0x0040);
		}

		// struct FGameplayTagConditionDelegate
		TEST_METHOD(ScriptStruct__Mordhau__GameplayTagConditionDelegate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagConditionDelegate, Condition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagConditionDelegate, Delegate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagConditionDelegate, bIsConditionSatisfied, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagConditionDelegate, UnknownData_FO74, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagConditionDelegate, 0x0058);
		}

		// struct FFloatAndVector
		TEST_METHOD(ScriptStruct__Mordhau__FloatAndVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatAndVector, Float, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatAndVector, Vector, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatAndVector, 0x0010);
		}

		// struct FNetDamage
		TEST_METHOD(ScriptStruct__Mordhau__NetDamage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDamage, PackedType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDamage, bone, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDamage, PackedFlags, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDamage, UnknownData_0DI7, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDamage, Point, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDamage, DamageSource, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDamage, DamageAgent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDamage, Version, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDamage, UnknownData_WT15, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDamage, 0x0024);
		}

		// struct FDismemberedBoneData
		TEST_METHOD(ScriptStruct__Mordhau__DismemberedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDismemberedBoneData, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDismemberedBoneData, bIsPartial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDismemberedBoneData, bIsBluntForce, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDismemberedBoneData, UnknownData_B80K, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDismemberedBoneData, ForceDir, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDismemberedBoneData, Agent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDismemberedBoneData, 0x0020);
		}

		// struct FDismemberedQueue
		TEST_METHOD(ScriptStruct__Mordhau__DismemberedQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDismemberedQueue, BoneSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDismemberedQueue, DismemberedBonesQueue, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDismemberedQueue, 0x0060);
		}

		// struct FPatternInfo
		TEST_METHOD(ScriptStruct__Mordhau__PatternInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatternInfo, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatternInfo, bHasColor1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatternInfo, bHasColor2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatternInfo, bHasColor3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatternInfo, UnknownData_M7MQ, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatternInfo, 0x0010);
		}

		// struct FPerspectiveFloat
		TEST_METHOD(ScriptStruct__Mordhau__PerspectiveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveFloat, ThirdPerson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveFloat, FirstPerson, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveFloat, 0x0008);
		}

		// struct FPerspectiveAnimSequence
		TEST_METHOD(ScriptStruct__Mordhau__PerspectiveAnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveAnimSequence, ThirdPerson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveAnimSequence, FirstPerson, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveAnimSequence, 0x0010);
		}

		// struct FPerspectiveCurveFloat
		TEST_METHOD(ScriptStruct__Mordhau__PerspectiveCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveCurveFloat, ThirdPerson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveCurveFloat, FirstPerson, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveCurveFloat, 0x0010);
		}

		// struct FPerspectiveBool
		TEST_METHOD(ScriptStruct__Mordhau__PerspectiveBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveBool, ThirdPerson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveBool, FirstPerson, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveBool, 0x0002);
		}

		// struct FPerspectiveAnimSequenceBase
		TEST_METHOD(ScriptStruct__Mordhau__PerspectiveAnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveAnimSequenceBase, ThirdPerson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveAnimSequenceBase, FirstPerson, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveAnimSequenceBase, 0x0010);
		}

		// struct FPerspectiveAnimMontage
		TEST_METHOD(ScriptStruct__Mordhau__PerspectiveAnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveAnimMontage, ThirdPerson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveAnimMontage, FirstPerson, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveAnimMontage, 0x0010);
		}

		// struct FMordhauDamageInfo
		TEST_METHOD(ScriptStruct__Mordhau__MordhauDamageInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageInfo, Hit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageInfo, Type, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageInfo, SubType, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageInfo, UnknownData_KH9S, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageInfo, DamageSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageInfo, DamageAgent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageInfo, bWantsFlinchAnimation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageInfo, UnknownData_WGIF, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMordhauDamageInfo, 0x00A8);
		}

		// struct FSteamPlayFabConversionResult
		TEST_METHOD(ScriptStruct__Mordhau__SteamPlayFabConversionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamPlayFabConversionResult, SteamIDPlayFabIDMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamPlayFabConversionResult, 0x0050);
		}

		// struct FServerRestrictionInfo
		TEST_METHOD(ScriptStruct__Mordhau__ServerRestrictionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRestrictionInfo, bIsBanned, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRestrictionInfo, UnknownData_D6ZO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRestrictionInfo, BanDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRestrictionInfo, bIsMuted, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRestrictionInfo, UnknownData_8VXR, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRestrictionInfo, MuteDuration, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRestrictionInfo, 0x0010);
		}

		// struct FAnimNode_AttackAngling : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_AttackAngling)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, SpineSpaceAdditivePose, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, head, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, Neck, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, Spine, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, LeftShoulder, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, LeftArm, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, LeftForearm, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, LeftHand, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, RightShoulder, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, RightArm, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, RightForearm, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, RightHand, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AttackAngling, UnknownData_CUXK, 0x01FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AttackAngling, 0x0200);
		}

		// struct FAnimNode_BlendBetweenBones : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_BlendBetweenBones)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBetweenBones, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBetweenBones, BlendBoneA, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBetweenBones, BlendBoneB, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBetweenBones, ReferenceBlendBone, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBetweenBones, BlendBetweenAlpha, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBetweenBones, UnknownData_AEYO, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBetweenBones, 0x0110);
		}

		// struct FAnimNode_Dismemberment : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_Dismemberment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Dismemberment, Dismemberment, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Dismemberment, 0x00D8);
		}

		// struct FFacialBoneSetup
		TEST_METHOD(ScriptStruct__Mordhau__FacialBoneSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, SelectionBoneOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, bIsSymmetrical, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, UnknownData_1BSH, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, SelectionBiasFactor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, ChildBones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, SymmetryTwinBoneIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, SymmetryTwinBoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, BoneIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, TranslateXRange, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, TranslateYRange, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, TranslateZRange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, ScaleXRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, ScaleYRange, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, ScaleZRange, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, RotateXRange, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, RotateYRange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, RotateZRange, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFacialBoneSetup, UnknownData_VD2N, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFacialBoneSetup, 0x0088);
		}

		// struct FAnimNodePackedFaceCustomization
		TEST_METHOD(ScriptStruct__Mordhau__AnimNodePackedFaceCustomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNodePackedFaceCustomization, FaceCustomizationSetup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNodePackedFaceCustomization, FaceCustomizationBonesTransforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNodePackedFaceCustomization, 0x0020);
		}

		// struct FAnimNode_FaceCustomization : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_FaceCustomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_FaceCustomization, FaceCustomization, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_FaceCustomization, 0x00E8);
		}

		// struct FAnimNode_MordhauSpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_MordhauSpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, bone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, bIsRotationSpring, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, bIsRotationFlipped, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, UnknownData_OP9Z, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, BoneOffset, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, bIsBoneOffsetInComponentSpace, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, UnknownData_VPXB, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, BoneOffsetRotationProjection, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, SpringStiffness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, SpringDamping, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, SpringMass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, MaxDisplacement, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, bUseDisplacementLimits, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, UnknownData_TE0U, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, DisplacementLimitsMin, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, DisplacementLimitsMax, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, TeleportThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, BoneLocation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, SpringState, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MordhauSpringBone, DeltaTime, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MordhauSpringBone, 0x0148);
		}

		// struct FPerspectiveHighMidLowSpineSpaceAdditive
		TEST_METHOD(ScriptStruct__Mordhau__PerspectiveHighMidLowSpineSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveHighMidLowSpineSpaceAdditive, ThirdPerson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveHighMidLowSpineSpaceAdditive, FirstPerson, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveHighMidLowSpineSpaceAdditive, 0x0318);
		}

		// struct FSessionSearchResult
		TEST_METHOD(ScriptStruct__Mordhau__SessionSearchResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionSearchResult, UnknownData_NXQI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionSearchResult, 0x0108);
		}

		// struct FServerSearchResult : public FSessionSearchResult
		TEST_METHOD(ScriptStruct__Mordhau__ServerSearchResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSearchResult, ServerList, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSearchResult, UnknownData_OHHZ, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSearchResult, 0x0110);
		}

		// struct FBasicServerInfo
		TEST_METHOD(ScriptStruct__Mordhau__BasicServerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicServerInfo, ServerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicServerInfo, MaxPlayers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicServerInfo, UnknownData_QHLC, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasicServerInfo, 0x0018);
		}

		// struct FPlayerMessageStruct
		TEST_METHOD(ScriptStruct__Mordhau__PlayerMessageStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMessageStruct, MessageBody, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMessageStruct, MessagePrefix, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMessageStruct, PlayerTeam, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMessageStruct, UnknownData_RR4L, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMessageStruct, 0x0028);
		}

		// struct FRconEventStruct
		TEST_METHOD(ScriptStruct__Mordhau__RconEventStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconEventStruct, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconEventStruct, UnknownData_0FG3, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRconEventStruct, 0x0020);
		}

		// struct FChatCommandStruct
		TEST_METHOD(ScriptStruct__Mordhau__ChatCommandStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatCommandStruct, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatCommandStruct, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatCommandStruct, bRequiresAdmin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatCommandStruct, bBroadcastCommand, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatCommandStruct, UnknownData_XBER, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChatCommandStruct, 0x0020);
		}

		// struct FRconFlag
		TEST_METHOD(ScriptStruct__Mordhau__RconFlag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconFlag, UnknownData_45OJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconFlag, CommandObjects, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRconFlag, 0x0040);
		}

		// struct FGameStateLastDemotableTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Mordhau__GameStateLastDemotableTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameStateLastDemotableTickFunction, UnknownData_WHAJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameStateLastDemotableTickFunction, 0x0030);
		}

		// struct FGameStatePostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Mordhau__GameStatePostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameStatePostPhysicsTickFunction, UnknownData_64Z9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameStatePostPhysicsTickFunction, 0x0030);
		}

		// struct FCapturePointGroup
		TEST_METHOD(ScriptStruct__Mordhau__CapturePointGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturePointGroup, CapturePoints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturePointGroup, 0x0010);
		}

		// struct FPerspectiveVector2D
		TEST_METHOD(ScriptStruct__Mordhau__PerspectiveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveVector2D, ThirdPerson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveVector2D, FirstPerson, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveVector2D, 0x0010);
		}

		// struct FWoundInfo
		TEST_METHOD(ScriptStruct__Mordhau__WoundInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundInfo, WoundType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundInfo, WoundSize, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWoundInfo, 0x0014);
		}

		// struct FAttackInfo
		TEST_METHOD(ScriptStruct__Mordhau__AttackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bCanCombo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bCanMissCombo, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bForcesRearingFromFront, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bNoFlinch, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bNoReleaseFlinch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, UnknownData_GW25, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, FlinchSpeedModifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, FlinchDurationModifier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, Windup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, ComboWindupIncrease, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, MissComboExtraWindupIncrease, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, Release, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, FeintLockOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, FeintCost, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, ChamberFeintCost, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, ChamberCost, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, MorphCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, TurnCaps, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, UnknownData_Y8QV, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, TurnCapCurve, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, HitEffectIKWeightCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, HitEffectSpeedUpExponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, StaminaDrain, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, ExtraStaminaDrainVsHeldBlock, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, StaminaDamage, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, Damage, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, HeadBonus, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, LegBonus, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, WoodDamage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, StoneDamage, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bStopOnHit, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bDrainAllStamOnBlock, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bRagdollOnBlock, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, UnknownData_YGOH, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, ChipDamagePercentageOnBlock, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bWillClashWhenParried, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bRagdollOnHit, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bDismountsHorseRider, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, bDismountsLadderUser, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, MissStaminaCost, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, HitStaminaReward, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, MissRecovery, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, HitKockbackFactor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, FollowAttackDirectionFactor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, WoundInfoArray, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, HitShake, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, HitStopShake, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackInfo, IgnoreBones, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttackInfo, 0x0128);
		}

		// struct FBlockResult
		TEST_METHOD(ScriptStruct__Mordhau__BlockResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockResult, Reason, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockResult, bIsStun, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockResult, bIsDisarm, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockResult, bIsRanged, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockResult, bIsCancel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockResult, bPartyFlag, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockResult, bRequiresSelfBlockEvent, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockResult, Surface, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlockResult, 0x0008);
		}

		// struct FDecalInfo
		TEST_METHOD(ScriptStruct__Mordhau__DecalInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalInfo, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalInfo, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalInfo, UnknownData_VHBZ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDecalInfo, 0x0018);
		}

		// struct FPerspectiveAnimSequenceBaseArray
		TEST_METHOD(ScriptStruct__Mordhau__PerspectiveAnimSequenceBaseArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveAnimSequenceBaseArray, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveAnimSequenceBaseArray, 0x0010);
		}

		// struct FWearableCustomization
		TEST_METHOD(ScriptStruct__Mordhau__WearableCustomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWearableCustomization, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWearableCustomization, UnknownData_QDAY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWearableCustomization, Colors, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWearableCustomization, Team1Colors, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWearableCustomization, Team2Colors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWearableCustomization, Pattern, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWearableCustomization, UnknownData_20ZI, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWearableCustomization, 0x0040);
		}

		// struct FEquipmentCustomization
		TEST_METHOD(ScriptStruct__Mordhau__EquipmentCustomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentCustomization, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentCustomization, UnknownData_KPSI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentCustomization, Colors, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentCustomization, Parts, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentCustomization, Pattern, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentCustomization, Skin, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentCustomization, UnknownData_EF1E, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquipmentCustomization, 0x0030);
		}

		// struct FAppearanceCustomization
		TEST_METHOD(ScriptStruct__Mordhau__AppearanceCustomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, Emblem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, UnknownData_VI6U, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, EmblemColors, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, MetalRoughnessScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, MetalTint, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, Age, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, Voice, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, VoicePitch, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, bIsFemale, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, Fat, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, Skinny, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, Strong, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, SkinColor, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, Face, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, EyeColor, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, HairColor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, Hair, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, FacialHair, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppearanceCustomization, Eyebrows, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppearanceCustomization, 0x0028);
		}

		// struct FFaceCustomization
		TEST_METHOD(ScriptStruct__Mordhau__FaceCustomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceCustomization, Translate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceCustomization, Rotate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceCustomization, Scale, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFaceCustomization, 0x0030);
		}

		// struct FSkillsCustomization
		TEST_METHOD(ScriptStruct__Mordhau__SkillsCustomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsCustomization, Perks, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillsCustomization, 0x0004);
		}

		// struct FCharacterGearCustomization
		TEST_METHOD(ScriptStruct__Mordhau__CharacterGearCustomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterGearCustomization, Wearables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterGearCustomization, Equipment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterGearCustomization, 0x0020);
		}

		// struct FCharacterProfile
		TEST_METHOD(ScriptStruct__Mordhau__CharacterProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterProfile, GearCustomization, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterProfile, AppearanceCustomization, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterProfile, FaceCustomization, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterProfile, SkillsCustomization, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterProfile, UnknownData_S1XC, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterProfile, Category, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterProfile, PlayFabId, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterProfile, 0x00B8);
		}

		// struct FSpawnablePlaneInfo
		TEST_METHOD(ScriptStruct__Mordhau__SpawnablePlaneInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneInfo, Forward, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneInfo, Backward, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneInfo, Left, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneInfo, Right, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneInfo, RightXAxisPercentage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneInfo, LeftXAxisPercentage, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnablePlaneInfo, 0x0018);
		}

		// struct FSpawnableObjectInfo
		TEST_METHOD(ScriptStruct__Mordhau__SpawnableObjectInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, Preview, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, PreviewSkeletal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, Cost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, UnknownData_JXR9, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, RotationOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, RotationOffsetPreview, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, NotHitRotationPreviewOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, NotHitLocationPreviewOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, ScalePreview, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, ActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, DisplayName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, PlacableLimitName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, PlaceableLimitMax, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, SpawnActorOffset, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, bDoNotAttach, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, UnknownData_U59W, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, BoxCheckExtents, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, BoxCheckOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnableObjectInfo, UnknownData_QTZV, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnableObjectInfo, 0x0098);
		}

		// struct FNetState
		TEST_METHOD(ScriptStruct__Mordhau__NetState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetState, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetState, LocalTimestamp, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetState, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetState, Rotation, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetState, 0x0020);
		}

		// struct FRepFaceArrayShortWithVersion
		TEST_METHOD(ScriptStruct__Mordhau__RepFaceArrayShortWithVersion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepFaceArrayShortWithVersion, Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepFaceArrayShortWithVersion, Version, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepFaceArrayShortWithVersion, UnknownData_U4PD, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepFaceArrayShortWithVersion, 0x0018);
		}

		// struct FRepArraySkillsWithVersion
		TEST_METHOD(ScriptStruct__Mordhau__RepArraySkillsWithVersion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepArraySkillsWithVersion, Skills, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepArraySkillsWithVersion, Version, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepArraySkillsWithVersion, UnknownData_MMNR, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepArraySkillsWithVersion, 0x0008);
		}

		// struct FRepArrayByteWithVersion
		TEST_METHOD(ScriptStruct__Mordhau__RepArrayByteWithVersion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepArrayByteWithVersion, Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepArrayByteWithVersion, Version, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepArrayByteWithVersion, UnknownData_LAKI, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepArrayByteWithVersion, 0x0018);
		}

		// struct FECSDuringPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Mordhau__ECSDuringPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FECSDuringPhysicsTickFunction, UnknownData_R78N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FECSDuringPhysicsTickFunction, 0x0030);
		}

		// struct FECSPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Mordhau__ECSPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FECSPostPhysicsTickFunction, UnknownData_F15F, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FECSPostPhysicsTickFunction, 0x0030);
		}

		// struct FStat
		TEST_METHOD(ScriptStruct__Mordhau__Stat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStat, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStat, SetBy, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStat, UnknownData_AREM, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStat, 0x000C);
		}

		// struct FAnimNode_TwoHandedIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_TwoHandedIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, IKBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, UnknownData_8D79, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, StartStretchRatio, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, MaxStretchScale, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, UnknownData_Z0M5, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, JointTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, JointTargetLocation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, JointTargetLocationSpace, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, bIsUsingFixedTarget, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, UnknownData_ZSSO, 0x015F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, SlidingTransform, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, SlidingStretchBlendLimits, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, FixedTarget, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, MainHandWeaponBone, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, MainHandBone, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, OffhandThumbFingerBone, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, OffhandIndexFingerBone, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, MainHandMiddleFingerBone, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoHandedIK, UnknownData_AG8E, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoHandedIK, 0x0200);
		}

		// struct FFootGroundingLimb
		TEST_METHOD(ScriptStruct__Mordhau__FootGroundingLimb)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootGroundingLimb, TraceEndBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootGroundingLimb, TraceStartBone, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootGroundingLimb, TraceDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootGroundingLimb, UpValueLimits, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootGroundingLimb, TraceResult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootGroundingLimb, UnknownData_X2JG, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootGroundingLimb, RootSpaceImpactZ, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootGroundingLimb, RotationOffset, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootGroundingLimb, InternalTranslationOffset, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootGroundingLimb, TranslationOffset, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootGroundingLimb, UnknownData_AQPA, 0x01E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFootGroundingLimb, 0x01E8);
		}

		// struct FRepArrayAppearanceWithVersion
		TEST_METHOD(ScriptStruct__Mordhau__RepArrayAppearanceWithVersion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepArrayAppearanceWithVersion, Appearance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepArrayAppearanceWithVersion, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepArrayAppearanceWithVersion, UnknownData_22E6, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepArrayAppearanceWithVersion, 0x0030);
		}

		// struct FCharMove
		TEST_METHOD(ScriptStruct__Mordhau__CharMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharMove, TargetLocation, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharMove, 0x000C);
		}

		// struct FCharPhysics
		TEST_METHOD(ScriptStruct__Mordhau__CharPhysics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharPhysics, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharPhysics, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharPhysics, Rotation, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharPhysics, 0x0024);
		}

		// struct FEquipmentPartEntry
		TEST_METHOD(ScriptStruct__Mordhau__EquipmentPartEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentPartEntry, PartName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentPartEntry, Parts, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquipmentPartEntry, 0x0028);
		}

		// struct FEquipmentSkinEntry
		TEST_METHOD(ScriptStruct__Mordhau__EquipmentSkinEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentSkinEntry, SkinName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentSkinEntry, PartTypes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentSkinEntry, ColorTables, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentSkinEntry, Patterns, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquipmentSkinEntry, 0x0048);
		}

		// struct FEquipmentHolsterInfo
		TEST_METHOD(ScriptStruct__Mordhau__EquipmentHolsterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentHolsterInfo, HolsterSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentHolsterInfo, bHidden, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentHolsterInfo, bHiddenIn1P, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentHolsterInfo, UnknownData_E26G, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentHolsterInfo, DrawAnimation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentHolsterInfo, DrawAnimation1P, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentHolsterInfo, AltModeDrawAnimation1P, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentHolsterInfo, UnknownData_O2ND, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentHolsterInfo, Offset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquipmentHolsterInfo, 0x0060);
		}

		// struct FAnimNode_WeightShift : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_WeightShift)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WeightShift, Space, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WeightShift, UnknownData_BX54, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WeightShift, BoneToModify, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WeightShift, Bone1ToMaintain, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WeightShift, Bone2ToMaintain, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WeightShift, Rotation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WeightShift, Pivot, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WeightShift, UnknownData_NCCT, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WeightShift, 0x0118);
		}

		// struct FSpawnablePlaneTraceResult
		TEST_METHOD(ScriptStruct__Mordhau__SpawnablePlaneTraceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneTraceResult, UnknownData_M6EM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnablePlaneTraceResult, 0x0270);
		}

		// struct FSpawnablePlaneTraceSettings
		TEST_METHOD(ScriptStruct__Mordhau__SpawnablePlaneTraceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneTraceSettings, CheckActorsOnPlaneTraceHit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneTraceSettings, HitTraceObjectTypes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneTraceSettings, ForwadDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneTraceSettings, BackDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneTraceSettings, LeftDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneTraceSettings, RightDistance, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneTraceSettings, RightForwardPercentage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneTraceSettings, LeftForwardPercentage, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneTraceSettings, TraceAmount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnablePlaneTraceSettings, UnknownData_90CO, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnablePlaneTraceSettings, 0x0048);
		}

		// struct FCharState
		TEST_METHOD(ScriptStruct__Mordhau__CharState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharState, State, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharState, 0x0001);
		}

		// struct FCharLook
		TEST_METHOD(ScriptStruct__Mordhau__CharLook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharLook, FacingMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharLook, UnknownData_K8EL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharLook, Offset2D, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharLook, 0x000C);
		}

		// struct FPerceptionInfo
		TEST_METHOD(ScriptStruct__Mordhau__PerceptionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerceptionInfo, bSight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerceptionInfo, bHearing, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerceptionInfo, bDamage, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerceptionInfo, Team, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerceptionInfo, UpdateTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerceptionInfo, 0x0008);
		}

		// struct FCharacterInventory
		TEST_METHOD(ScriptStruct__Mordhau__CharacterInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterInventory, RightHand, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterInventory, LeftHand, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterInventory, Equipment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterInventory, 0x0020);
		}

		// struct FVehicleTransitionInfo
		TEST_METHOD(ScriptStruct__Mordhau__VehicleTransitionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransitionInfo, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransitionInfo, Duration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransitionInfo, BlendTime, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransitionInfo, 0x0010);
		}

		// struct FPlayerProfile
		TEST_METHOD(ScriptStruct__Mordhau__PlayerProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerProfile, Rank, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerProfile, RankDisplayType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerProfile, UnknownData_VRT1, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerProfile, Banner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerProfile, UnknownData_9TCV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerProfile, Character, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerProfile, 0x00C8);
		}

		// struct FMatchmakingTicket
		TEST_METHOD(ScriptStruct__Mordhau__MatchmakingTicket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, QueueName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, TicketId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingTicket, 0x0020);
		}

		// struct FRichPresence
		TEST_METHOD(ScriptStruct__Mordhau__RichPresence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichPresence, Status, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichPresence, UnknownData_73BH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichPresence, GameMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichPresence, MapName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichPresence, 0x0028);
		}

		// struct FMatchRewards
		TEST_METHOD(ScriptStruct__Mordhau__MatchRewards)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchRewards, Match, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchRewards, Gold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchRewards, XP, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchRewards, 0x0068);
		}

		// struct FUnlockRecipe
		TEST_METHOD(ScriptStruct__Mordhau__UnlockRecipe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockRecipe, ItemId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockRecipe, RequiredGold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockRecipe, RequiredXP, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockRecipe, RequiredItems, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockRecipe, UnlockedItems, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUnlockRecipe, 0x0038);
		}

		// struct FCondensedUserLagReport
		TEST_METHOD(ScriptStruct__Mordhau__CondensedUserLagReport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCondensedUserLagReport, GroupCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCondensedUserLagReport, UnknownData_8SHM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCondensedUserLagReport, GroupTimestamp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCondensedUserLagReport, CombinedInBytesPerSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCondensedUserLagReport, CombinedOutBytesPerSec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCondensedUserLagReport, CombinedTickRate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCondensedUserLagReport, CombinedPlayerCount, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCondensedUserLagReport, MaxTimeDifference, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCondensedUserLagReport, 0x0028);
		}

		// struct FUserLagReport
		TEST_METHOD(ScriptStruct__Mordhau__UserLagReport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserLagReport, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserLagReport, InBytesPerSecond, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserLagReport, OutBytesPerSecond, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserLagReport, AvgTickRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserLagReport, PlayerCount, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserLagReport, UnknownData_S9HL, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserLagReport, 0x0018);
		}

		// struct FAdminFlag
		TEST_METHOD(ScriptStruct__Mordhau__AdminFlag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminFlag, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminFlag, Flag, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminFlag, Description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminFlag, Commands, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminFlag, 0x0040);
		}

		// struct FServerInfo : public FBasicServerInfo
		TEST_METHOD(ScriptStruct__Mordhau__ServerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, HostName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, GameMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, MapName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, DockerHost, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerInfo, DockerServer, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerInfo, 0x0068);
		}

		// struct FLobbySearchResult : public FSessionSearchResult
		TEST_METHOD(ScriptStruct__Mordhau__LobbySearchResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbySearchResult, 0x0108);
		}

		// struct FVisibilityMap
		TEST_METHOD(ScriptStruct__Mordhau__VisibilityMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityMap, UnknownData_U3Z6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityMap, 0x0058);
		}

		// struct FVisibilityList
		TEST_METHOD(ScriptStruct__Mordhau__VisibilityList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityList, UnknownData_4I6B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityList, 0x0050);
		}

		// struct FColorTableEntry
		TEST_METHOD(ScriptStruct__Mordhau__ColorTableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorTableEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorTableEntry, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorTableEntry, DisplayedColor, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorTableEntry, 0x0038);
		}

		// struct FMordhauColorTable
		TEST_METHOD(ScriptStruct__Mordhau__MordhauColorTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauColorTable, TableName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauColorTable, Entries, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMordhauColorTable, 0x0028);
		}

		// struct FMapInfo
		TEST_METHOD(ScriptStruct__Mordhau__MapInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, GameModeMapName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, GameModeMetadata, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, MapMetadata, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapInfo, 0x0020);
		}

		// struct FSoundClassInfo
		TEST_METHOD(ScriptStruct__Mordhau__SoundClassInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassInfo, SoundClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassInfo, SoundMixes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassInfo, 0x0018);
		}

		// struct FSoundMixInfo
		TEST_METHOD(ScriptStruct__Mordhau__SoundMixInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundMixInfo, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundMixInfo, SoundClasses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundMixInfo, 0x0018);
		}

		// struct FWoundMaterialData
		TEST_METHOD(ScriptStruct__Mordhau__WoundMaterialData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMaterialData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMaterialData, UpVector, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMaterialData, RightVector, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMaterialData, ForwardVector, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMaterialData, WoundType, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWoundMaterialData, 0x0038);
		}

		// struct FMordhauDamageEvent : public FPointDamageEvent
		TEST_METHOD(ScriptStruct__Mordhau__MordhauDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageEvent, Type, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageEvent, SubType, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageEvent, UnknownData_65CU, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageEvent, DamageSource, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageEvent, DamageAgent, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageEvent, bWantsFlinchAnimation, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMordhauDamageEvent, UnknownData_WKYZ, 0x00BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMordhauDamageEvent, 0x00C0);
		}

		// struct FPermutationValuePair
		TEST_METHOD(ScriptStruct__Mordhau__PermutationValuePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPermutationValuePair, Permutation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPermutationValuePair, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPermutationValuePair, 0x0008);
		}

		// struct FArrayOfActor
		TEST_METHOD(ScriptStruct__Mordhau__ArrayOfActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArrayOfActor, Actors, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArrayOfActor, 0x0010);
		}

		// struct FPerspectiveAnglingSpineSpaceAdditive
		TEST_METHOD(ScriptStruct__Mordhau__PerspectiveAnglingSpineSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveAnglingSpineSpaceAdditive, ThirdPerson, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveAnglingSpineSpaceAdditive, FirstPerson, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveAnglingSpineSpaceAdditive, 0x0630);
		}

		// struct FRconResponseStruct
		TEST_METHOD(ScriptStruct__Mordhau__RconResponseStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconResponseStruct, RootObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconResponseStruct, DataObject, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconResponseStruct, CommandName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconResponseStruct, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconResponseStruct, bSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconResponseStruct, UnknownData_5GFD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconResponseStruct, FailureReason, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRconResponseStruct, 0x0048);
		}

		// struct FPlayerlistPlayer
		TEST_METHOD(ScriptStruct__Mordhau__PlayerlistPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistPlayer, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistPlayer, Team, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistPlayer, UnknownData_DW8Z, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistPlayer, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistPlayer, Platform, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistPlayer, bIsABot, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistPlayer, UnknownData_6MEC, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerlistPlayer, 0x0040);
		}

		// struct FPlayerlistResponse
		TEST_METHOD(ScriptStruct__Mordhau__PlayerlistResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistResponse, BaseResponse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistResponse, Players, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistResponse, PlayerCount, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistResponse, BotCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistResponse, bVerbose, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistResponse, bIncludeBots, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerlistResponse, UnknownData_6PIC, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerlistResponse, 0x0068);
		}

		// struct FRconRequestInfoResponse
		TEST_METHOD(ScriptStruct__Mordhau__RconRequestInfoResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconRequestInfoResponse, CommandInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconRequestInfoResponse, bSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconRequestInfoResponse, UnknownData_VZBU, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRconRequestInfoResponse, 0x0058);
		}

		// struct FEmbedFooterField
		TEST_METHOD(ScriptStruct__Mordhau__EmbedFooterField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmbedFooterField, Text, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmbedFooterField, 0x0010);
		}

		// struct FEmbedAuthorField
		TEST_METHOD(ScriptStruct__Mordhau__EmbedAuthorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmbedAuthorField, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmbedAuthorField, 0x0010);
		}

		// struct FEmbedFieldField
		TEST_METHOD(ScriptStruct__Mordhau__EmbedFieldField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmbedFieldField, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmbedFieldField, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmbedFieldField, bInline, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmbedFieldField, UnknownData_6FN1, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmbedFieldField, 0x0028);
		}

		// struct FDiscordEmbed
		TEST_METHOD(ScriptStruct__Mordhau__DiscordEmbed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscordEmbed, Title, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscordEmbed, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscordEmbed, Color, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscordEmbed, Timestamp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscordEmbed, Footer, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscordEmbed, Author, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscordEmbed, Fields, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDiscordEmbed, 0x0070);
		}

		// struct FDiscordMessage
		TEST_METHOD(ScriptStruct__Mordhau__DiscordMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscordMessage, Embeds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscordMessage, Content, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscordMessage, Username, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDiscordMessage, 0x0030);
		}

		// struct FReportMessage
		TEST_METHOD(ScriptStruct__Mordhau__ReportMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportMessage, Body, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportMessage, Prefix, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportMessage, Team, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportMessage, UnknownData_FIZ0, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReportMessage, 0x0028);
		}

		// struct FPlayerReport
		TEST_METHOD(ScriptStruct__Mordhau__PlayerReport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReport, PlayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReport, ReporteePlayFabID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReport, ReporterPlayFabID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReport, ReportType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReport, Timestamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReport, ServerName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReport, ScreenshotFilename, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReport, KillsDeathsTksTD, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReport, Messages, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReport, 0x0090);
		}

		// struct FEmoteEntry
		TEST_METHOD(ScriptStruct__Mordhau__EmoteEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmoteEntry, EmoteMotion, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmoteEntry, 0x0008);
		}

		// struct FActorSetAndArray
		TEST_METHOD(ScriptStruct__Mordhau__ActorSetAndArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSetAndArray, Set, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSetAndArray, Array, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSetAndArray, 0x0060);
		}

		// struct FActorTraceEntry
		TEST_METHOD(ScriptStruct__Mordhau__ActorTraceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTraceEntry, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTraceEntry, BonesHit, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTraceEntry, 0x0058);
		}

		// struct FPlayerCountArray
		TEST_METHOD(ScriptStruct__Mordhau__PlayerCountArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCountArray, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerCountArray, 0x0010);
		}

		// struct FActorTraceData
		TEST_METHOD(ScriptStruct__Mordhau__ActorTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTraceData, bIgnoreFurtherTraces, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTraceData, bIsAllowedToAddForce, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTraceData, UnknownData_COD5, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTraceData, Set, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTraceData, ActorTraceEntryArray, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTraceData, 0x0068);
		}

		// struct FHorseGearInfo
		TEST_METHOD(ScriptStruct__Mordhau__HorseGearInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHorseGearInfo, MaxSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHorseGearInfo, MaxAcceleration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHorseGearInfo, bAllowJump, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHorseGearInfo, bCanRiderRegenHealth, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHorseGearInfo, bCanRiderRegenStamina, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHorseGearInfo, bCanHorseRegen, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHorseGearInfo, UnknownData_SL2L, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHorseGearInfo, HeadBobShake, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHorseGearInfo, 0x0018);
		}

		// struct FGameServerFilter
		TEST_METHOD(ScriptStruct__Mordhau__GameServerFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, bIsNotFull, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, bHasPlayers, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, bIsEmpty, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, bIsNotPasswordProtected, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, bIsOfficial, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, bIsModded, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, UnknownData_SNXZ, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, MinOpenSlots, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, UnknownData_T3EA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, QueueName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, ServerName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, GameMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, Region, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerFilter, UnknownData_7RS0, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameServerFilter, 0x0048);
		}

		// struct FPlayerChatMessagesContainer
		TEST_METHOD(ScriptStruct__Mordhau__PlayerChatMessagesContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerChatMessagesContainer, Messages, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerChatMessagesContainer, UnknownData_E9F6, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerChatMessagesContainer, 0x0018);
		}

		// struct FLineTraceMemoryEntry
		TEST_METHOD(ScriptStruct__Mordhau__LineTraceMemoryEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLineTraceMemoryEntry, TraceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLineTraceMemoryEntry, TraceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLineTraceMemoryEntry, DestroyTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLineTraceMemoryEntry, Owner, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLineTraceMemoryEntry, 0x0024);
		}

		// struct FAnimNode_RotateAroundPivot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_RotateAroundPivot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateAroundPivot, Space, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateAroundPivot, UnknownData_LVE4, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateAroundPivot, BoneToModify, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateAroundPivot, Rotation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateAroundPivot, Pivot, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateAroundPivot, UnknownData_ED44, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateAroundPivot, 0x00F8);
		}

		// struct FAnimNode_SpeedWarping : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_SpeedWarping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, Hips, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, LeftLegTarget, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, LeftUpLeg, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, LeftFoot, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, RightLegTarget, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, RightUpLeg, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, RightFoot, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, Speed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, TotalLegLength, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, Axis, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, SpringState, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, SpringStiffness, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, SpringDamping, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, SpringMass, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, HipsOffsetRemapIn, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, HipsOffsetRemapOut, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, HipsOffsetClamp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, HipsZOffset, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpeedWarping, DeltaTime, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpeedWarping, 0x0180);
		}

		// struct FAnimNode_SpineSpreader : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_SpineSpreader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpineSpreader, SpreadPercentage, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpineSpreader, Spine1, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpineSpreader, RightShoulder, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpineSpreader, RightArm, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpineSpreader, RightForearm, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpineSpreader, RightHand, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpineSpreader, UnknownData_C1PA, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpineSpreader, 0x0120);
		}

		// struct FAnimNode_StopBounces : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_StopBounces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, Hips, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, LeftUpLeg, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, LeftLeg, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, LeftFoot, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, RightUpLeg, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, RightLeg, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, RightFoot, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, LowerBack, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, Spine, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, Spine1, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, Neck, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, head, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, LeftShoulder, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, RightShoulder, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, LeftArm, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, RightArm, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, BounceDuckWithBounceWeight, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, StopBounce, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, NotFirstPersonWithAtmosphericsAndAnimLOD1, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, RotateAroundHipsPivot, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, LeftFootTranslation, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, RightFootTranslation, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, StopBounceMediumWeight, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, StopBounceLightWeight, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, InverseHeadWeight, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StopBounces, UnknownData_7OY4, 0x0214);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StopBounces, 0x0218);
		}

		// struct FAnimNode_TwoBoneIKOffset : public FAnimNode_TwoBoneIK
		TEST_METHOD(ScriptStruct__Mordhau__AnimNode_TwoBoneIKOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIKOffset, OffsetVector, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIKOffset, RotateEndBonePivot, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIKOffset, RotateEndBoneOffset, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIKOffset, bUseParentZLimit, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIKOffset, UnknownData_D701, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIKOffset, ParentZLimitOffset, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIKOffset, bEffectorLocationIsOffset, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIKOffset, UnknownData_EXS2, 0x0205);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIKOffset, 0x0210);
		}

		// struct FPointWeightMap
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__PointWeightMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointWeightMap, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointWeightMap, 0x0010);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, WeightMaps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00F8);
		}

		// struct FClothConstraintSetup_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConstraintSetup_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup_Legacy, 0x0010);
		}

		// struct FClothLODDataCommon
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothLODDataCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, CollisionData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_HN8L, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODDataCommon, 0x0158);
		}

		// struct FClothParameterMask_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothParameterMask_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_5PSE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_12OD, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_5C7H, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_Legacy, 0x0030);
		}

		// struct FClothConfig_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConfig_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_6OIL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_6JGN, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig_Legacy, 0x00D4);
		}

		// struct FARVideoFormat
		TEST_METHOD(ScriptStruct__AugmentedReality__ARVideoFormat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, FPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Height, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARVideoFormat, 0x000C);
		}

		// struct FARSharedWorldReplicationState
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSharedWorldReplicationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, PreviewImageOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, ARWorldOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSharedWorldReplicationState, 0x0008);
		}

		// struct FARTraceResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARTraceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, DistanceFromCamera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TraceChannel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_S85T, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, LocalToTrackingTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TrackedGeometry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_HK3E, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARTraceResult, 0x0060);
		}

		// struct FARSkeletonDefinition
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSkeletonDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, NumJoints, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, UnknownData_LVG1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, JointNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, ParentIndices, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSkeletonDefinition, 0x0028);
		}

		// struct FARPose3D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, IsJointTracked, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransformSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, UnknownData_OXUK, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose3D, 0x0050);
		}

		// struct FARPose2D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, JointLocations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, IsJointTracked, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose2D, 0x0048);
		}

		// struct FARSessionStatus
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, AdditionalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, Status, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, UnknownData_VW4N, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionStatus, 0x0018);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_P3R9, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FMagicLeapAudioDummyStruct
		TEST_METHOD(ScriptStruct__MagicLeapAudio__MagicLeapAudioDummyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapAudioDummyStruct, UnknownData_1CTA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapAudioDummyStruct, 0x0001);
		}

		// struct FSolverBreakingFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverBreakingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, UnknownData_MBSR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingFilterSettings, 0x0010);
		}

		// struct FSolverCollisionFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverCollisionFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, UnknownData_WJYR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinImpulse, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionFilterSettings, 0x0010);
		}

		// struct FSolverTrailingFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverTrailingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, UnknownData_V7J6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingFilterSettings, 0x0010);
		}

		// struct FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_YC40, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// struct FAIDataProviderTypedValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, UnknownData_3TXA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0030);
		}

		// struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_PG6C, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0038);
		}

		// struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_CNZN, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0038);
		}

		// struct FEnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_DR1I, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// struct FBlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_74YP, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_NSGL, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// struct FAIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_YR8Q, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// struct FAINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_2ZUF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_A0OV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// struct FAIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_TP4P, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// struct FAITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_AKBL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// struct FAITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_ZVX1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// struct FAISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_Z8QR, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// struct FAIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_ZZDL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// struct FBTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_27S8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// struct FBehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_JAFC, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// struct FBlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_KHFI, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// struct FAIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_XIX6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// struct FBTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// struct FEQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_Y5BV, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_PXKB, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// struct FIntervalCountdown
		TEST_METHOD(ScriptStruct__AIModule__IntervalCountdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, Interval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, UnknownData_JSZU, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntervalCountdown, 0x0008);
		}

		// struct FCrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// struct FCrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// struct FEnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_4FBW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_WXV3, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_UN7B, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0038);
		}

		// struct FEnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_WMLT, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// struct FEnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_F80B, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x0178);
		}

		// struct FEnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_7QGG, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_O3IM, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// struct FPawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// struct FPawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_3Q8E, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// struct FAIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// struct FAIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_XY2M, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_04ZH, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x003C);
		}

		// struct FAIDataProviderStructValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_0IZ9, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// struct FActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_OX2I, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// struct FAISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_D9LQ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// struct FEnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_IIW7, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// struct FEnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_BL1Q, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_KT4C, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_YIEH, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// struct FGenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// struct FBrushStampData
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BrushStampData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushStampData, UnknownData_7E91, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushStampData, 0x00A8);
		}

		// struct FBehaviorInfo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BehaviorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, Behavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, UnknownData_OD5M, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorInfo, 0x0020);
		}

		// struct FActiveGizmo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__ActiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGizmo, UnknownData_6B6V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGizmo, 0x0030);
		}

		// struct FGizmoFloatParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoFloatParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, CurrentValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoFloatParameterChange, 0x0008);
		}

		// struct FGizmoVec2ParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoVec2ParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, CurrentValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoVec2ParameterChange, 0x0010);
		}

		// struct FInputRayHit
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__InputRayHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRayHit, UnknownData_E6AE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRayHit, 0x0028);
		}

		// struct FPurchaseItemDetails
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseItemDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_KU79, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Price, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_3HBR, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseItemDetails, 0x0040);
		}

		// struct FPurchaseConfirmation
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseConfirmation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_WIRP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, PackageName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_7HKT, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, Type, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_6U6H, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseConfirmation, 0x0050);
		}

		// struct FMagicLeapMeshBlockRequest
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, LevelOfDetail, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, UnknownData_YAW9, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockRequest, 0x0014);
		}

		// struct FMagicLeapMeshBlockInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockPosition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockOrientation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockDimensions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_1CP4, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, Timestamp, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockState, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_8AT3, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockInfo, 0x0048);
		}

		// struct FMagicLeapTrackingMeshInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapTrackingMeshInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, BlockData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTrackingMeshInfo, 0x0018);
		}

		// struct FMagicLeapRaycastHitResult
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastHitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UnknownData_7IPI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, Normal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, Confidence, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UserData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastHitResult, 0x0024);
		}

		// struct FMagicLeapRaycastQueryParams
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastQueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Direction, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UpVector, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Width, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Height, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, HorizontalFovDegrees, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, CollideWithUnobserved, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UnknownData_AFU9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UserData, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastQueryParams, 0x0038);
		}

		// struct FMagicLeapGraphicsClientPerformanceInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapGraphicsClientPerformanceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUCompAcquireCPUTimeMs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameEndGPUTimeMs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameStartCPUTimeMs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationCPUTimeMs, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationGPUTimeMs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationCPUTimeMs, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationGPUTimeMs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapGraphicsClientPerformanceInfo, 0x001C);
		}

		// struct FMagicLeapHeadTrackingState
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapHeadTrackingState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Error, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, UnknownData_7DVX, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Confidence, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHeadTrackingState, 0x0008);
		}

		// struct FMagicLeapTouchpadGesture
		TEST_METHOD(ScriptStruct__MagicLeapController__MagicLeapTouchpadGesture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Hand, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_5B60, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, MotionSource, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Direction, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_WXKX, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, PositionAndForce, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Speed, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Distance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, FingerGap, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Angle, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTouchpadGesture, 0x0030);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_J5TY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_AJUC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_RING, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0003);
		}

		// struct FStructSerializerSetTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerSetTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StrSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, IntSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, NameSet, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StructSet, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerSetTestStruct, 0x0140);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SubClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Object, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, WeakObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ClassPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPath, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x00A0);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_8UMV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_Z62W, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Quat, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Color, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_P8A0, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0090);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, ByteArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_N7IX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StructArray, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0060);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStruct, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x0140);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_ZIR8, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_J58C, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Sets, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x0450);
		}

		// struct FStructSerializerByteArray
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerByteArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_M1VM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, ByteArray, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_BGXS, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Int8Array, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_EHOS, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerByteArray, 0x0038);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_LY9U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_X4RG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_SOQE, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_EGOY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_QDDW, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0090);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, Username, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FAppleImageUtilsImageConversionResult
		TEST_METHOD(ScriptStruct__AppleImageUtils__AppleImageUtilsImageConversionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, Error, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, ImageData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleImageUtilsImageConversionResult, 0x0020);
		}

		// struct FWheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, bDisableSteering, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_0L01, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// struct FVehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_SM1I, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x00A0);
		}

		// struct FReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// struct FVehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// struct FTireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_AVZ6, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// struct FVehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_1VOS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// struct FVehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// struct FVehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_BSKC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_IXY8, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// struct FAnimNode_WheelHandler : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_Y3TT, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x00E0);
		}

		// struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_OJ97, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x06F0);
		}

		// struct FSoundModulationParameter
		TEST_METHOD(ScriptStruct__AudioExtensions__SoundModulationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, Control, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, UnknownData_FRTP, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationParameter, 0x0014);
		}

		// struct FSoundModulation
		TEST_METHOD(ScriptStruct__AudioExtensions__SoundModulation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulation, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulation, 0x0010);
		}

		// struct FSTRUCT_MatchEndInfo
		TEST_METHOD(UserDefinedStruct__STRUCT_MatchEndInfo__STRUCT_MatchEndInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTRUCT_MatchEndInfo, Winner_15_17FF977E4C40F157A0FEC18A7933F7AD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTRUCT_MatchEndInfo, WinnerTeam_5_6B8C38034236451E9947B38150AA1481, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTRUCT_MatchEndInfo, WinnerScore_13_331EE3BA462DAC5934FA9392910F16A5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTRUCT_MatchEndInfo, OtherScore_14_8459FEF04EA4D73DE697A79922872164, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTRUCT_MatchEndInfo, Draw_12_BAB292B74DAFD342C6E4CABF28902219, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSTRUCT_MatchEndInfo, 0x0015);
		}

		// struct FAnimationSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, NumRandomizedInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, Enabled, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, UnknownData_GUPW, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSetup, 0x0018);
		}

		// struct FAnimationStateEntry
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_LMFR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, AnimationSetups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bOnDemand, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bAdditive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_I1ZM, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, BlendTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bReturnToPreviousState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bSetNextState, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, NextState, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_1K7L, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, MaximumNumberOfConcurrentInstances, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, WiggleTimePercentage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bRequiresCurves, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_GS9F, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateEntry, 0x0030);
		}

		// struct FPerSkeletonAnimationSharingSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__PerSkeletonAnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, Skeleton, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, SkeletalMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, BlendAnimBlueprint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AdditiveAnimBlueprint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, StateProcessorClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AnimationStates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerSkeletonAnimationSharingSetup, 0x0038);
		}

		// struct FTickAnimationSharingFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__AnimationSharing__TickAnimationSharingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickAnimationSharingFunction, UnknownData_JVL1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickAnimationSharingFunction, 0x0030);
		}

		// struct FAnimationSharingScalability
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSharingScalability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UseBlendTransitions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UnknownData_G6VU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, BlendSignificanceValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, MaximumNumberConcurrentBlends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, TickSignificanceValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSharingScalability, 0x0010);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_0HHW, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_NW4K, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_7GPK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_RA3E, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_IH7E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FSectionEvaluationDataTree
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationDataTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationDataTree, UnknownData_TZ2C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationDataTree, 0x0060);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_HT59, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0088);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_TITY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, LUTOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x000C);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_31V4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneTrackFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackFieldData, UnknownData_UIXZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackFieldData, 0x0060);
		}

		// struct FMovieSceneSubSectionFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionFieldData, UnknownData_7C24, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionFieldData, 0x0060);
		}

		// struct FMovieSceneEvaluationTrackSegments
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrackSegments)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SegmentIdentifierToIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SortedSegments, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrackSegments, 0x0020);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_YV11, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, Segments, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationTree, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_RSC6, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x00F8);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SegmentPtrLUT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0020);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, SetupIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, TearDownIndex, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, SubTemplateSerialNumbers, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0070);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneTimeTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeTransform, 0x000C);
		}

		// struct FMovieSceneTimeWarping
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeWarping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, End, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeWarping, 0x0008);
		}

		// struct FMovieSceneNestedSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneNestedSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, Warping, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNestedSequenceTransform, 0x0014);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, UnknownData_UBCB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, NestedTransforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x0020);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, FullPlayRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnwarpedPlayRange, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_IIM4, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00E8);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_JZBA, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x00A0);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_UC3A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_SSPD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, EvaluationField, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Hierarchy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_JV82, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TrackFieldData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SubSectionFieldData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x02F0);
		}

		// struct FMovieSceneSequenceLoopCount
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceLoopCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceLoopCount, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceLoopCount, 0x0004);
		}

		// struct FMovieSceneSequenceReplProperties
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceReplProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, UnknownData_WHOW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownNumLoops, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceReplProperties, 0x0010);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_P9KS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_Q944, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x0320);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, bCanLoop, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, UnknownData_94VH, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, EndFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, FirstLoopStartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0024);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bContinuouslyRespawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_DCS8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_S91E, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_0UFC, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_AMD1, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FMovieSceneMarkedFrame
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneMarkedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, UnknownData_UIDQ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, Label, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarkedFrame, 0x0018);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_6IQ5, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_X8L6, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_ISI1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_OR5O, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSectionPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_VETL, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_TBRY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_TUTM, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_9HWF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_U9Y8, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, PaddingByte, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_AIVH, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_295U, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_KODR, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_ZYUC, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_WT0S, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, NotifyFunctionName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0028);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0048);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_6KGQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneSectionGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionGroup, Sections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionGroup, 0x0010);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, PinnedNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00F0);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_FIAJ, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_U4WK, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_XWKW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_60NL, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_NOT5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_WOYQ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FGeneratedMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__GeneratedMovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedMovieSceneKeyStruct, UnknownData_GBGI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedMovieSceneKeyStruct, 0x0050);
		}

		// struct FMovieSceneObjectPathChannelKeyValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannelKeyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, SoftPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, HardPtr, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannelKeyValue, 0x0030);
		}

		// struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, PropertyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, UnknownData_TRBQ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannel, 0x00C0);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_Z8EY, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneWarpCounter
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneWarpCounter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWarpCounter, WarpCounts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWarpCounter, 0x0010);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackDisplayOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackDisplayOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackDisplayOptions, UnknownData_J746, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackDisplayOptions, 0x0004);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_J1U7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_UFGK, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0014);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieSceneObjectBindingIDs
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingIDs, IDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingIDs, 0x0010);
		}

		// struct FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCacheAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_H25Z, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_2KXJ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0040);
		}

		// struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0048);
		}

		// struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0068);
		}

		// struct FTemplateSequenceBindingOverrideData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, bOverridesDefault, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, UnknownData_8YTB, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceBindingOverrideData, 0x000C);
		}

		// struct FTemplateSequenceInstanceData : public FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceInstanceData, Operand, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceInstanceData, UnknownData_N3HN, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceInstanceData, 0x0020);
		}

		// struct FTemplateSequenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, SectionStartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, OuterBindingId, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, InnerOperand, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceSectionTemplate, 0x0048);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_HG7T, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_237A, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x000C);
		}

		// struct FLocalizedIconInfo
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconModelPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconPortalPath, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfo, 0x0030);
		}

		// struct FLocalizedIconInfos
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfos, IconData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfos, 0x0010);
		}

		// struct FLuminComponentSubElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentSubElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, ElementType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, UnknownData_K7GU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentSubElement, 0x0018);
		}

		// struct FLocalizedAppName
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedAppName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, AppName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedAppName, 0x0020);
		}

		// struct FLuminComponentElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, VisibleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExecutableName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ComponentType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, UnknownData_TH6C, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExtraComponentSubElements, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentElement, 0x0048);
		}

		// struct FBP_ToolBoxSpawnable
		TEST_METHOD(UserDefinedStruct__BP_ToolBoxSpawnable__BP_ToolBoxSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, Preview_5_2199FA324279776E26CF8D94C5B5B71B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, PreviewSkeletal_16_F127718E4CC9262BB43BBF846E200428, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, Cost_2_3FE5E6C242579A2FB40131B381BE0852, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, UnknownData_GLV5, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, RotationOffset_13_ED46831A45C264F69093958C73920A03, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, RotationOffsetPreview_19_166AE01D40328502CF6878924CF328B3, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, ScalePreview_39_95AAE0F84CB90D4DB603DFBF354166F0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, Class_9_52116F214F63A71A89EE438ACAE9AE21, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, PlaceableLimitName_22_3ED07C554A73DE74451717868639F95D, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, PleaceableLimitMax_26_9860251E42753A8D1391B39EF7D66532, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, BoxCheckExtents_44_281444B8406D0DA743BCBAB34686B9AF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, BoxCheckOffset_46_7AF526004FDD6629C1F95A840A3A279E, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, SpawnActorOffset_36_8DFF3968447DA5478505C4A626FC494A, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_ToolBoxSpawnable, DoNotAttach_41_23D7DA6D43927E8B2BD03896E629F39B, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBP_ToolBoxSpawnable, 0x0071);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_ZYUQ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_0MHY, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0028);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_508Y, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_ZJ62, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_4J0M, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_H8I6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_4G45, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FDatasmithCameraLookatTrackingSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLookatTrackingSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, UnknownData_QXMO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, ActorToTrack, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLookatTrackingSettingsTemplate, 0x0030);
		}

		// struct FDatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// struct FDatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// struct FDatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_E2IY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// struct FDatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_XQY3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_SC36, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_BFEC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraShutterSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, DepthOfFieldFstop, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// struct FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, StitchingTechnique, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, UnknownData_XQ2R, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x0010);
		}

		// struct FDatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x0008);
		}

		// struct FDatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// struct FDatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// struct FDatasmithStaticParameterSetTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticParameterSetTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticParameterSetTemplate, StaticSwitchParameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticParameterSetTemplate, 0x0050);
		}

		// struct FDatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// struct FDatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_XHH8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// struct FDatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialInterface, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0010);
		}

		// struct FDatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeAnimation, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_IEAO, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0014);
		}

		// struct FDatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// struct FCapturedPropSegment
		TEST_METHOD(ScriptStruct__VariantManagerContent__CapturedPropSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, UnknownData_Y0BL, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, ComponentName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPropSegment, 0x0028);
		}

		// struct FFunctionCaller
		TEST_METHOD(ScriptStruct__VariantManagerContent__FunctionCaller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionCaller, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionCaller, 0x0008);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_6DPX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_CM6B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_Z3Z1, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0050);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_RHTD, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_YYMB, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0038);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_XHU4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_KQMB, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_CKVR, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_9Z0B, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0058);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__NetCore__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_Y628, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x000C);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, Username, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Username, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, Username, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, Username, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_F7Z7, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_IPR3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_4V88, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FChaosHandlerSet
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosHandlerSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, UnknownData_P5LO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, ChaosHandlers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosHandlerSet, 0x0058);
		}

		// struct FBreakEventCallbackWrapper
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__BreakEventCallbackWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreakEventCallbackWrapper, UnknownData_WUPS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBreakEventCallbackWrapper, 0x0040);
		}

		// struct FChaosDebugSubstepControl
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosDebugSubstepControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bPause, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bSubstep, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bStep, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDebugSubstepControl, 0x0003);
		}

		// struct FChaosPhysicsCollisionInfo
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosPhysicsCollisionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Normal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AccumulatedImpulse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Velocity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AngularVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherAngularVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Mass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherMass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, UnknownData_OKI6, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsCollisionInfo, 0x0070);
		}

		// struct FChaosBreakEvent
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosBreakEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Velocity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, AngularVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Mass, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakEvent, 0x0030);
		}

		// struct FSolverCollisionData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AccumulatedImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Normal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndexMesh, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndexMesh, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionData, 0x006C);
		}

		// struct FSolverBreakingData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverBreakingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingData, 0x0030);
		}

		// struct FRecordedFrame
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__RecordedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, TransformIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, PreviousTransformIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, DisabledFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Collisions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Breakings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Trailings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Timestamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, UnknownData_XM4M, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedFrame, 0x00B8);
		}

		// struct FRecordedTransformTrack
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__RecordedTransformTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedTransformTrack, Records, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedTransformTrack, 0x0010);
		}

		// struct FSolverTrailingData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverTrailingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingData, 0x0030);
		}

		// struct FMovieSceneMediaPlayerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaPlayerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, MediaSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, SectionStartFrame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, bLoop, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, UnknownData_VANJ, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaPlayerPropertySectionTemplate, 0x0058);
		}

		// struct FMovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSoundComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaPlayer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionEndFrame, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, bLooping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_DSO3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, StartFrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0030);
		}

		// struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0050);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, ComponentName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, SocketName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0028);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_YR4F, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_7VL8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00B0);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_LWG2, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_BREF, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_4ZOW, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneEventPtrs
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPtrs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, Function, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, BoundObjectProperty, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPtrs, 0x0028);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, Ptrs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0028);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_DYAY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_JT9K, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_FY2P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FTransformParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__TransformParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Translation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Rotation, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Scale, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformParameterNameAndCurves, 0x05A8);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_3WA2, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_K01Q, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bForceCustomMode, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_2ZYH, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_P4G3, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00D8);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_SG8S, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieScene3DAttachSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DAttachSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachComponentName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentLocationRule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentRotationRule, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentScaleRule, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentLocationRule, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentRotationRule, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentScaleRule, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, UnknownData_2BQQ, 0x004E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DAttachSectionTemplate, 0x0050);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_MWAS, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_2YAV, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_V5X3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_7UZ3, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_3EUE, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_MPCP, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_YAJI, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_3I5Z, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FMovieSceneComponentTransformSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentTransformSectionTemplate, TemplateData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentTransformSectionTemplate, 0x0670);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00F8);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioSection, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x0028);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_X3AU, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_NI35, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraCutSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraCutSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CameraBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_9AE9, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CutTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bHasCutTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bIsFinalSection, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_DPQO, 0x0072);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraCutSectionTemplate, 0x0080);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_BDQH, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_J7U3, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneEventPayloadVariable
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPayloadVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPayloadVariable, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPayloadVariable, 0x0010);
		}

		// struct FMovieSceneEventTemplateBase : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, EventReceivers, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, UnknownData_EJRW, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTemplateBase, 0x0038);
		}

		// struct FMovieSceneEventRepeaterTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventRepeaterTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventRepeaterTemplate, EventToTrigger, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventRepeaterTemplate, 0x0060);
		}

		// struct FMovieSceneEventTriggerTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventTimes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, Events, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerTemplate, 0x0058);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_NIT1, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneLevelVisibilitySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneLevelVisibilitySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, Visibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, UnknownData_IU8N, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, LevelNames, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneLevelVisibilitySectionTemplate, 0x0038);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// struct FBoolParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__BoolParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolParameterNameAndCurve, 0x0098);
		}

		// struct FVector2DParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__Vector2DParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, YCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2DParameterNameAndCurves, 0x0148);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Bools, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vector2Ds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Transforms, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0088);
		}

		// struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneObjectPropertyTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPropertyTemplate, ObjectChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPropertyTemplate, 0x0108);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_19CZ, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0088);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScenePrimitiveMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, UnknownData_L7FT, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialChannel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePrimitiveMaterialTemplate, 0x00E8);
		}

		// struct FMovieSceneEulerTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEulerTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEulerTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEulerTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_D5Q5, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02D0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00E8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_2LH1, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneFloatPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFloatPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, FloatFunction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, BlendType, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, UnknownData_9PKM, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatPropertySectionTemplate, 0x00F0);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00E0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x0100);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneSpawnSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSpawnSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnSectionTemplate, Curve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnSectionTemplate, 0x00B0);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_PHGT, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_FQKL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_17HM, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00D8);
		}

		// struct FTimedDataInputEvaluationData
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataInputEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToNewestSampleSeconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToOldestSampleSeconds, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataInputEvaluationData, 0x0008);
		}

		// struct FTimedDataChannelSampleTime
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataChannelSampleTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataChannelSampleTime, UnknownData_QQPX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataChannelSampleTime, 0x0018);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_3GHB, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FCCDIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__CCDIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCCDIKChainLink, UnknownData_Z3CD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCCDIKChainLink, 0x0080);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_P3RB, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_G23Z, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_KP0H, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_QS6X, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_NUAM, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_KQJ9, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_LN4M, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_7E4W, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_3VYN, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_6VOB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FFABRIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__FABRIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFABRIKChainLink, UnknownData_6R86, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFABRIKChainLink, 0x0038);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_QDE6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FTransformNoScale
		TEST_METHOD(ScriptStruct__AnimationCore__TransformNoScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, UnknownData_4D6I, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformNoScale, 0x0020);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_OL02, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_EU40, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00C8);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_6W32, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_CGH2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_OE1H, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_JKZ3, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_50ZJ, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_96NT, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_OZKO, 0x01D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x01D8);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_T2AH, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_SXC9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E0);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_YS90, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_6EV1, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x01B0);
		}

		// struct FRotationRetargetingInfo
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationRetargetingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_9M7S, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, RotationComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_9SA0, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TwistAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bUseAbsoluteAngle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_FXBE, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMinimum, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMaximum, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMinimum, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMaximum, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingType, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_1KNF, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, CustomCurve, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bFlipEasing, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_LD6R, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingWeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_0I1A, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationRetargetingInfo, 0x0130);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_DJJQ, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_DFVN, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x0048);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_1NJY, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0024);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0040);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_P9SR, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_XB2S, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_49C8, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_APH7, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RetargetingSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_I6V3, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0440);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_A77T, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_ZD1P, 0x00C6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00C8);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0028);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x00E8);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_Y4B6, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0024);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_QHU8, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_RY1D, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_FR9V, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0068);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, TransitionType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_CPCG, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_KKX2, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0098);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_OX7G, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00A0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_6WLS, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00B0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_ONX9, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00A0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_GYWX, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00E8);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_P4WW, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0118);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_KJQP, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_XQ0A, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x0180);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_94XT, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x001C);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_LLW9, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0108);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_ITVI, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x00F0);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x00F8);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bUseAttachedParent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCurves, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_VP5T, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x0140);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_4R8O, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0040);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_EL3M, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_83KZ, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x0190);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_OR57, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0120);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceScaleBlend, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_44QK, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_VOVR, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_RB8I, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00C0);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x002C);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_2B4D, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x00F8);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_AC7F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00A0);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_9SES, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0038);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_W65Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x003C);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_KYWI, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_08PU, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_WZ0F, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x01B0);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_FT8S, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0038);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_CTC2, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0108);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_3YPB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_H28I, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0058);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_F543, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_UFUV, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0050);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_IDNV, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0100);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_JCZ8, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0078);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_ZLRG, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x0098);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_OPWF, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x0090);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DistanceMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, FunctionType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_5L2S, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_J6DL, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bIsHidden, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_YGA6, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00C0);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, SolverType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_STF6, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_ECC0, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, NormalizeMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_AJZO, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMax, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x002C);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_EVIV, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_WR0W, 0x0127);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0128);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_OXH3, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x0090);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_3ZW2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0050);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_YUJ4, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_WP8A, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0078);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_WZO6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_1CQW, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x00D8);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_7249, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bForceDisableCollisionBetweenConstraintBodies, 0x01BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_HH1P, 0x01BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_B7FZ, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideSolverIterations, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_PVM8, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0590);
		}

		// struct FAnimNode_RigidBody_Chaos : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody_Chaos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverrideWorldGravity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ExternalForce, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentLinearAccScale, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentLinearVelScale, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentAppliedLinearAccClamp, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, CachedBoundsScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, BaseBoneRef, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverlapChannel, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, SimulationSpace, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, bForceDisableCollisionBetweenConstraintBodies, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverrideSolverIterations, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, UnknownData_R2T3, 0x013C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody_Chaos, 0x0580);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_3DZ3, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00A0);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_UL2B, 0x00EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x00F0);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_B9T9, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_UASX, 0x0186);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0188);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_NXNL, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_AOI7, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x0078);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_7SEF, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_3B1D, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0048);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_95XX, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0048);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_D5UA, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_219R, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_YQRV, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0260);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0014);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_I4P1, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_CDZC, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0128);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0030);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_V71W, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_SB89, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, MaxDeltaTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_GX69, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0260);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0020);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_4I6V, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0138);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_AZX3, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_FIQP, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00C8);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_U3JK, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0930);
		}

		// struct FPositionHistory
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PositionHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Positions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Range, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, UnknownData_C2AB, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPositionHistory, 0x0030);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_AT95, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, DistanceMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, FunctionType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_HQYV, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x00A0);
		}

		// struct FMyPluginStruct
		TEST_METHOD(ScriptStruct__UObjectPlugin__MyPluginStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMyPluginStruct, TestString, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMyPluginStruct, 0x0010);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_TLPS, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, SeekTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, PlayOnOpen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Loop, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_1SBW, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x0030);
		}

		// struct FChaosCollisionEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxNumberResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, UnknownData_FST2, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventRequestSettings, 0x0018);
		}

		// struct FChaosBreakingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinMass, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, UnknownData_4PWL, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventRequestSettings, 0x0018);
		}

		// struct FChaosTrailingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinAngularSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, UnknownData_KES7, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventRequestSettings, 0x0018);
		}

		// struct FGeomComponentCacheParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeomComponentCacheParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CacheMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_8RAH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TargetCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, ReverseCacheBeginTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveCollisionData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateCollisionData, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_N36K, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSizeMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoCollisionDataSpatialHash, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_JV3N, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSpatialHashRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxCollisionPerCell, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveBreakingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateBreakingData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_W1B0, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSizeMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoBreakingDataSpatialHash, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_UNDC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSpatialHashRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxBreakingPerCell, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveTrailingData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateTrailingData, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_VZCD, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingDataSizeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinSpeedThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinVolumeThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_LSSG, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomComponentCacheParameters, 0x0050);
		}

		// struct FGeometryCollectionDebugDrawWarningMessage
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawWarningMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawWarningMessage, UnknownData_XCLK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawWarningMessage, 0x0001);
		}

		// struct FGeometryCollectionDebugDrawActorSelectedRigidBody
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawActorSelectedRigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, UnknownData_BIIJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, Solver, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, GeometryCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, 0x0018);
		}

		// struct FGeometryCollectionSizeSpecificData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSizeSpecificData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, ImplicitType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, UnknownData_WQ3M, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinLevelSetResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxLevelSetResolution, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinClusterLevelSetResolution, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxClusterLevelSetResolution, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionObjectReductionPercentage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionParticlesFraction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaximumCollisionParticles, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSizeSpecificData, 0x0024);
		}

		// struct FChaosCollisionEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Impulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, UnknownData_LDKO, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventData, 0x0058);
		}

		// struct FChaosBreakingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Mass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventData, 0x001C);
		}

		// struct FChaosTrailingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, ParticleIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventData, 0x002C);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_B88C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_37GS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// struct FGeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_9LGF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_SWUF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FMagicLeapSharedWorldSharedData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldSharedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldSharedData, PinIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldSharedData, 0x0010);
		}

		// struct FMagicLeapSharedWorldAlignmentTransforms
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldAlignmentTransforms)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldAlignmentTransforms, AlignmentTransforms, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldAlignmentTransforms, 0x0010);
		}

		// struct FMagicLeapSharedWorldPinData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldPinData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinState, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldPinData, 0x0020);
		}

		// struct FMagicLeapSharedWorldLocalData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldLocalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldLocalData, LocalPins, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldLocalData, 0x0010);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__AssetRegistry__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_78ZD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_SMLW, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00E8);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_3UB2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetRegistryDependencyOptions
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetRegistryDependencyOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftPackageReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardPackageReferences, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSearchableNames, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftManagementReferences, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardManagementReferences, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetRegistryDependencyOptions, 0x0005);
		}

		// struct FAudioCaptureDeviceInfo
		TEST_METHOD(ScriptStruct__AudioCapture__AudioCaptureDeviceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, DeviceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, NumInputChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, SampleRate, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioCaptureDeviceInfo, 0x0010);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FLocationServicesData
		TEST_METHOD(ScriptStruct__LocationServicesBPLibrary__LocationServicesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Longitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Latitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, HorizontalAccuracy, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, VerticalAccuracy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Altitude, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationServicesData, 0x0018);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_6EEA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_X67Z, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_48MQ, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0028);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_12K6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0030);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x000C);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_CE27, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0030);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_7OTW, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_1EHY, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x0038);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_GWWV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_6XT2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_XMBH, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0098);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_L3RK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x00A0);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_M77Q, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_VBE9, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0028);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_XZ5K, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_FR11, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FForceFeedbackParameters
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bLooping, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bIgnoreTimeDilation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bPlayWhilePaused, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, UnknownData_2V9T, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackParameters, 0x000C);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_4IQR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x0088);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, UnknownData_AG2J, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_ONBJ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_IEYM, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_H7I8, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_6LC3, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_42PQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_L741, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_WM7O, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FInstancedStaticMeshLightMapInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshLightMapInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshLightMapInstanceData, 0x0040);
		}

		// struct FActorComponentDuplicatedObjectData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentDuplicatedObjectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentDuplicatedObjectData, UnknownData_AFCD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentDuplicatedObjectData, 0x0010);
		}

		// struct FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_MPR5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentCreationMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_VC6N, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTypeSerializedIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SavedProperties, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, DuplicatedObjects, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedNames, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentInstanceData, 0x0058);
		}

		// struct FSceneComponentInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SceneComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneComponentInstanceData, AttachedInstanceComponents, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneComponentInstanceData, 0x00A8);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, StaticMesh, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, CachedStaticLighting, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_LM3M, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, InstancingRandomSeed, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_6GPI, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshComponentInstanceData, 0x0140);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_MYLA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0060);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_OZAU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0068);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_950T, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0080);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_ASDH, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_I25Q, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_TGZH, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_0L7R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x0060);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_PHIE, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TangentTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x0088);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_TKX6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_GJA4, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x0127);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_D6CZ, 0x012A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x012C);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_6439, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_C6P3, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_3WS3, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, Transform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, LightGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, PreviewShadowMapChannel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_RR5E, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedLightInstanceData, 0x0100);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_XWVU, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_J7YZ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_H4M0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_RIEM, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FParameterChannelNames
		TEST_METHOD(ScriptStruct__Engine__ParameterChannelNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterChannelNames, 0x0060);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_0FTZ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_NZE4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_5EX6, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_24OY, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ISMComponentToUse, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentVertices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TerminationCriterion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_O5HQ, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x000C);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_33JE, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_L0GV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_WH7V, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCustomPrimitiveData
		TEST_METHOD(ScriptStruct__Engine__CustomPrimitiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPrimitiveData, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPrimitiveData, 0x0010);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_SGO1, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x000C);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_KEQQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_HEC3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FBodyInstance
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_Y8A1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_WSFP, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_2ZWB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_0JG7, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_21UT, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_USRD, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_NMTK, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_1IZQ, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0110);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, MetaData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0068);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_FZVY, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0028);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_DTHG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_HDCT, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_2JOM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_70PY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_CKXV, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_HSJF, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_8X40, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_MJDQ, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_NNE2, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_XP0V, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00B8);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_OLBH, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_G10B, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FRealCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RealCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PreInfinityExtrap, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PostInfinityExtrap, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, UnknownData_UX69, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRealCurve, 0x0070);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_4XAA, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0080);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0088);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_386K, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_HRB3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_JR5E, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00B0);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FAttenuationSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AttenuationSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, UnknownData_ED09, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, ManualSubmixSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, CustomSubmixSendCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttenuationSubmixSendSettings, 0x00A8);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_FSQP, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, BinauralRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMethod, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_XE4U, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SubmixSendSettings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMax, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMin, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMax, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualPriorityAttenuation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_JWVO, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomPriorityAttenuationCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x03A0);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_WO5X, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_5HG9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FChannelDefinition
		TEST_METHOD(ScriptStruct__Engine__ChannelDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, StaticChannelIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bTickOnCreate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bServerOpen, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bClientOpen, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialServer, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialClient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, UnknownData_N9AO, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelDefinition, 0x0028);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_0BUR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0010);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LowPassFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, AttenuationDistanceScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_TPD1, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LoadingBehavior, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_WHS1, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, DefaultSubmix, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_CULT, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x0058);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_AI65, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_TGIJ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0068);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_2OVS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_93RN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_WIJW, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_XG0E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_VVZV, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_6S1I, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_YKFO, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0280);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_W3W6, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_Q9L1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x0110);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_CY47, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_A2SW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_LQUE, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bHasValidCookedData, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_MZM4, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0048);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0078);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_YDWE, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_TYJL, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0018);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0014);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_HHTK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_WO4I, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_D92S, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_BWF8, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_GOD8, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_GIO4, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputActionSpeechMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionSpeechMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, SpeechKeyword, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionSpeechMapping, 0x0010);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_OBJA, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x000C);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x000C);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x000C);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x000C);
		}

		// struct FMaterialShadingModelField
		TEST_METHOD(ScriptStruct__Engine__MaterialShadingModelField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialShadingModelField, ShadingModelField, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialShadingModelField, 0x0002);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0010);
		}

		// struct FShadingModelMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ShadingModelMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShadingModelMaterialInput, 0x000C);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_XRE9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// struct FMaterialCachedParameterEntry
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameterEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, NameHashes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ParameterInfos, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ExpressionGuids, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, Overrides, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameterEntry, 0x0040);
		}

		// struct FMaterialCachedParameters
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, Entries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, ScalarValues, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, VectorValues, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, TextureValues, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontValues, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontPageValues, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeVirtualTextureValues, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameters, 0x01A0);
		}

		// struct FMaterialCachedExpressionData
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedExpressionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, Parameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ReferencedTextures, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, FunctionInfos, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ParameterCollectionInfos, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayers, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayerBlends, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, GrassTypes, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DynamicParameterNames, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, QualityLevelsUsed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, UnknownData_JZ5J, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedExpressionData, 0x0228);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_B2JF, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_3O8F, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_H3WT, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0020);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0020);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_4LTW, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_BP1P, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FEquirectProps
		TEST_METHOD(ScriptStruct__Engine__EquirectProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftUVRect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightUVRect, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightBias, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquirectProps, 0x0048);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_D6WL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_N894, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0020);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0020);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_J36Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x06E0);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_W263, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x0830);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bForceOpaque, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, UnknownData_RBA0, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_S2K8, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_QWNK, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FPerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_4W41, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_QYWH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_R467, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_ZZL7, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_EJ9T, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, ComponentTransform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, VisibilityId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_2LYM, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, LODParent, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentInstanceData, 0x00F0);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0020);
		}

		// struct FStaticMeshVertexColorLODData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshVertexColorLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, PaintedVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, VertexBufferColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, UnknownData_TEJ0, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshVertexColorLODData, 0x0028);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StaticMesh, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, VertexColorLODs, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, CachedStaticLighting, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StreamingTextureData, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, UnknownData_Q18O, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentInstanceData, 0x0130);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_JPGC, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_D4N6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_XBUO, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0024);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_SEVG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_RLDF, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_ZTD4, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_PMI5, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_JZOK, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00B0);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_BYAC, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x003C);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_A5HF, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_3MIU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0090);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_I6C4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_U3PC, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x000C);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_RFHY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_DQ4Z, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_XGOK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0030);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_MIQ6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x0090);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_DE02, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FDebugCameraControllerSettingsViewModeIndex
		TEST_METHOD(ScriptStruct__Engine__DebugCameraControllerSettingsViewModeIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_ZRYN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_SVUB, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugCameraControllerSettingsViewModeIndex, 0x0010);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_EQOO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_C8H3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_QQP6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00B0);
		}

		// struct FMulticastRecordOptions
		TEST_METHOD(ScriptStruct__Engine__MulticastRecordOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, FuncPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bServerSkip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bClientSkip, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, UnknownData_QRC8, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMulticastRecordOptions, 0x0018);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_WLNH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_JU72, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_GOVI, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_2VX0, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipLoadOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DuplicateNonOptionalMips, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_GJ9F, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0054);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_9Z0G, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_6HBX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0038);
		}

		// struct FLevelStreamingWrapper
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingWrapper, StreamingLevel, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingWrapper, 0x0008);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_KVHR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0078);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_S3UC, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_R3IB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_DF8T, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_U7Q2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0094);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_U5PN, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_ZQIS, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, LayerNodeIndices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_GK9A, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0058);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_17MC, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_AKI0, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_BVYD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0020);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0048);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_W9BF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_95DM, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_6SFH, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_LQXK, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_H6UY, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_Y4KI, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_NJN8, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasBackup, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_3KFO, 0x0315);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_LL3S, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasCurve, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMeterMask, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_5JRU, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionTemporalBlendWeight, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_Y52X, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOSamplesPerPixel, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIType, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_Y9Q7, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIMaxBounces, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGISamplesPerPixel, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurTargetFPS, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ReflectionsType, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_W13B, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxRoughness, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxBounces, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsSamplesPerPixel, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsShadows, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, TranslucencyType, 0x0506);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_N5IZ, 0x0507);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyMaxRoughness, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyRefractionRays, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencySamplesPerPixel, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyShadows, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_SQSB, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingMaxBounces, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingSamplesPerPixel, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_3I4W, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0540);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_3CW4, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_PX6N, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_EXRA, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_AUWV, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x05D0);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_SAN7, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_ZFG1, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x05F0);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_VO88, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_WJJU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_KTGU, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_B1J3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_3CE5, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0010);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0008);
		}

		// struct FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, UnknownData_S9NB, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterBase, 0x0024);
		}

		// struct FStaticComponentMaskParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_HIHS, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x002C);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FBPComponentClassOverride
		TEST_METHOD(ScriptStruct__Engine__BPComponentClassOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPComponentClassOverride, 0x0010);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_2P6U, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_SE0F, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleAttackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_SXNG, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleReleaseTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VoiceStealReleaseTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0020);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_FRAF, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_5MUG, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_OMUG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_IQ5Q, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x001C);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_9DVJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x05E0);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_NKR9, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_LK4B, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_K7YY, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0030);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_KN6D, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_3AWB, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_DJCM, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0048);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_C6DZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_H5PM, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_O6QN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_P96N, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_T6VG, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_5HZZ, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_JJA4, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_OSR8, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x0280);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_5P1T, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_EINY, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_4HKL, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEffectParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEffectParameters, UnknownData_B0FO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEffectParameters, 0x0008);
		}

		// struct FAudioEQEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_DNZN, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0040);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, LowPassFilterFrequency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_ODNG, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_HTHY, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0020);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_RKSU, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_OUZW, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0030);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_NI0V, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0048);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_ISHR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_4HND, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_J9O8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_HR2G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00A8);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_FWA4, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_J64M, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0030);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_NYXB, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Group, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0030);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_W3FJ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x000C);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FCompressedRichCurve
		TEST_METHOD(ScriptStruct__Engine__CompressedRichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedRichCurve, UnknownData_GN26, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedRichCurve, 0x0018);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_MZT5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_E3XN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_VR9V, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_RSMH, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_VZTQ, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_6DR1, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_YSQN, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_6HDU, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_DO3D, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// struct FRuntimeVirtualTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__RuntimeVirtualTextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeVirtualTextureParameterValue, 0x0028);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_KW2D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_G00B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_X5MO, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x000C);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_HVVS, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_JWXF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TerminationCriterion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_ZOY5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfVertPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfTriangles, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfVerts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_TWDO, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_BATU, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, VolumeImportance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_YVGD, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x003C);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_83P0, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BonesToPrioritize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, WeightOfPrioritization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_4TEQ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BakePose, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_WTY0, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0080);
		}

		// struct FTentDistribution
		TEST_METHOD(ScriptStruct__Engine__TentDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipAltitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, Width, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTentDistribution, 0x000C);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SurfaceAlbedo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, WorldUnitScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, bEnableBurley, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, UnknownData_CTRL, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, TransmissionTintColor, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x008C);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0014);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_99KB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_SXCN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_VVOV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_GXUE, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_CT4J, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_IQWN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_SU7X, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0018);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0028);
		}

		// struct FTTPropertyTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, PropertyName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTPropertyTrack, 0x0020);
		}

		// struct FTTFloatTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0028);
		}

		// struct FTTVectorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0028);
		}

		// struct FTTLinearColorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0028);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FVirtualTextureSpacePoolConfig
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureSpacePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MinTileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MaxTileSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, Formats, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, SizeInMegabyte, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, bAllowSizeScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_WBDR, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureSpacePoolConfig, 0x0020);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FStaticSwitchParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_HW98, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x001C);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_U3AQ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_91MP, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FSimpleCurveKey
		TEST_METHOD(ScriptStruct__Engine__SimpleCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurveKey, 0x0008);
		}

		// struct FSimpleCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__SimpleCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, InterpMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, UnknownData_KJ2X, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurve, 0x0088);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_OV50, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_L5UF, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_7KJ6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_59V0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_3BAD, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0014);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_SQ2O, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0030);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_L6FH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0030);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FStaticMaterialLayersParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_0J0Z, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_0MZI, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_GMZP, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x001C);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_A3DR, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0058);
		}

		// struct FExponentialHeightFogData
		TEST_METHOD(ScriptStruct__Engine__ExponentialHeightFogData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightFalloff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExponentialHeightFogData, 0x000C);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_CQZ4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_58PE, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_BQWK, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_MSS5, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_CFJM, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_QDGP, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_AGQA, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_DRXK, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00B0);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_EULU, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_FT7O, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_0GW8, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x00B0);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_U1HO, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0030);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_UN87, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_83P8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_I3QQ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x00B0);
		}

		// struct FSoundWaveSpectralDataEntry
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, Magnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, NormalizedMagnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataEntry, 0x0008);
		}

		// struct FSoundWaveEnvelopeTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, TimeSec, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeTimeData, 0x0008);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_R1S1, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_0UFJ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_KQIG, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0010);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0014);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_L5T1, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FCachedPoseIndices
		TEST_METHOD(ScriptStruct__Engine__CachedPoseIndices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPoseIndices, OrderedSavedPoseNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPoseIndices, 0x0010);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourcePropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceSubPropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceArrayIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, bInstanceIsTarget, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyType, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_877Z, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestProperty, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestArrayIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, Size, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceStructSubProperty, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0080);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, ValueHandlerNodeProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_WL6G, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0048);
		}

		// struct FGraphAssetPlayerInformation
		TEST_METHOD(ScriptStruct__Engine__GraphAssetPlayerInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphAssetPlayerInformation, PlayerNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphAssetPlayerInformation, 0x0010);
		}

		// struct FAnimGraphBlendOptions
		TEST_METHOD(ScriptStruct__Engine__AnimGraphBlendOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendOutTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGraphBlendOptions, 0x0008);
		}

		// struct FAnimBlueprintFunction
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Group, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, OutputPoseNodeIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_5SZI, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNodeIndices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_R5K3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, bImplemented, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_O7P1, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunction, 0x0068);
		}

		// struct FAnimBlueprintFunctionData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunctionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, OutputPoseNodeProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputPoseNodeProperties, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputProperties, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunctionData, 0x0040);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_VQR7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x000C);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0018);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0098);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_2013, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_WYV0, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_D9JB, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_JCGZ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_QMAG, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x000C);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_G65I, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_4BTY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_R99J, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_4B8L, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, bApplyReverb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_J07K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, bIsWorldSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_3GEJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FBandwidthTestItem
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestItem, Kilobyte, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestItem, 0x0010);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_WL6C, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_NF67, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_I9YN, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_Q50C, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_7GXQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0030);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0048);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0060);
		}

		// struct FNetworkEmulationProfileDescription
		TEST_METHOD(ScriptStruct__Engine__NetworkEmulationProfileDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, Tooltip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkEmulationProfileDescription, 0x0020);
		}

		// struct FSoundWaveSpectralTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, TimeSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, UnknownData_FQNI, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralTimeData, 0x0018);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_QFZN, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FVirtualTextureBuildSettings
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileBorderSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressCrunch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressZlib, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, UnknownData_VSJ0, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureBuildSettings, 0x000C);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_LT5X, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_RRKO, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FSkeletalMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, UnknownData_Q4I6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdTangentNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, MorphThresholdPosition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshBuildSettings, 0x0014);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BuildSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToPrioritize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, WeightOfPrioritization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_E8ED, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePoseOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SkinCacheUsage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_QOLE, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00B8);
		}

		// struct FPerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// struct FPerPlatformBool
		TEST_METHOD(ScriptStruct__Engine__PerPlatformBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformBool, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformBool, 0x0001);
		}

		// struct FSkinWeightProfileInfo
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfile, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, UnknownData_OHJD, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfileFromLODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileInfo, 0x0010);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_G4GZ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_D14H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeInstanceData, UnknownData_S5GT, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeInstanceData, 0x0150);
		}

		// struct FAudioReverbEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioReverbEffect, UnknownData_4OTF, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioReverbEffect, 0x0048);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_YYUW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_3HMW, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_QPLW, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D0);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_PLE9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_S0SH, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_0MNY, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_L7E1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_VN8F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_IBZ5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_2LE9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_RUJY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_PH2H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_1GAD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_6MPM, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0024);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_L6K5, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x001C);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_CVAC, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_QFON, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x001C);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_YLJZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_VW4P, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_3J1W, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0014);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x000C);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_TBV2, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_F2YL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_UYUT, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_1T0Q, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_EDVD, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_SSB4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_PY4H, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FSolverIterations
		TEST_METHOD(ScriptStruct__Engine__SolverIterations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverIterations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverPushOutIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointPushOutIterations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionPushOutIterations, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverIterations, 0x0018);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_ULSK, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0024);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x002C);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_DIW7, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_DP2L, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_2MO8, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_4TDN, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_TWW6, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_HE2Q, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x0104);
		}

		// struct FConstraintInstance
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_0BBM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_Y5LF, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_2Y6B, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01B8);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_FJFI, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_F6KB, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_RKJU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_IX6Q, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_BL0Y, 0x009F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00A0);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00A8);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_GNLU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0160);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0020);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0020);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_7I80, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_5K02, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x000C);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_VDIO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_Y7PR, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_542O, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x001C);
		}

		// struct FPrimaryAssetRulesCustomOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesCustomOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterDirectory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, Rules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, UnknownData_61PU, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesCustomOverride, 0x0038);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0014);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_Q8I2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_E2MB, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_THJR, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_ZGQI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_SSR7, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_POXX, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_KNCK, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_9R74, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_1P9I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, BiasCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MeterMask, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_I2GW, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0040);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_NJRN, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_NOSC, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_YIY5, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FBandwidthTestGenerator
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, ReplicatedBuffers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, UnknownData_0JUL, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestGenerator, 0x0020);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_2T3H, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_KN6J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0014);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x000C);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0020);
		}

		// struct FActiveCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__ActiveCameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeSource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveCameraShakeInfo, 0x0010);
		}

		// struct FPooledCameraShakes
		TEST_METHOD(ScriptStruct__Engine__PooledCameraShakes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPooledCameraShakes, PooledShakes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPooledCameraShakes, 0x0010);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_8YNI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_JID3, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_PXCC, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0048);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x000C);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_M157, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_H5XE, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0078);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavDataClass, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0078);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMaxSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLoss, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktJitter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0034);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_KRQ8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, ArrayReplicationKey, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_FD1I, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, DeltaFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_TYLV, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x0108);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x000C);
		}

		// struct FParticleSystemWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemWorldManagerTickFunction, UnknownData_SGCM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemWorldManagerTickFunction, 0x0030);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_7F17, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_R1ZF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FFreezablePerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__FreezablePerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreezablePerPlatformInt, UnknownData_J27N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreezablePerPlatformInt, 0x0004);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_PXMV, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_BXBI, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, Filename, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_YUUK, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0014);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_86KG, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_2CNV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_1C1I, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0088);
		}

		// struct FTextureFormatSettings
		TEST_METHOD(ScriptStruct__Engine__TextureFormatSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureFormatSettings, CompressionSettings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureFormatSettings, 0x0002);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_L00G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0030);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_YODF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0038);
		}

		// struct FTextureSourceBlock
		TEST_METHOD(ScriptStruct__Engine__TextureSourceBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumSlices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumMips, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSourceBlock, 0x0018);
		}

		// struct FStreamingRenderAssetPrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingRenderAssetPrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, RenderAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, UnknownData_WW9A, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingRenderAssetPrimitiveInfo, 0x0030);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_0DNM, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_JNLV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0030);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_GPLN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0030);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_2JJD, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_YPSB, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x004C);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_UBLR, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FStreamingLevelsToConsider
		TEST_METHOD(ScriptStruct__Engine__StreamingLevelsToConsider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, StreamingLevels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, UnknownData_D8Y2, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingLevelsToConsider, 0x0028);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_0IW5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_6VQ9, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FTireFrictionScalePair
		TEST_METHOD(ScriptStruct__Engine__TireFrictionScalePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, TireType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, UnknownData_ICWY, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireFrictionScalePair, 0x0010);
		}

		// struct FCustomDefine
		TEST_METHOD(ScriptStruct__Engine__CustomDefine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomDefine, 0x0020);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x010C);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_P5S1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x000C);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOuterBounds, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_UJ8B, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPOuterBounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0040);
		}

		// struct FChaosPhysicsSettings
		TEST_METHOD(ScriptStruct__Engine__ChaosPhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DefaultThreadingModel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadTickMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadBufferMode, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsSettings, 0x0003);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_E5XW, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_VDV4, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_0C8E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_3OBI, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_UDJA, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_AVXP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_WT7M, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_D9FF, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_41N5, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x000C);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_G2YX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0070);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_3CHM, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0014);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_X5EG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0078);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_ULRQ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_4F8C, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_PY40, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_EEIH, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0010);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_AQRV, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x000C);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0014);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x000C);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_K153, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_FRP7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_7ZQQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FStateMachineStateDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineStateDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineStateDebugData, UnknownData_KLLK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineStateDebugData, 0x0010);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FAnimationErrorStats
		TEST_METHOD(ScriptStruct__Engine__AnimationErrorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationErrorStats, UnknownData_UPTY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationErrorStats, 0x0010);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0198);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x04E0);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_2KQS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_88TY, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x0040);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_3AMG, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FAnimNode_Inertialization : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Inertialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, UnknownData_T065, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Inertialization, 0x0070);
		}

		// struct FInertializationPoseDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationPoseDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPoseDiff, UnknownData_N2IT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPoseDiff, 0x0028);
		}

		// struct FInertializationCurveDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationCurveDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationCurveDiff, UnknownData_Z5RD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationCurveDiff, 0x0008);
		}

		// struct FInertializationBoneDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationBoneDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationBoneDiff, UnknownData_2DN9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationBoneDiff, 0x003C);
		}

		// struct FInertializationPose
		TEST_METHOD(ScriptStruct__Engine__InertializationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPose, UnknownData_6GM7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPose, 0x0090);
		}

		// struct FAnimNode_CustomProperty : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_CustomProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, SourcePropertyNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, DestPropertyNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, TargetInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, UnknownData_G0KT, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CustomProperty, 0x0058);
		}

		// struct FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoseNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InstanceClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, Tag, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_LWMJ, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_EZO1, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimGraph, 0x00A0);
		}

		// struct FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Interface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Layer, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimLayer, 0x00B0);
		}

		// struct FAnimNode_LinkedInputPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedInputPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Graph, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, InputPose, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, UnknownData_5B3U, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedInputPose, 0x0078);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_CLXI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x00B8);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_4JUU, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0078);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_BSCU, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00B0);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_C0EB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_2849, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_OMI6, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_OW0Y, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_NRYY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_B6BQ, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x0058);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_QFFX, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0028);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0028);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_MRPS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_N6JN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, PathToComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_E8J4, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0028);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_WN4Z, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_XD12, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_WMFX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x000C);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_482D, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_GHH9, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_INEZ, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_AL53, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_TYQ4, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_NS52, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_QXKM, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_0AEZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_HOP2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_28WU, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_733A, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_LM5G, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_80E7, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_MJC2, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_QT37, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_FG71, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x00D0);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x003C);
		}

		// struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedSkyLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, LightGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, AverageBrightness, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, UnknownData_5CDE, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedSkyLightInstanceData, 0x0160);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_V4YD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0070);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_N7U8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0020);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_D1VF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_UTPR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FSoundWaveEnvelopeDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, Envelope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, PlaybackTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, SoundWave, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeDataPerSound, 0x0010);
		}

		// struct FSoundWaveSpectralData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, Magnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, NormalizedMagnitude, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralData, 0x000C);
		}

		// struct FSoundWaveSpectralDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SpectralData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, PlaybackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, UnknownData_UYVI, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SoundWave, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataPerSound, 0x0020);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_IYF8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FSplineInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, bSplineHasBeenEdited, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, UnknownData_2QOP, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurves, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurvesPreUCS, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineInstanceData, 0x0180);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_ZNK4, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FSplineMeshInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartPos, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndPos, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartTangent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndTangent, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshInstanceData, 0x00D8);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_HFKA, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_LSM5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_VIGG, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_WSZG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FChildActorAttachedActorInfo
		TEST_METHOD(ScriptStruct__Engine__ChildActorAttachedActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, SocketName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, RelativeTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorAttachedActorInfo, 0x0040);
		}

		// struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ChildActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorClass, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, AttachedActors, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_DYJE, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorComponentInstanceData, 0x00D8);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_F7AO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_M4J6, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x0208);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x000C);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_WNU6, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_4Y7S, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_Q3QK, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_QGOO, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FMediaSoundComponentSpectralData
		TEST_METHOD(ScriptStruct__MediaAssets__MediaSoundComponentSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, Magnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaSoundComponentSpectralData, 0x0008);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0014);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_WQFB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_OTOO, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_QE1Y, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_QIA6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_54TL, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_571G, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_1P9I, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_DP1C, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_UQ0V, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_78GS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_L8IQ, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_3M8I, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_2PQS, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_BAYG, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_LH0E, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_7TXQ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_IVHH, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_ZSMH, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_M5L0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_D28A, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_0YSP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_O6ZK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_H1QF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_0OAN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_NZHP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, bIsMinimalPatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_TFQP, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B8);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_1YKK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_1XNO, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FNiagaraDataInterfaceGeneratedFunction
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGeneratedFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGeneratedFunction, UnknownData_U3LU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGeneratedFunction, 0x0028);
		}

		// struct FNiagaraDataInterfaceGPUParamInfo
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGPUParamInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DataInterfaceHLSLSymbol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DIClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, GeneratedFunctions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGPUParamInfo, 0x0030);
		}

		// struct FNiagaraCompileEvent
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraCompileEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Severity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, UnknownData_KJMP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, NodeGuid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, PinGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, StackGuids, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileEvent, 0x0048);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_CSNL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filehash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_GRDY, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_SQ76, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_JAZN, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_361L, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Filesize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_3746, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_X8LK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_0FYT, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_3BMC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_IHH5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_V0KT, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_PWOC, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0060);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_6PU0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_C0YV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelSequenceCameraSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceCameraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, bOverrideAspectRatioAxisConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, AspectRatioAxisConstraint, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceCameraSettings, 0x0002);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_LJTS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_I5SW, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ActiveShot, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_JCBD, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x00B8);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_JFKZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_35DJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FClothConstraintSetupNv
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeNv__ClothConstraintSetupNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetupNv, 0x0010);
		}

		// struct FGameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_HDJW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// struct FPlayFabError
		TEST_METHOD(ScriptStruct__PlayFab__PlayFabError)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, HasError, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, UnknownData_7GGE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, ErrorCode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, ErrorName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, ErrorMessage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, ErrorDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabError, 0x0038);
		}

		// struct FPlayFabBaseModel
		TEST_METHOD(ScriptStruct__PlayFab__PlayFabBaseModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBaseModel, responseError, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBaseModel, responseData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabBaseModel, 0x0040);
		}

		// struct FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__PlayFabResultCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabResultCommon, Request, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabResultCommon, 0x0008);
		}

		// struct FAdminEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminEmptyResponse, 0x0008);
		}

		// struct FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__PlayFabRequestCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRequestCommon, AuthenticationContext, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabRequestCommon, 0x0008);
		}

		// struct FAdminAbortTaskInstanceRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAbortTaskInstanceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAbortTaskInstanceRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAbortTaskInstanceRequest, TaskInstanceId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAbortTaskInstanceRequest, 0x0020);
		}

		// struct FAdminAddLocalizedNewsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddLocalizedNewsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddLocalizedNewsResult, 0x0008);
		}

		// struct FAdminAddLocalizedNewsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddLocalizedNewsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddLocalizedNewsRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddLocalizedNewsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddLocalizedNewsRequest, Language, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddLocalizedNewsRequest, NewsId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddLocalizedNewsRequest, Title, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddLocalizedNewsRequest, 0x0050);
		}

		// struct FAdminAddNewsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddNewsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddNewsResult, NewsId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddNewsResult, 0x0018);
		}

		// struct FAdminAddNewsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddNewsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddNewsRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddNewsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddNewsRequest, Timestamp, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddNewsRequest, Title, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddNewsRequest, 0x0040);
		}

		// struct FAdminAddPlayerTagResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddPlayerTagResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddPlayerTagResult, 0x0008);
		}

		// struct FAdminAddPlayerTagRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddPlayerTagRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddPlayerTagRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddPlayerTagRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddPlayerTagRequest, TagName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddPlayerTagRequest, 0x0030);
		}

		// struct FAdminAddServerBuildResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddServerBuildResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, ActiveRegions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, BuildId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, CommandLineTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, Comment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, ExecutablePath, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, MaxGamesPerHost, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, MinFreeGameSlots, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, Status, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, UnknownData_EJ1Z, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, Timestamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, TitleId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddServerBuildResult, 0x0088);
		}

		// struct FAdminAddServerBuildRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddServerBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, ActiveRegions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, BuildId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, CommandLineTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, Comment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, CustomTags, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, ExecutablePath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, MaxGamesPerHost, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, MinFreeGameSlots, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddServerBuildRequest, 0x0068);
		}

		// struct FAdminModifyUserVirtualCurrencyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminModifyUserVirtualCurrencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyUserVirtualCurrencyResult, Balance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyUserVirtualCurrencyResult, BalanceChange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyUserVirtualCurrencyResult, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyUserVirtualCurrencyResult, VirtualCurrency, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminModifyUserVirtualCurrencyResult, 0x0030);
		}

		// struct FAdminAddUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddUserVirtualCurrencyRequest, UnknownData_JC6B, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddUserVirtualCurrencyRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddUserVirtualCurrencyRequest, VirtualCurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddUserVirtualCurrencyRequest, 0x0038);
		}

		// struct FAdminBlankResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminBlankResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminBlankResult, 0x0008);
		}

		// struct FAdminAddVirtualCurrencyTypesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddVirtualCurrencyTypesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddVirtualCurrencyTypesRequest, VirtualCurrencies, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddVirtualCurrencyTypesRequest, 0x0018);
		}

		// struct FAdminBanUsersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminBanUsersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminBanUsersResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminBanUsersResult, 0x0018);
		}

		// struct FAdminBanUsersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminBanUsersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminBanUsersRequest, Bans, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminBanUsersRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminBanUsersRequest, 0x0020);
		}

		// struct FAdminCheckLimitedEditionItemAvailabilityResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCheckLimitedEditionItemAvailabilityResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCheckLimitedEditionItemAvailabilityResult, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCheckLimitedEditionItemAvailabilityResult, UnknownData_S9EG, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCheckLimitedEditionItemAvailabilityResult, 0x0010);
		}

		// struct FAdminCheckLimitedEditionItemAvailabilityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCheckLimitedEditionItemAvailabilityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCheckLimitedEditionItemAvailabilityRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCheckLimitedEditionItemAvailabilityRequest, ItemId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCheckLimitedEditionItemAvailabilityRequest, 0x0028);
		}

		// struct FAdminCreateTaskResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateTaskResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateTaskResult, TaskId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateTaskResult, 0x0018);
		}

		// struct FAdminCreateActionsOnPlayerSegmentTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateActionsOnPlayerSegmentTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, IsActive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, UnknownData_3D9M, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, Parameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, Schedule, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, 0x0050);
		}

		// struct FAdminCreateCloudScriptTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateCloudScriptTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, IsActive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, UnknownData_46IJ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, Parameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, Schedule, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateCloudScriptTaskRequest, 0x0050);
		}

		// struct FAdminCreateInsightsScheduledScalingTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateInsightsScheduledScalingTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, IsActive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, UnknownData_635O, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, Parameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, Schedule, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateInsightsScheduledScalingTaskRequest, 0x0050);
		}

		// struct FAdminCreateOpenIdConnectionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateOpenIdConnectionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, ClientId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, ClientSecret, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, ConnectionId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, IgnoreNonce, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, UnknownData_H1IY, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, IssuerDiscoveryUrl, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, IssuerInformation, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateOpenIdConnectionRequest, 0x0058);
		}

		// struct FAdminCreatePlayerSharedSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreatePlayerSharedSecretResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerSharedSecretResult, SecretKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreatePlayerSharedSecretResult, 0x0018);
		}

		// struct FAdminCreatePlayerSharedSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreatePlayerSharedSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerSharedSecretRequest, FriendlyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreatePlayerSharedSecretRequest, 0x0018);
		}

		// struct FAdminCreatePlayerStatisticDefinitionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreatePlayerStatisticDefinitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionResult, Statistic, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreatePlayerStatisticDefinitionResult, 0x0010);
		}

		// struct FAdminCreatePlayerStatisticDefinitionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreatePlayerStatisticDefinitionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, AggregationMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, UnknownData_EWWH, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, StatisticName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, VersionChangeInterval, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, UnknownData_YBP3, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreatePlayerStatisticDefinitionRequest, 0x0030);
		}

		// struct FAdminCreateSegmentResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateSegmentResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateSegmentResponse, ErrorMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateSegmentResponse, SegmentId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateSegmentResponse, 0x0028);
		}

		// struct FAdminCreateSegmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateSegmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateSegmentRequest, SegmentModel, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateSegmentRequest, 0x0010);
		}

		// struct FAdminDeleteMasterPlayerAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteMasterPlayerAccountResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteMasterPlayerAccountResult, JobReceiptId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteMasterPlayerAccountResult, TitleIds, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteMasterPlayerAccountResult, 0x0028);
		}

		// struct FAdminDeletePlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeletePlayerResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeletePlayerResult, 0x0008);
		}

		// struct FAdminDeletePlayerSharedSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeletePlayerSharedSecretResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeletePlayerSharedSecretResult, 0x0008);
		}

		// struct FAdminDeleteSegmentsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteSegmentsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteSegmentsResponse, ErrorMessage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteSegmentsResponse, 0x0018);
		}

		// struct FAdminDeleteStoreResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteStoreResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteStoreResult, 0x0008);
		}

		// struct FAdminDeleteTitleResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteTitleResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteTitleResult, 0x0008);
		}

		// struct FAdminDeleteTitleDataOverrideResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteTitleDataOverrideResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteTitleDataOverrideResult, 0x0008);
		}

		// struct FAdminExportMasterPlayerDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminExportMasterPlayerDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminExportMasterPlayerDataResult, JobReceiptId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminExportMasterPlayerDataResult, 0x0018);
		}

		// struct FAdminGetActionsOnPlayersInSegmentTaskInstanceResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetActionsOnPlayersInSegmentTaskInstanceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetActionsOnPlayersInSegmentTaskInstanceResult, Parameter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetActionsOnPlayersInSegmentTaskInstanceResult, Summary, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetActionsOnPlayersInSegmentTaskInstanceResult, 0x0018);
		}

		// struct FAdminGetAllSegmentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetAllSegmentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetAllSegmentsResult, Segments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetAllSegmentsResult, 0x0018);
		}

		// struct FAdminGetCatalogItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCatalogItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCatalogItemsResult, Catalog, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCatalogItemsResult, 0x0018);
		}

		// struct FAdminGetCloudScriptRevisionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCloudScriptRevisionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, CreatedAt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, Files, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, IsPublished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, UnknownData_UJMW, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, Revision, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, Version, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, UnknownData_DHDS, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCloudScriptRevisionResult, 0x0038);
		}

		// struct FAdminGetCloudScriptTaskInstanceResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCloudScriptTaskInstanceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptTaskInstanceResult, Parameter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptTaskInstanceResult, Summary, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCloudScriptTaskInstanceResult, 0x0018);
		}

		// struct FAdminGetCloudScriptVersionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCloudScriptVersionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptVersionsResult, Versions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCloudScriptVersionsResult, 0x0018);
		}

		// struct FAdminGetContentListResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetContentListResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentListResult, Contents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentListResult, ItemCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentListResult, TotalSize, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetContentListResult, 0x0020);
		}

		// struct FAdminGetContentUploadUrlResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetContentUploadUrlResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentUploadUrlResult, URL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetContentUploadUrlResult, 0x0018);
		}

		// struct FAdminGetDataReportResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetDataReportResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportResult, DownloadUrl, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetDataReportResult, 0x0018);
		}

		// struct FAdminGetMatchmakerGameInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetMatchmakerGameInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, BuildVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, EndTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, LobbyId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, Mode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, Players, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, Region, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, UnknownData_J2DF, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, ServerIPV4Address, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, ServerIPV6Address, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, ServerPort, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, UnknownData_4CEF, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, ServerPublicDNSName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, StartTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, TitleId, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetMatchmakerGameInfoResult, 0x00B8);
		}

		// struct FAdminGetMatchmakerGameModesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetMatchmakerGameModesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameModesResult, GameModes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetMatchmakerGameModesResult, 0x0018);
		}

		// struct FAdminGetPlayedTitleListResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayedTitleListResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayedTitleListResult, TitleIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayedTitleListResult, 0x0018);
		}

		// struct FAdminGetPlayerIdFromAuthTokenResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerIdFromAuthTokenResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerIdFromAuthTokenResult, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerIdFromAuthTokenResult, 0x0018);
		}

		// struct FAdminGetPlayerProfileResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerProfileResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerProfileResult, PlayerProfile, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerProfileResult, 0x0010);
		}

		// struct FAdminGetPlayerSegmentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerSegmentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerSegmentsResult, Segments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerSegmentsResult, 0x0018);
		}

		// struct FAdminGetPlayerSharedSecretsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerSharedSecretsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerSharedSecretsResult, SharedSecrets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerSharedSecretsResult, 0x0018);
		}

		// struct FAdminGetPlayersInSegmentResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayersInSegmentResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentResult, ContinuationToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentResult, PlayerProfiles, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentResult, ProfilesInSegment, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentResult, UnknownData_5409, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayersInSegmentResult, 0x0030);
		}

		// struct FAdminGetPlayerStatisticDefinitionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerStatisticDefinitionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerStatisticDefinitionsResult, Statistics, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerStatisticDefinitionsResult, 0x0018);
		}

		// struct FAdminGetPlayerStatisticVersionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerStatisticVersionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerStatisticVersionsResult, StatisticVersions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerStatisticVersionsResult, 0x0018);
		}

		// struct FAdminGetPlayerTagsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerTagsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerTagsResult, PlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerTagsResult, Tags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerTagsResult, 0x0028);
		}

		// struct FAdminGetPolicyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPolicyResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPolicyResponse, PolicyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPolicyResponse, PolicyVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPolicyResponse, UnknownData_B0B0, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPolicyResponse, Statements, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPolicyResponse, 0x0030);
		}

		// struct FAdminGetPublisherDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPublisherDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPublisherDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPublisherDataResult, 0x0010);
		}

		// struct FAdminGetRandomResultTablesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetRandomResultTablesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetRandomResultTablesResult, Tables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetRandomResultTablesResult, 0x0010);
		}

		// struct FAdminGetSegmentsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetSegmentsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetSegmentsResponse, ErrorMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetSegmentsResponse, Segments, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetSegmentsResponse, 0x0028);
		}

		// struct FAdminGetServerBuildInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetServerBuildInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, ActiveRegions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, BuildId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, Comment, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, ErrorMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, MaxGamesPerHost, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, MinFreeGameSlots, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, Status, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, UnknownData_ZLCW, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, Timestamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, TitleId, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetServerBuildInfoResult, 0x0078);
		}

		// struct FAdminGetServerBuildUploadURLResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetServerBuildUploadURLResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildUploadURLResult, URL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetServerBuildUploadURLResult, 0x0018);
		}

		// struct FAdminGetStoreItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetStoreItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, MarketingData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, Source, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, UnknownData_80F2, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, Store, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, StoreId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetStoreItemsResult, 0x0048);
		}

		// struct FAdminGetTaskInstancesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTaskInstancesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesResult, Summaries, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTaskInstancesResult, 0x0018);
		}

		// struct FAdminGetTasksResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTasksResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTasksResult, Tasks, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTasksResult, 0x0018);
		}

		// struct FAdminGetTitleDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTitleDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTitleDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTitleDataResult, 0x0010);
		}

		// struct FAdminLookupUserAccountInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminLookupUserAccountInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminLookupUserAccountInfoResult, UserInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminLookupUserAccountInfoResult, 0x0010);
		}

		// struct FAdminGetUserBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserBansResult, 0x0018);
		}

		// struct FAdminGetUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataResult, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataResult, DataVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataResult, UnknownData_FI7T, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataResult, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserDataResult, 0x0028);
		}

		// struct FAdminGetUserInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryResult, Inventory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryResult, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryResult, VirtualCurrency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryResult, VirtualCurrencyRechargeTimes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserInventoryResult, 0x0038);
		}

		// struct FAdminGrantItemsToUsersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGrantItemsToUsersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGrantItemsToUsersResult, ItemGrantResults, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGrantItemsToUsersResult, 0x0018);
		}

		// struct FAdminIncrementLimitedEditionItemAvailabilityResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminIncrementLimitedEditionItemAvailabilityResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminIncrementLimitedEditionItemAvailabilityResult, 0x0008);
		}

		// struct FAdminIncrementPlayerStatisticVersionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminIncrementPlayerStatisticVersionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementPlayerStatisticVersionResult, StatisticVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminIncrementPlayerStatisticVersionResult, 0x0010);
		}

		// struct FAdminListOpenIdConnectionResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListOpenIdConnectionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminListOpenIdConnectionResponse, Connections, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListOpenIdConnectionResponse, 0x0018);
		}

		// struct FAdminListBuildsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListBuildsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminListBuildsResult, Builds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListBuildsResult, 0x0018);
		}

		// struct FAdminListVirtualCurrencyTypesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListVirtualCurrencyTypesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminListVirtualCurrencyTypesResult, VirtualCurrencies, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListVirtualCurrencyTypesResult, 0x0018);
		}

		// struct FAdminModifyMatchmakerGameModesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminModifyMatchmakerGameModesResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminModifyMatchmakerGameModesResult, 0x0008);
		}

		// struct FAdminModifyServerBuildResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminModifyServerBuildResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, ActiveRegions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, BuildId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, CommandLineTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, Comment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, ExecutablePath, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, MaxGamesPerHost, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, MinFreeGameSlots, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, Status, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, UnknownData_RK42, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, Timestamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, TitleId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminModifyServerBuildResult, 0x0088);
		}

		// struct FAdminRefundPurchaseResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRefundPurchaseResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRefundPurchaseResponse, PurchaseStatus, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRefundPurchaseResponse, 0x0018);
		}

		// struct FAdminRemovePlayerTagResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRemovePlayerTagResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRemovePlayerTagResult, 0x0008);
		}

		// struct FAdminRemoveServerBuildResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRemoveServerBuildResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRemoveServerBuildResult, 0x0008);
		}

		// struct FAdminResetCharacterStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetCharacterStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetCharacterStatisticsResult, 0x0008);
		}

		// struct FAdminResetPasswordResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetPasswordResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetPasswordResult, 0x0008);
		}

		// struct FAdminResetUserStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetUserStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetUserStatisticsResult, 0x0008);
		}

		// struct FAdminResolvePurchaseDisputeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResolvePurchaseDisputeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeResponse, PurchaseStatus, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResolvePurchaseDisputeResponse, 0x0018);
		}

		// struct FAdminRevokeAllBansForUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeAllBansForUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeAllBansForUserResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeAllBansForUserResult, 0x0018);
		}

		// struct FAdminRevokeBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeBansResult, 0x0018);
		}

		// struct FAdminRevokeInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeInventoryResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeInventoryResult, 0x0008);
		}

		// struct FAdminRevokeInventoryItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeInventoryItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeInventoryItemsResult, Errors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeInventoryItemsResult, 0x0018);
		}

		// struct FAdminRunTaskResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRunTaskResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRunTaskResult, TaskInstanceId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRunTaskResult, 0x0018);
		}

		// struct FAdminSendAccountRecoveryEmailResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSendAccountRecoveryEmailResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSendAccountRecoveryEmailResult, 0x0008);
		}

		// struct FAdminUpdateCatalogItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateCatalogItemsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateCatalogItemsResult, 0x0008);
		}

		// struct FAdminSetPlayerSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPlayerSecretResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPlayerSecretResult, 0x0008);
		}

		// struct FAdminSetPublishedRevisionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPublishedRevisionResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPublishedRevisionResult, 0x0008);
		}

		// struct FAdminSetPublisherDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPublisherDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPublisherDataResult, 0x0008);
		}

		// struct FAdminUpdateStoreItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateStoreItemsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateStoreItemsResult, 0x0008);
		}

		// struct FAdminSetTitleDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetTitleDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetTitleDataResult, 0x0008);
		}

		// struct FAdminSetTitleDataAndOverridesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetTitleDataAndOverridesResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetTitleDataAndOverridesResult, 0x0008);
		}

		// struct FAdminSetupPushNotificationResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetupPushNotificationResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationResult, ARN, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetupPushNotificationResult, 0x0018);
		}

		// struct FAdminUpdateBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateBansResult, 0x0018);
		}

		// struct FAdminUpdateCloudScriptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateCloudScriptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptResult, Revision, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptResult, Version, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateCloudScriptResult, 0x0010);
		}

		// struct FAdminUpdatePlayerSharedSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePlayerSharedSecretResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePlayerSharedSecretResult, 0x0008);
		}

		// struct FAdminUpdatePlayerStatisticDefinitionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePlayerStatisticDefinitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionResult, Statistic, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePlayerStatisticDefinitionResult, 0x0010);
		}

		// struct FAdminUpdatePolicyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePolicyResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyResponse, PolicyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyResponse, Statements, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePolicyResponse, 0x0028);
		}

		// struct FAdminUpdateRandomResultTablesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateRandomResultTablesResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateRandomResultTablesResult, 0x0008);
		}

		// struct FAdminUpdateSegmentResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateSegmentResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateSegmentResponse, ErrorMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateSegmentResponse, SegmentId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateSegmentResponse, 0x0028);
		}

		// struct FAdminUpdateUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataResult, DataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataResult, UnknownData_CQUO, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateUserDataResult, 0x0010);
		}

		// struct FAdminUpdateUserTitleDisplayNameResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateUserTitleDisplayNameResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserTitleDisplayNameResult, DisplayName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateUserTitleDisplayNameResult, 0x0018);
		}

		// struct FAdminDeleteContentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteContentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteContentRequest, Key, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteContentRequest, 0x0018);
		}

		// struct FAdminDeleteMasterPlayerAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteMasterPlayerAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteMasterPlayerAccountRequest, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteMasterPlayerAccountRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteMasterPlayerAccountRequest, 0x0028);
		}

		// struct FAdminDeleteOpenIdConnectionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteOpenIdConnectionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteOpenIdConnectionRequest, ConnectionId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteOpenIdConnectionRequest, 0x0018);
		}

		// struct FAdminDeletePlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeletePlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeletePlayerRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeletePlayerRequest, 0x0018);
		}

		// struct FAdminDeletePlayerSharedSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeletePlayerSharedSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeletePlayerSharedSecretRequest, SecretKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeletePlayerSharedSecretRequest, 0x0018);
		}

		// struct FAdminDeleteSegmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteSegmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteSegmentRequest, SegmentId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteSegmentRequest, 0x0018);
		}

		// struct FAdminDeleteStoreRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteStoreRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteStoreRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteStoreRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteStoreRequest, StoreId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteStoreRequest, 0x0030);
		}

		// struct FAdminDeleteTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteTaskRequest, Identifier, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteTaskRequest, 0x0010);
		}

		// struct FAdminDeleteTitleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteTitleRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteTitleRequest, 0x0008);
		}

		// struct FAdminDeleteTitleDataOverrideRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteTitleDataOverrideRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteTitleDataOverrideRequest, OverrideLabel, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteTitleDataOverrideRequest, 0x0018);
		}

		// struct FAdminExportMasterPlayerDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminExportMasterPlayerDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminExportMasterPlayerDataRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminExportMasterPlayerDataRequest, 0x0018);
		}

		// struct FAdminGetTaskInstanceRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTaskInstanceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstanceRequest, TaskInstanceId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTaskInstanceRequest, 0x0018);
		}

		// struct FAdminGetAllSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetAllSegmentsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetAllSegmentsRequest, 0x0008);
		}

		// struct FAdminGetCatalogItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCatalogItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCatalogItemsRequest, CatalogVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCatalogItemsRequest, 0x0018);
		}

		// struct FAdminGetCloudScriptRevisionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCloudScriptRevisionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionRequest, Revision, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionRequest, Version, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCloudScriptRevisionRequest, 0x0010);
		}

		// struct FAdminGetCloudScriptVersionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCloudScriptVersionsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCloudScriptVersionsRequest, 0x0008);
		}

		// struct FAdminGetContentListRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetContentListRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentListRequest, Prefix, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetContentListRequest, 0x0018);
		}

		// struct FAdminGetContentUploadUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetContentUploadUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentUploadUrlRequest, ContentType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentUploadUrlRequest, Key, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetContentUploadUrlRequest, 0x0028);
		}

		// struct FAdminGetDataReportRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetDataReportRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportRequest, Day, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportRequest, Month, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportRequest, ReportName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportRequest, Year, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportRequest, UnknownData_6RVD, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetDataReportRequest, 0x0028);
		}

		// struct FAdminGetMatchmakerGameInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetMatchmakerGameInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoRequest, LobbyId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetMatchmakerGameInfoRequest, 0x0018);
		}

		// struct FAdminGetMatchmakerGameModesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetMatchmakerGameModesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameModesRequest, BuildVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetMatchmakerGameModesRequest, 0x0018);
		}

		// struct FAdminGetPlayedTitleListRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayedTitleListRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayedTitleListRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayedTitleListRequest, 0x0018);
		}

		// struct FAdminGetPlayerIdFromAuthTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerIdFromAuthTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerIdFromAuthTokenRequest, Token, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerIdFromAuthTokenRequest, TokenType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerIdFromAuthTokenRequest, UnknownData_A09U, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerIdFromAuthTokenRequest, 0x0020);
		}

		// struct FAdminGetPlayerProfileRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerProfileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerProfileRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerProfileRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerProfileRequest, ProfileConstraints, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerProfileRequest, 0x0028);
		}

		// struct FAdminGetPlayersSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayersSegmentsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersSegmentsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersSegmentsRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayersSegmentsRequest, 0x0020);
		}

		// struct FAdminGetPlayerSharedSecretsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerSharedSecretsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerSharedSecretsRequest, 0x0008);
		}

		// struct FAdminGetPlayersInSegmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayersInSegmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentRequest, ContinuationToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentRequest, MaxBatchSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentRequest, SecondsToLive, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentRequest, SegmentId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayersInSegmentRequest, 0x0038);
		}

		// struct FAdminGetPlayerStatisticDefinitionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerStatisticDefinitionsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerStatisticDefinitionsRequest, 0x0008);
		}

		// struct FAdminGetPlayerStatisticVersionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerStatisticVersionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerStatisticVersionsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerStatisticVersionsRequest, StatisticName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerStatisticVersionsRequest, 0x0020);
		}

		// struct FAdminGetPlayerTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerTagsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerTagsRequest, Namespace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerTagsRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerTagsRequest, 0x0030);
		}

		// struct FAdminGetPolicyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPolicyRequest, PolicyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPolicyRequest, 0x0018);
		}

		// struct FAdminGetPublisherDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPublisherDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPublisherDataRequest, Keys, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPublisherDataRequest, 0x0018);
		}

		// struct FAdminGetRandomResultTablesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetRandomResultTablesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetRandomResultTablesRequest, CatalogVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetRandomResultTablesRequest, 0x0018);
		}

		// struct FAdminGetSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetSegmentsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetSegmentsRequest, SegmentIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetSegmentsRequest, 0x0018);
		}

		// struct FAdminGetServerBuildInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetServerBuildInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoRequest, BuildId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetServerBuildInfoRequest, 0x0018);
		}

		// struct FAdminGetServerBuildUploadURLRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetServerBuildUploadURLRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildUploadURLRequest, BuildId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetServerBuildUploadURLRequest, 0x0018);
		}

		// struct FAdminGetStoreItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetStoreItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsRequest, StoreId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetStoreItemsRequest, 0x0028);
		}

		// struct FAdminGetTaskInstancesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTaskInstancesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesRequest, StartedAtRangeFrom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesRequest, StartedAtRangeTo, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesRequest, StatusFilter, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesRequest, UnknownData_LUQB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesRequest, TaskIdentifier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTaskInstancesRequest, 0x0038);
		}

		// struct FAdminGetTasksRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTasksRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTasksRequest, Identifier, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTasksRequest, 0x0010);
		}

		// struct FAdminGetTitleDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTitleDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTitleDataRequest, Keys, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTitleDataRequest, OverrideLabel, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTitleDataRequest, 0x0028);
		}

		// struct FAdminLookupUserAccountInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminLookupUserAccountInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminLookupUserAccountInfoRequest, Email, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminLookupUserAccountInfoRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminLookupUserAccountInfoRequest, TitleDisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminLookupUserAccountInfoRequest, Username, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminLookupUserAccountInfoRequest, 0x0048);
		}

		// struct FAdminGetUserBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserBansRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserBansRequest, 0x0018);
		}

		// struct FAdminGetUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataRequest, IfChangedFromDataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataRequest, UnknownData_G3XY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataRequest, Keys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserDataRequest, 0x0030);
		}

		// struct FAdminGetUserInventoryRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserInventoryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserInventoryRequest, 0x0020);
		}

		// struct FAdminGrantItemsToUsersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGrantItemsToUsersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGrantItemsToUsersRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGrantItemsToUsersRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGrantItemsToUsersRequest, ItemGrants, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGrantItemsToUsersRequest, 0x0030);
		}

		// struct FAdminIncrementLimitedEditionItemAvailabilityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminIncrementLimitedEditionItemAvailabilityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, UnknownData_P9S0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, CatalogVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, ItemId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, 0x0038);
		}

		// struct FAdminIncrementPlayerStatisticVersionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminIncrementPlayerStatisticVersionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementPlayerStatisticVersionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementPlayerStatisticVersionRequest, StatisticName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminIncrementPlayerStatisticVersionRequest, 0x0020);
		}

		// struct FAdminListOpenIdConnectionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListOpenIdConnectionRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListOpenIdConnectionRequest, 0x0008);
		}

		// struct FAdminListBuildsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListBuildsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListBuildsRequest, 0x0008);
		}

		// struct FAdminListVirtualCurrencyTypesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListVirtualCurrencyTypesRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListVirtualCurrencyTypesRequest, 0x0008);
		}

		// struct FAdminModifyMatchmakerGameModesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminModifyMatchmakerGameModesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyMatchmakerGameModesRequest, BuildVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyMatchmakerGameModesRequest, GameModes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminModifyMatchmakerGameModesRequest, 0x0028);
		}

		// struct FAdminModifyServerBuildRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminModifyServerBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, ActiveRegions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, BuildId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, CommandLineTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, Comment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, CustomTags, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, ExecutablePath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, MaxGamesPerHost, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, MinFreeGameSlots, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, Timestamp, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminModifyServerBuildRequest, 0x0078);
		}

		// struct FAdminRefundPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRefundPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRefundPurchaseRequest, OrderId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRefundPurchaseRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRefundPurchaseRequest, Reason, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRefundPurchaseRequest, 0x0038);
		}

		// struct FAdminRemovePlayerTagRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRemovePlayerTagRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRemovePlayerTagRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRemovePlayerTagRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRemovePlayerTagRequest, TagName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRemovePlayerTagRequest, 0x0030);
		}

		// struct FAdminRemoveServerBuildRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRemoveServerBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRemoveServerBuildRequest, BuildId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRemoveServerBuildRequest, 0x0018);
		}

		// struct FAdminRemoveVirtualCurrencyTypesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRemoveVirtualCurrencyTypesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRemoveVirtualCurrencyTypesRequest, VirtualCurrencies, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRemoveVirtualCurrencyTypesRequest, 0x0018);
		}

		// struct FAdminResetCharacterStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetCharacterStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetCharacterStatisticsRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetCharacterStatisticsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetCharacterStatisticsRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetCharacterStatisticsRequest, 0x0030);
		}

		// struct FAdminResetPasswordRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetPasswordRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetPasswordRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetPasswordRequest, Password, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetPasswordRequest, Token, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetPasswordRequest, 0x0030);
		}

		// struct FAdminResetUserStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetUserStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetUserStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetUserStatisticsRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetUserStatisticsRequest, 0x0020);
		}

		// struct FAdminResolvePurchaseDisputeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResolvePurchaseDisputeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeRequest, OrderId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeRequest, Outcome, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeRequest, UnknownData_3YD7, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeRequest, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeRequest, Reason, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResolvePurchaseDisputeRequest, 0x0040);
		}

		// struct FAdminRevokeAllBansForUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeAllBansForUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeAllBansForUserRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeAllBansForUserRequest, 0x0018);
		}

		// struct FAdminRevokeBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeBansRequest, BanIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeBansRequest, 0x0018);
		}

		// struct FAdminRevokeInventoryItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeInventoryItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeInventoryItemRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeInventoryItemRequest, ItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeInventoryItemRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeInventoryItemRequest, 0x0038);
		}

		// struct FAdminRevokeInventoryItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeInventoryItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeInventoryItemsRequest, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeInventoryItemsRequest, 0x0018);
		}

		// struct FAdminRunTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRunTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRunTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRunTaskRequest, Identifier, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRunTaskRequest, 0x0018);
		}

		// struct FAdminSendAccountRecoveryEmailRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSendAccountRecoveryEmailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSendAccountRecoveryEmailRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSendAccountRecoveryEmailRequest, Email, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSendAccountRecoveryEmailRequest, EmailTemplateId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSendAccountRecoveryEmailRequest, 0x0030);
		}

		// struct FAdminUpdateCatalogItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateCatalogItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCatalogItemsRequest, Catalog, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCatalogItemsRequest, CatalogVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCatalogItemsRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCatalogItemsRequest, SetAsDefaultCatalog, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCatalogItemsRequest, UnknownData_549W, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateCatalogItemsRequest, 0x0038);
		}

		// struct FAdminSetPlayerSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPlayerSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPlayerSecretRequest, PlayerSecret, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPlayerSecretRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPlayerSecretRequest, 0x0028);
		}

		// struct FAdminSetPublishedRevisionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPublishedRevisionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPublishedRevisionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPublishedRevisionRequest, Revision, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPublishedRevisionRequest, Version, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPublishedRevisionRequest, 0x0018);
		}

		// struct FAdminSetPublisherDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPublisherDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPublisherDataRequest, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPublisherDataRequest, Value, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPublisherDataRequest, 0x0028);
		}

		// struct FAdminUpdateStoreItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateStoreItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateStoreItemsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateStoreItemsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateStoreItemsRequest, MarketingData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateStoreItemsRequest, Store, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateStoreItemsRequest, StoreId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateStoreItemsRequest, 0x0048);
		}

		// struct FAdminSetTitleDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetTitleDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetTitleDataRequest, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetTitleDataRequest, Value, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetTitleDataRequest, 0x0028);
		}

		// struct FAdminSetTitleDataAndOverridesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetTitleDataAndOverridesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetTitleDataAndOverridesRequest, KeyValues, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetTitleDataAndOverridesRequest, OverrideLabel, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetTitleDataAndOverridesRequest, 0x0028);
		}

		// struct FAdminSetupPushNotificationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetupPushNotificationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, Credential, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, Key, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, OverwriteOldARN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, Platform, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, UnknownData_R4RW, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetupPushNotificationRequest, 0x0040);
		}

		// struct FAdminSubtractUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSubtractUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSubtractUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSubtractUserVirtualCurrencyRequest, UnknownData_SH1N, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSubtractUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSubtractUserVirtualCurrencyRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSubtractUserVirtualCurrencyRequest, VirtualCurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSubtractUserVirtualCurrencyRequest, 0x0038);
		}

		// struct FAdminUpdateBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateBansRequest, Bans, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateBansRequest, 0x0018);
		}

		// struct FAdminUpdateCloudScriptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateCloudScriptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptRequest, DeveloperPlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptRequest, Files, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptRequest, Publish, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptRequest, UnknownData_9SZ0, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateCloudScriptRequest, 0x0038);
		}

		// struct FAdminUpdateOpenIdConnectionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateOpenIdConnectionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateOpenIdConnectionRequest, ClientId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateOpenIdConnectionRequest, ClientSecret, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateOpenIdConnectionRequest, ConnectionId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateOpenIdConnectionRequest, IssuerDiscoveryUrl, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateOpenIdConnectionRequest, IssuerInformation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateOpenIdConnectionRequest, 0x0050);
		}

		// struct FAdminUpdatePlayerSharedSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePlayerSharedSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerSharedSecretRequest, Disabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerSharedSecretRequest, UnknownData_5BX9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerSharedSecretRequest, FriendlyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerSharedSecretRequest, SecretKey, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePlayerSharedSecretRequest, 0x0030);
		}

		// struct FAdminUpdatePlayerStatisticDefinitionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePlayerStatisticDefinitionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionRequest, AggregationMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionRequest, UnknownData_B5RX, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionRequest, StatisticName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionRequest, VersionChangeInterval, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionRequest, UnknownData_O6Y7, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePlayerStatisticDefinitionRequest, 0x0028);
		}

		// struct FAdminUpdatePolicyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, OverwritePolicy, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, UnknownData_F0I5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, PolicyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, PolicyVersion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, UnknownData_3Z6I, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, Statements, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePolicyRequest, 0x0038);
		}

		// struct FAdminUpdateRandomResultTablesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateRandomResultTablesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateRandomResultTablesRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateRandomResultTablesRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateRandomResultTablesRequest, Tables, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateRandomResultTablesRequest, 0x0030);
		}

		// struct FAdminUpdateSegmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateSegmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateSegmentRequest, SegmentModel, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateSegmentRequest, 0x0010);
		}

		// struct FAdminUpdateTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Identifier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, IsActive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, UnknownData_55PZ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Parameter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Schedule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Type, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, UnknownData_BMKI, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateTaskRequest, 0x0060);
		}

		// struct FAdminUpdateUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, Permission, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, UnknownData_PN2S, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateUserDataRequest, 0x0040);
		}

		// struct FAdminUpdateUserInternalDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateUserInternalDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserInternalDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserInternalDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserInternalDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserInternalDataRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateUserInternalDataRequest, 0x0038);
		}

		// struct FAdminUpdateUserTitleDisplayNameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateUserTitleDisplayNameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserTitleDisplayNameRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserTitleDisplayNameRequest, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserTitleDisplayNameRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateUserTitleDisplayNameRequest, 0x0030);
		}

		// struct FAuthenticationGetEntityTokenResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AuthenticationGetEntityTokenResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationGetEntityTokenResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationGetEntityTokenResponse, EntityToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationGetEntityTokenResponse, TokenExpiration, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthenticationGetEntityTokenResponse, 0x0030);
		}

		// struct FAuthenticationValidateEntityTokenResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AuthenticationValidateEntityTokenResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenResponse, IdentifiedDeviceType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenResponse, IdentityProvider, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenResponse, UnknownData_UVCA, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenResponse, Lineage, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthenticationValidateEntityTokenResponse, 0x0020);
		}

		// struct FAuthenticationGetEntityTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AuthenticationGetEntityTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationGetEntityTokenRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationGetEntityTokenRequest, Entity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthenticationGetEntityTokenRequest, 0x0018);
		}

		// struct FAuthenticationValidateEntityTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AuthenticationValidateEntityTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenRequest, EntityToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthenticationValidateEntityTokenRequest, 0x0020);
		}

		// struct FClientAcceptTradeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAcceptTradeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAcceptTradeResponse, Trade, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAcceptTradeResponse, 0x0010);
		}

		// struct FClientAcceptTradeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAcceptTradeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAcceptTradeRequest, AcceptedInventoryInstanceIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAcceptTradeRequest, OfferingPlayerId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAcceptTradeRequest, TradeId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAcceptTradeRequest, 0x0038);
		}

		// struct FClientAddFriendResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddFriendResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendResult, Created, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendResult, UnknownData_TREV, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddFriendResult, 0x0010);
		}

		// struct FClientAddFriendRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddFriendRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendRequest, FriendEmail, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendRequest, FriendPlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendRequest, FriendTitleDisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendRequest, FriendUsername, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddFriendRequest, 0x0048);
		}

		// struct FClientAddGenericIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddGenericIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddGenericIDResult, 0x0008);
		}

		// struct FClientAddGenericIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddGenericIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddGenericIDRequest, GenericId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddGenericIDRequest, 0x0010);
		}

		// struct FClientAddOrUpdateContactEmailResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddOrUpdateContactEmailResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddOrUpdateContactEmailResult, 0x0008);
		}

		// struct FClientAddOrUpdateContactEmailRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddOrUpdateContactEmailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddOrUpdateContactEmailRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddOrUpdateContactEmailRequest, EmailAddress, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddOrUpdateContactEmailRequest, 0x0020);
		}

		// struct FClientAddSharedGroupMembersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddSharedGroupMembersResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddSharedGroupMembersResult, 0x0008);
		}

		// struct FClientAddSharedGroupMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddSharedGroupMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddSharedGroupMembersRequest, PlayFabIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddSharedGroupMembersRequest, SharedGroupId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddSharedGroupMembersRequest, 0x0028);
		}

		// struct FClientAddUsernamePasswordResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddUsernamePasswordResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUsernamePasswordResult, Username, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddUsernamePasswordResult, 0x0018);
		}

		// struct FClientAddUsernamePasswordRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddUsernamePasswordRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUsernamePasswordRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUsernamePasswordRequest, Email, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUsernamePasswordRequest, Password, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUsernamePasswordRequest, Username, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddUsernamePasswordRequest, 0x0040);
		}

		// struct FClientModifyUserVirtualCurrencyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientModifyUserVirtualCurrencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientModifyUserVirtualCurrencyResult, Balance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientModifyUserVirtualCurrencyResult, BalanceChange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientModifyUserVirtualCurrencyResult, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientModifyUserVirtualCurrencyResult, VirtualCurrency, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientModifyUserVirtualCurrencyResult, 0x0030);
		}

		// struct FClientAddUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUserVirtualCurrencyRequest, UnknownData_1QQ3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUserVirtualCurrencyRequest, VirtualCurrency, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddUserVirtualCurrencyRequest, 0x0028);
		}

		// struct FClientAndroidDevicePushNotificationRegistrationResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAndroidDevicePushNotificationRegistrationResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAndroidDevicePushNotificationRegistrationResult, 0x0008);
		}

		// struct FClientAndroidDevicePushNotificationRegistrationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAndroidDevicePushNotificationRegistrationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAndroidDevicePushNotificationRegistrationRequest, ConfirmationMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAndroidDevicePushNotificationRegistrationRequest, DeviceToken, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAndroidDevicePushNotificationRegistrationRequest, SendPushNotificationConfirmation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAndroidDevicePushNotificationRegistrationRequest, UnknownData_2TEC, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAndroidDevicePushNotificationRegistrationRequest, 0x0030);
		}

		// struct FClientAttributeInstallResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAttributeInstallResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAttributeInstallResult, 0x0008);
		}

		// struct FClientAttributeInstallRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAttributeInstallRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAttributeInstallRequest, Adid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAttributeInstallRequest, Idfa, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAttributeInstallRequest, 0x0028);
		}

		// struct FClientCancelTradeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCancelTradeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCancelTradeResponse, Trade, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCancelTradeResponse, 0x0010);
		}

		// struct FClientCancelTradeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCancelTradeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCancelTradeRequest, TradeId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCancelTradeRequest, 0x0018);
		}

		// struct FClientConfirmPurchaseResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConfirmPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConfirmPurchaseResult, Items, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConfirmPurchaseResult, OrderId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConfirmPurchaseResult, PurchaseDate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConfirmPurchaseResult, 0x0038);
		}

		// struct FClientConfirmPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConfirmPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConfirmPurchaseRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConfirmPurchaseRequest, OrderId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConfirmPurchaseRequest, 0x0020);
		}

		// struct FClientConsumeItemResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemResult, ItemInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemResult, RemainingUses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemResult, UnknownData_28UZ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeItemResult, 0x0020);
		}

		// struct FClientConsumeItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemRequest, ConsumeCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemRequest, UnknownData_9HNP, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemRequest, ItemInstanceId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeItemRequest, 0x0038);
		}

		// struct FClientConsumeMicrosoftStoreEntitlementsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeMicrosoftStoreEntitlementsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeMicrosoftStoreEntitlementsResponse, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeMicrosoftStoreEntitlementsResponse, 0x0018);
		}

		// struct FClientConsumeMicrosoftStoreEntitlementsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeMicrosoftStoreEntitlementsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeMicrosoftStoreEntitlementsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeMicrosoftStoreEntitlementsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeMicrosoftStoreEntitlementsRequest, MarketplaceSpecificData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeMicrosoftStoreEntitlementsRequest, 0x0028);
		}

		// struct FClientConsumePS5EntitlementsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumePS5EntitlementsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePS5EntitlementsResult, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumePS5EntitlementsResult, 0x0018);
		}

		// struct FClientConsumePS5EntitlementsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumePS5EntitlementsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePS5EntitlementsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePS5EntitlementsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePS5EntitlementsRequest, MarketplaceSpecificData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumePS5EntitlementsRequest, 0x0028);
		}

		// struct FClientConsumePSNEntitlementsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumePSNEntitlementsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePSNEntitlementsResult, ItemsGranted, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumePSNEntitlementsResult, 0x0018);
		}

		// struct FClientConsumePSNEntitlementsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumePSNEntitlementsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePSNEntitlementsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePSNEntitlementsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePSNEntitlementsRequest, ServiceLabel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePSNEntitlementsRequest, UnknownData_Q570, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumePSNEntitlementsRequest, 0x0028);
		}

		// struct FClientConsumeXboxEntitlementsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeXboxEntitlementsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeXboxEntitlementsResult, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeXboxEntitlementsResult, 0x0018);
		}

		// struct FClientConsumeXboxEntitlementsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeXboxEntitlementsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeXboxEntitlementsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeXboxEntitlementsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeXboxEntitlementsRequest, XboxToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeXboxEntitlementsRequest, 0x0030);
		}

		// struct FClientCreateSharedGroupResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCreateSharedGroupResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCreateSharedGroupResult, SharedGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCreateSharedGroupResult, 0x0018);
		}

		// struct FClientCreateSharedGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCreateSharedGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCreateSharedGroupRequest, SharedGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCreateSharedGroupRequest, 0x0018);
		}

		// struct FClientExecuteCloudScriptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientExecuteCloudScriptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, APIRequestsIssued, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, UnknownData_6CIZ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, Error, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, ExecutionTimeSeconds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, UnknownData_OIZO, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, FunctionName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, FunctionResult, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, FunctionResultTooLarge, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, UnknownData_FXMM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, HttpRequestsIssued, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, Logs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, LogsTooLarge, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, UnknownData_EYNT, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, MemoryConsumedBytes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, ProcessorTimeSeconds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, Revision, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientExecuteCloudScriptResult, 0x0060);
		}

		// struct FClientGetAccountInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetAccountInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAccountInfoResult, AccountInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetAccountInfoResult, 0x0010);
		}

		// struct FClientGetAdPlacementsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetAdPlacementsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAdPlacementsResult, AdPlacements, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetAdPlacementsResult, 0x0018);
		}

		// struct FClientListUsersCharactersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientListUsersCharactersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientListUsersCharactersResult, Characters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientListUsersCharactersResult, 0x0018);
		}

		// struct FClientGetCatalogItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCatalogItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCatalogItemsResult, Catalog, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCatalogItemsResult, 0x0018);
		}

		// struct FClientGetCharacterDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataResult, Data, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataResult, DataVersion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataResult, UnknownData_FD0F, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterDataResult, 0x0028);
		}

		// struct FClientGetCharacterInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryResult, Inventory, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryResult, VirtualCurrency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryResult, VirtualCurrencyRechargeTimes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterInventoryResult, 0x0038);
		}

		// struct FClientGetCharacterLeaderboardResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterLeaderboardResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterLeaderboardResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterLeaderboardResult, 0x0018);
		}

		// struct FClientGetCharacterStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterStatisticsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterStatisticsResult, CharacterStatistics, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterStatisticsResult, 0x0010);
		}

		// struct FClientGetContentDownloadUrlResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetContentDownloadUrlResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetContentDownloadUrlResult, URL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetContentDownloadUrlResult, 0x0018);
		}

		// struct FClientCurrentGamesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCurrentGamesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesResult, GameCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesResult, UnknownData_99MH, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesResult, GAMES, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesResult, PlayerCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesResult, UnknownData_YZV6, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCurrentGamesResult, 0x0028);
		}

		// struct FClientGetLeaderboardResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardResult, Leaderboard, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardResult, NextReset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardResult, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardResult, UnknownData_KHHM, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardResult, 0x0030);
		}

		// struct FClientGetFriendLeaderboardAroundPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetFriendLeaderboardAroundPlayerResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerResult, Leaderboard, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerResult, NextReset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerResult, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerResult, UnknownData_YSL7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetFriendLeaderboardAroundPlayerResult, 0x0030);
		}

		// struct FClientGetFriendsListResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetFriendsListResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListResult, Friends, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetFriendsListResult, 0x0018);
		}

		// struct FClientGameServerRegionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGameServerRegionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGameServerRegionsResult, Regions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGameServerRegionsResult, 0x0018);
		}

		// struct FClientGetLeaderboardAroundCharacterResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardAroundCharacterResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardAroundCharacterResult, 0x0018);
		}

		// struct FClientGetLeaderboardAroundPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardAroundPlayerResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerResult, Leaderboard, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerResult, NextReset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerResult, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerResult, UnknownData_OJJC, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardAroundPlayerResult, 0x0030);
		}

		// struct FClientGetLeaderboardForUsersCharactersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardForUsersCharactersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardForUsersCharactersResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardForUsersCharactersResult, 0x0018);
		}

		// struct FClientGetPaymentTokenResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPaymentTokenResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPaymentTokenResult, OrderId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPaymentTokenResult, ProviderToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPaymentTokenResult, 0x0028);
		}

		// struct FClientGetPhotonAuthenticationTokenResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPhotonAuthenticationTokenResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPhotonAuthenticationTokenResult, PhotonCustomAuthenticationToken, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPhotonAuthenticationTokenResult, 0x0018);
		}

		// struct FClientGetPlayerCombinedInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerCombinedInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerCombinedInfoResult, InfoResultPayload, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerCombinedInfoResult, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerCombinedInfoResult, 0x0020);
		}

		// struct FClientGetPlayerProfileResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerProfileResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerProfileResult, PlayerProfile, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerProfileResult, 0x0010);
		}

		// struct FClientGetPlayerSegmentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerSegmentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerSegmentsResult, Segments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerSegmentsResult, 0x0018);
		}

		// struct FClientGetPlayerStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerStatisticsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticsResult, Statistics, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerStatisticsResult, 0x0018);
		}

		// struct FClientGetPlayerStatisticVersionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerStatisticVersionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticVersionsResult, StatisticVersions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerStatisticVersionsResult, 0x0018);
		}

		// struct FClientGetPlayerTagsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerTagsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTagsResult, PlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTagsResult, Tags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerTagsResult, 0x0028);
		}

		// struct FClientGetPlayerTradesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerTradesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTradesResponse, AcceptedTrades, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTradesResponse, OpenedTrades, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerTradesResponse, 0x0028);
		}

		// struct FClientGetPlayFabIDsFromFacebookIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromFacebookIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromFacebookIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromFacebookIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromFacebookInstantGamesIdsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGameCenterIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGameCenterIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGameCenterIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGameCenterIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGenericIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGenericIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGenericIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGenericIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGoogleIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGoogleIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGoogleIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGoogleIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromKongregateIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromKongregateIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromKongregateIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromKongregateIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromPSNAccountIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromPSNAccountIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromPSNAccountIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromPSNAccountIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromSteamIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromSteamIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromSteamIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromSteamIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromTwitchIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromTwitchIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromTwitchIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromTwitchIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromXboxLiveIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromXboxLiveIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromXboxLiveIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromXboxLiveIDsResult, 0x0018);
		}

		// struct FClientGetPublisherDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPublisherDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPublisherDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPublisherDataResult, 0x0010);
		}

		// struct FClientGetPurchaseResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseResult, OrderId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseResult, PaymentProvider, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseResult, PurchaseDate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseResult, TransactionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseResult, TransactionStatus, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPurchaseResult, 0x0058);
		}

		// struct FClientGetSharedGroupDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetSharedGroupDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataResult, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataResult, Members, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetSharedGroupDataResult, 0x0020);
		}

		// struct FClientGetStoreItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetStoreItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, MarketingData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, Source, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, UnknownData_8ZLV, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, Store, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, StoreId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetStoreItemsResult, 0x0048);
		}

		// struct FClientGetTimeResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTimeResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTimeResult, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTimeResult, 0x0018);
		}

		// struct FClientGetTitleDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitleDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitleDataResult, 0x0010);
		}

		// struct FClientGetTitleNewsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitleNewsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleNewsResult, News, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitleNewsResult, 0x0018);
		}

		// struct FClientGetTitlePublicKeyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitlePublicKeyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitlePublicKeyResult, RSAPublicKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitlePublicKeyResult, 0x0018);
		}

		// struct FClientGetTradeStatusResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTradeStatusResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTradeStatusResponse, Trade, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTradeStatusResponse, 0x0010);
		}

		// struct FClientGetUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataResult, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataResult, DataVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataResult, UnknownData_ZE4F, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetUserDataResult, 0x0018);
		}

		// struct FClientGetUserInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetUserInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserInventoryResult, Inventory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserInventoryResult, VirtualCurrency, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserInventoryResult, VirtualCurrencyRechargeTimes, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetUserInventoryResult, 0x0028);
		}

		// struct FClientGrantCharacterToUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGrantCharacterToUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserResult, CharacterType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserResult, Result, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserResult, UnknownData_O030, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGrantCharacterToUserResult, 0x0030);
		}

		// struct FClientLinkAndroidDeviceIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkAndroidDeviceIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkAndroidDeviceIDResult, 0x0008);
		}

		// struct FClientEmptyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientEmptyResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientEmptyResult, 0x0008);
		}

		// struct FClientLinkCustomIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkCustomIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkCustomIDResult, 0x0008);
		}

		// struct FClientLinkFacebookAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkFacebookAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkFacebookAccountResult, 0x0008);
		}

		// struct FClientLinkFacebookInstantGamesIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkFacebookInstantGamesIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkFacebookInstantGamesIdResult, 0x0008);
		}

		// struct FClientLinkGameCenterAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkGameCenterAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkGameCenterAccountResult, 0x0008);
		}

		// struct FClientLinkGoogleAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkGoogleAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkGoogleAccountResult, 0x0008);
		}

		// struct FClientLinkIOSDeviceIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkIOSDeviceIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkIOSDeviceIDResult, 0x0008);
		}

		// struct FClientLinkKongregateAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkKongregateAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkKongregateAccountResult, 0x0008);
		}

		// struct FClientLinkNintendoSwitchDeviceIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkNintendoSwitchDeviceIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkNintendoSwitchDeviceIdResult, 0x0008);
		}

		// struct FClientLinkPSNAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkPSNAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkPSNAccountResult, 0x0008);
		}

		// struct FClientLinkSteamAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkSteamAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkSteamAccountResult, 0x0008);
		}

		// struct FClientLinkTwitchAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkTwitchAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkTwitchAccountResult, 0x0008);
		}

		// struct FClientLinkXboxAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkXboxAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkXboxAccountResult, 0x0008);
		}

		// struct FPlayFabLoginResultCommon : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__PlayFabLoginResultCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabLoginResultCommon, AuthenticationContext, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabLoginResultCommon, 0x0010);
		}

		// struct FClientLoginResult : public FPlayFabLoginResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, EntityToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, InfoResultPayload, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, LastLoginTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, NewlyCreated, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, UnknownData_L8MN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, PlayFabId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, SessionTicket, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, SettingsForUser, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, TreatmentAssignment, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginResult, 0x0068);
		}

		// struct FClientMatchmakeResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientMatchmakeResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, Expires, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, LobbyId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, PollWaitTimeMS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, UnknownData_4MXO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, ServerIPV4Address, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, ServerIPV6Address, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, ServerPort, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, UnknownData_LFG5, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, ServerPublicDNSName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, Status, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, UnknownData_WONF, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, Ticket, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientMatchmakeResult, 0x0080);
		}

		// struct FClientOpenTradeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientOpenTradeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientOpenTradeResponse, Trade, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientOpenTradeResponse, 0x0010);
		}

		// struct FClientPayForPurchaseResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientPayForPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, CreditApplied, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, UnknownData_384K, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, OrderId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, ProviderData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, ProviderToken, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, PurchaseConfirmationPageURL, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, PurchaseCurrency, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, PurchasePrice, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, Status, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, UnknownData_NWQ9, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, VCAmount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, VirtualCurrency, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientPayForPurchaseResult, 0x0078);
		}

		// struct FClientPurchaseItemResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientPurchaseItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemResult, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientPurchaseItemResult, 0x0018);
		}

		// struct FClientRedeemCouponResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRedeemCouponResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRedeemCouponResult, GrantedItems, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRedeemCouponResult, 0x0018);
		}

		// struct FClientEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientEmptyResponse, 0x0008);
		}

		// struct FClientRegisterForIOSPushNotificationResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRegisterForIOSPushNotificationResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRegisterForIOSPushNotificationResult, 0x0008);
		}

		// struct FClientRegisterPlayFabUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRegisterPlayFabUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserResult, EntityToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserResult, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserResult, SessionTicket, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserResult, SettingsForUser, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserResult, Username, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRegisterPlayFabUserResult, 0x0048);
		}

		// struct FClientRemoveContactEmailResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveContactEmailResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveContactEmailResult, 0x0008);
		}

		// struct FClientRemoveFriendResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveFriendResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveFriendResult, 0x0008);
		}

		// struct FClientRemoveGenericIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveGenericIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveGenericIDResult, 0x0008);
		}

		// struct FClientRemoveSharedGroupMembersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveSharedGroupMembersResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveSharedGroupMembersResult, 0x0008);
		}

		// struct FClientReportAdActivityResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientReportAdActivityResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReportAdActivityResult, 0x0008);
		}

		// struct FClientReportPlayerClientResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientReportPlayerClientResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportPlayerClientResult, SubmissionsRemaining, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportPlayerClientResult, UnknownData_6XCM, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReportPlayerClientResult, 0x0010);
		}

		// struct FClientRestoreIOSPurchasesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRestoreIOSPurchasesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRestoreIOSPurchasesResult, Fulfillments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRestoreIOSPurchasesResult, 0x0018);
		}

		// struct FClientRewardAdActivityResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRewardAdActivityResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, AdActivityEventId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, DebugResults, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, PlacementId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, PlacementName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, PlacementViewsRemaining, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, PlacementViewsResetMinutes, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, RewardResults, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRewardAdActivityResult, 0x0058);
		}

		// struct FClientSendAccountRecoveryEmailResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSendAccountRecoveryEmailResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSendAccountRecoveryEmailResult, 0x0008);
		}

		// struct FClientSetFriendTagsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSetFriendTagsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSetFriendTagsResult, 0x0008);
		}

		// struct FClientSetPlayerSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSetPlayerSecretResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSetPlayerSecretResult, 0x0008);
		}

		// struct FClientStartGameResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientStartGameResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, Expires, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, LobbyId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, Password, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, ServerIPV4Address, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, ServerIPV6Address, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, ServerPort, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, UnknownData_HC4G, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, ServerPublicDNSName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, Ticket, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientStartGameResult, 0x0080);
		}

		// struct FClientStartPurchaseResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientStartPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseResult, Contents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseResult, OrderId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseResult, PaymentOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseResult, VirtualCurrencyBalances, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientStartPurchaseResult, 0x0040);
		}

		// struct FClientUnlinkAndroidDeviceIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkAndroidDeviceIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkAndroidDeviceIDResult, 0x0008);
		}

		// struct FClientUnlinkCustomIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkCustomIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkCustomIDResult, 0x0008);
		}

		// struct FClientUnlinkFacebookAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkFacebookAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkFacebookAccountResult, 0x0008);
		}

		// struct FClientUnlinkFacebookInstantGamesIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkFacebookInstantGamesIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkFacebookInstantGamesIdResult, 0x0008);
		}

		// struct FClientUnlinkGameCenterAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkGameCenterAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkGameCenterAccountResult, 0x0008);
		}

		// struct FClientUnlinkGoogleAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkGoogleAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkGoogleAccountResult, 0x0008);
		}

		// struct FClientUnlinkIOSDeviceIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkIOSDeviceIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkIOSDeviceIDResult, 0x0008);
		}

		// struct FClientUnlinkKongregateAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkKongregateAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkKongregateAccountResult, 0x0008);
		}

		// struct FClientUnlinkNintendoSwitchDeviceIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkNintendoSwitchDeviceIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkNintendoSwitchDeviceIdResult, 0x0008);
		}

		// struct FClientUnlinkPSNAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkPSNAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkPSNAccountResult, 0x0008);
		}

		// struct FClientUnlinkSteamAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkSteamAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkSteamAccountResult, 0x0008);
		}

		// struct FClientUnlinkTwitchAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkTwitchAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkTwitchAccountResult, 0x0008);
		}

		// struct FClientUnlinkXboxAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkXboxAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkXboxAccountResult, 0x0008);
		}

		// struct FClientUnlockContainerItemResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlockContainerItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemResult, GrantedItems, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemResult, UnlockedItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemResult, UnlockedWithItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemResult, VirtualCurrency, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlockContainerItemResult, 0x0040);
		}

		// struct FClientUpdateCharacterDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateCharacterDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataResult, DataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataResult, UnknownData_IO5Q, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateCharacterDataResult, 0x0010);
		}

		// struct FClientUpdateCharacterStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateCharacterStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateCharacterStatisticsResult, 0x0008);
		}

		// struct FClientUpdatePlayerStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdatePlayerStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdatePlayerStatisticsResult, 0x0008);
		}

		// struct FClientUpdateSharedGroupDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateSharedGroupDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateSharedGroupDataResult, 0x0008);
		}

		// struct FClientUpdateUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataResult, DataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataResult, UnknownData_H2V4, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateUserDataResult, 0x0010);
		}

		// struct FClientUpdateUserTitleDisplayNameResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateUserTitleDisplayNameResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserTitleDisplayNameResult, DisplayName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateUserTitleDisplayNameResult, 0x0018);
		}

		// struct FClientValidateAmazonReceiptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateAmazonReceiptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptResult, Fulfillments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateAmazonReceiptResult, 0x0018);
		}

		// struct FClientValidateGooglePlayPurchaseResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateGooglePlayPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseResult, Fulfillments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateGooglePlayPurchaseResult, 0x0018);
		}

		// struct FClientValidateIOSReceiptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateIOSReceiptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptResult, Fulfillments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateIOSReceiptResult, 0x0018);
		}

		// struct FClientValidateWindowsReceiptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateWindowsReceiptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptResult, Fulfillments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateWindowsReceiptResult, 0x0018);
		}

		// struct FClientWriteEventResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientWriteEventResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteEventResponse, EventId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientWriteEventResponse, 0x0018);
		}

		// struct FClientExecuteCloudScriptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientExecuteCloudScriptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, FunctionName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, FunctionParameter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, GeneratePlayStreamEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, RevisionSelection, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, UnknownData_FZRH, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, SpecificRevision, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientExecuteCloudScriptRequest, 0x0030);
		}

		// struct FClientGetAccountInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetAccountInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAccountInfoRequest, Email, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAccountInfoRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAccountInfoRequest, TitleDisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAccountInfoRequest, Username, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetAccountInfoRequest, 0x0048);
		}

		// struct FClientGetAdPlacementsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetAdPlacementsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAdPlacementsRequest, AppId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAdPlacementsRequest, Identifier, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetAdPlacementsRequest, 0x0020);
		}

		// struct FClientListUsersCharactersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientListUsersCharactersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientListUsersCharactersRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientListUsersCharactersRequest, 0x0018);
		}

		// struct FClientGetCatalogItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCatalogItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCatalogItemsRequest, CatalogVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCatalogItemsRequest, 0x0018);
		}

		// struct FClientGetCharacterDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataRequest, IfChangedFromDataVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataRequest, UnknownData_C1GP, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataRequest, Keys, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterDataRequest, 0x0040);
		}

		// struct FClientGetCharacterInventoryRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterInventoryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryRequest, CustomTags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterInventoryRequest, 0x0030);
		}

		// struct FClientGetCharacterLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterLeaderboardRequest, CharacterType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterLeaderboardRequest, MaxResultsCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterLeaderboardRequest, StartPosition, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterLeaderboardRequest, StatisticName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterLeaderboardRequest, 0x0030);
		}

		// struct FClientGetCharacterStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterStatisticsRequest, CharacterId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterStatisticsRequest, 0x0018);
		}

		// struct FClientGetContentDownloadUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetContentDownloadUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetContentDownloadUrlRequest, HttpMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetContentDownloadUrlRequest, Key, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetContentDownloadUrlRequest, ThruCDN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetContentDownloadUrlRequest, UnknownData_AM2Q, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetContentDownloadUrlRequest, 0x0030);
		}

		// struct FClientCurrentGamesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCurrentGamesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, BuildVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, GameMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, Region, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, UnknownData_MOBI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, StatisticName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, TagFilter, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCurrentGamesRequest, 0x0048);
		}

		// struct FClientGetFriendLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetFriendLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, IncludeFacebookFriends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, IncludeSteamFriends, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, UnknownData_NWS3, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, MaxResultsCount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, ProfileConstraints, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, StartPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, UnknownData_XV1O, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, StatisticName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, UseSpecificVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, UnknownData_SGVO, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, Version, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, XboxToken, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetFriendLeaderboardRequest, 0x0050);
		}

		// struct FClientGetFriendLeaderboardAroundPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetFriendLeaderboardAroundPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, IncludeFacebookFriends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, IncludeSteamFriends, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, UnknownData_XFYJ, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, MaxResultsCount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, ProfileConstraints, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, StatisticName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, UseSpecificVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, UnknownData_9WPV, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, Version, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, XboxToken, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetFriendLeaderboardAroundPlayerRequest, 0x0058);
		}

		// struct FClientGetFriendsListRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetFriendsListRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, IncludeFacebookFriends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, IncludeSteamFriends, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, UnknownData_TVSB, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, ProfileConstraints, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, XboxToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetFriendsListRequest, 0x0030);
		}

		// struct FClientGameServerRegionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGameServerRegionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGameServerRegionsRequest, BuildVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGameServerRegionsRequest, 0x0018);
		}

		// struct FClientGetLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, MaxResultsCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, UnknownData_F7ZZ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, ProfileConstraints, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, StartPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, UnknownData_2HKD, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, StatisticName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, UseSpecificVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, UnknownData_W6XO, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, Version, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardRequest, 0x0040);
		}

		// struct FClientGetLeaderboardAroundCharacterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardAroundCharacterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterRequest, CharacterType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterRequest, MaxResultsCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterRequest, UnknownData_BNC4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterRequest, StatisticName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardAroundCharacterRequest, 0x0040);
		}

		// struct FClientGetLeaderboardAroundPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardAroundPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, MaxResultsCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, UnknownData_0NSC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, ProfileConstraints, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, StatisticName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, UseSpecificVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, UnknownData_9SU6, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, Version, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardAroundPlayerRequest, 0x0048);
		}

		// struct FClientGetLeaderboardForUsersCharactersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardForUsersCharactersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardForUsersCharactersRequest, MaxResultsCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardForUsersCharactersRequest, UnknownData_30I1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardForUsersCharactersRequest, StatisticName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardForUsersCharactersRequest, 0x0020);
		}

		// struct FClientGetPaymentTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPaymentTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPaymentTokenRequest, TokenProvider, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPaymentTokenRequest, 0x0018);
		}

		// struct FClientGetPhotonAuthenticationTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPhotonAuthenticationTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPhotonAuthenticationTokenRequest, PhotonApplicationId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPhotonAuthenticationTokenRequest, 0x0018);
		}

		// struct FClientGetPlayerCombinedInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerCombinedInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerCombinedInfoRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerCombinedInfoRequest, InfoRequestParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerCombinedInfoRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerCombinedInfoRequest, 0x0028);
		}

		// struct FClientGetPlayerProfileRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerProfileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerProfileRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerProfileRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerProfileRequest, ProfileConstraints, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerProfileRequest, 0x0028);
		}

		// struct FClientGetPlayerSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerSegmentsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerSegmentsRequest, 0x0008);
		}

		// struct FClientGetPlayerStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticsRequest, StatisticNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticsRequest, StatisticNameVersions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerStatisticsRequest, 0x0030);
		}

		// struct FClientGetPlayerStatisticVersionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerStatisticVersionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticVersionsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticVersionsRequest, StatisticName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerStatisticVersionsRequest, 0x0020);
		}

		// struct FClientGetPlayerTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTagsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTagsRequest, Namespace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTagsRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerTagsRequest, 0x0030);
		}

		// struct FClientGetPlayerTradesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerTradesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTradesRequest, StatusFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTradesRequest, UnknownData_H7JB, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerTradesRequest, 0x0010);
		}

		// struct FClientGetPlayFabIDsFromFacebookIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromFacebookIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromFacebookIDsRequest, FacebookIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromFacebookIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest, FacebookInstantGamesIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGameCenterIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGameCenterIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGameCenterIDsRequest, GameCenterIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGameCenterIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGenericIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGenericIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGenericIDsRequest, GenericIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGenericIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGoogleIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGoogleIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGoogleIDsRequest, GoogleIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGoogleIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromKongregateIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromKongregateIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromKongregateIDsRequest, KongregateIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromKongregateIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest, NintendoSwitchDeviceIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromPSNAccountIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromPSNAccountIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromPSNAccountIDsRequest, IssuerId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromPSNAccountIDsRequest, UnknownData_CZJU, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromPSNAccountIDsRequest, PSNAccountIDs, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromPSNAccountIDsRequest, 0x0020);
		}

		// struct FClientGetPlayFabIDsFromSteamIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromSteamIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromSteamIDsRequest, SteamStringIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromSteamIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromTwitchIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromTwitchIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromTwitchIDsRequest, TwitchIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromTwitchIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromXboxLiveIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromXboxLiveIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromXboxLiveIDsRequest, Sandbox, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromXboxLiveIDsRequest, XboxLiveAccountIDs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromXboxLiveIDsRequest, 0x0028);
		}

		// struct FClientGetPublisherDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPublisherDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPublisherDataRequest, Keys, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPublisherDataRequest, 0x0018);
		}

		// struct FClientGetPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseRequest, OrderId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPurchaseRequest, 0x0018);
		}

		// struct FClientGetSharedGroupDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetSharedGroupDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataRequest, GetMembers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataRequest, UnknownData_Q5V0, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataRequest, Keys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataRequest, SharedGroupId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetSharedGroupDataRequest, 0x0030);
		}

		// struct FClientGetStoreItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetStoreItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsRequest, StoreId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetStoreItemsRequest, 0x0028);
		}

		// struct FClientGetTimeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTimeRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTimeRequest, 0x0008);
		}

		// struct FClientGetTitleDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitleDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleDataRequest, Keys, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleDataRequest, OverrideLabel, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitleDataRequest, 0x0028);
		}

		// struct FClientGetTitleNewsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitleNewsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleNewsRequest, Count, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleNewsRequest, UnknownData_9K71, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitleNewsRequest, 0x0010);
		}

		// struct FClientGetTitlePublicKeyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitlePublicKeyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitlePublicKeyRequest, TitleSharedSecret, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitlePublicKeyRequest, 0x0018);
		}

		// struct FClientGetTradeStatusRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTradeStatusRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTradeStatusRequest, OfferingPlayerId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTradeStatusRequest, TradeId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTradeStatusRequest, 0x0028);
		}

		// struct FClientGetUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataRequest, IfChangedFromDataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataRequest, UnknownData_RJIW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataRequest, Keys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetUserDataRequest, 0x0030);
		}

		// struct FClientGetUserInventoryRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetUserInventoryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserInventoryRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetUserInventoryRequest, 0x0010);
		}

		// struct FClientGrantCharacterToUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGrantCharacterToUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserRequest, CharacterName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserRequest, ItemId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGrantCharacterToUserRequest, 0x0040);
		}

		// struct FClientLinkAndroidDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkAndroidDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, AndroidDevice, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, AndroidDeviceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, ForceLink, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, UnknownData_TV4F, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, OS, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkAndroidDeviceIDRequest, 0x0048);
		}

		// struct FClientLinkAppleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkAppleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAppleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAppleRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAppleRequest, UnknownData_DQCW, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAppleRequest, IdentityToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkAppleRequest, 0x0028);
		}

		// struct FClientLinkCustomIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkCustomIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkCustomIDRequest, CustomId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkCustomIDRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkCustomIDRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkCustomIDRequest, UnknownData_N26C, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkCustomIDRequest, 0x0028);
		}

		// struct FClientLinkFacebookAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkFacebookAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookAccountRequest, AccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookAccountRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookAccountRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookAccountRequest, UnknownData_8T6Z, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkFacebookAccountRequest, 0x0028);
		}

		// struct FClientLinkFacebookInstantGamesIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkFacebookInstantGamesIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookInstantGamesIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookInstantGamesIdRequest, FacebookInstantGamesSignature, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookInstantGamesIdRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookInstantGamesIdRequest, UnknownData_WWML, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkFacebookInstantGamesIdRequest, 0x0028);
		}

		// struct FClientLinkGameCenterAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkGameCenterAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, UnknownData_DRN5, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, GameCenterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, PublicKeyUrl, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, Salt, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, Signature, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, Timestamp, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkGameCenterAccountRequest, 0x0068);
		}

		// struct FClientLinkGoogleAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkGoogleAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGoogleAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGoogleAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGoogleAccountRequest, UnknownData_21CY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGoogleAccountRequest, ServerAuthCode, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkGoogleAccountRequest, 0x0028);
		}

		// struct FClientLinkIOSDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkIOSDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, DeviceID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, DeviceModel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, ForceLink, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, UnknownData_U3OT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, OS, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkIOSDeviceIDRequest, 0x0048);
		}

		// struct FClientLinkKongregateAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkKongregateAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkKongregateAccountRequest, AuthTicket, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkKongregateAccountRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkKongregateAccountRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkKongregateAccountRequest, UnknownData_RWHV, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkKongregateAccountRequest, KongregateId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkKongregateAccountRequest, 0x0038);
		}

		// struct FClientLinkNintendoServiceAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkNintendoServiceAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoServiceAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoServiceAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoServiceAccountRequest, UnknownData_CE8V, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoServiceAccountRequest, IdentityToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkNintendoServiceAccountRequest, 0x0028);
		}

		// struct FClientLinkNintendoSwitchDeviceIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkNintendoSwitchDeviceIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoSwitchDeviceIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoSwitchDeviceIdRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoSwitchDeviceIdRequest, UnknownData_XWHY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoSwitchDeviceIdRequest, NintendoSwitchDeviceId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkNintendoSwitchDeviceIdRequest, 0x0028);
		}

		// struct FClientLinkOpenIdConnectRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkOpenIdConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkOpenIdConnectRequest, ConnectionId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkOpenIdConnectRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkOpenIdConnectRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkOpenIdConnectRequest, UnknownData_9S2Q, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkOpenIdConnectRequest, IdToken, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkOpenIdConnectRequest, 0x0038);
		}

		// struct FClientLinkPSNAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkPSNAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, AuthCode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, UnknownData_NHE5, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, IssuerId, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, RedirectUri, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkPSNAccountRequest, 0x0038);
		}

		// struct FClientLinkSteamAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkSteamAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkSteamAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkSteamAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkSteamAccountRequest, UnknownData_77SC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkSteamAccountRequest, SteamTicket, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkSteamAccountRequest, 0x0028);
		}

		// struct FClientLinkTwitchAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkTwitchAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkTwitchAccountRequest, AccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkTwitchAccountRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkTwitchAccountRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkTwitchAccountRequest, UnknownData_H9NL, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkTwitchAccountRequest, 0x0028);
		}

		// struct FClientLinkXboxAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkXboxAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkXboxAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkXboxAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkXboxAccountRequest, UnknownData_ONCT, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkXboxAccountRequest, XboxToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkXboxAccountRequest, 0x0028);
		}

		// struct FClientLoginWithAndroidDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithAndroidDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, AndroidDevice, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, AndroidDeviceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, CreateAccount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, UnknownData_NMVM, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, CustomTags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, EncryptedRequest, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, InfoRequestParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, OS, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, PlayerSecret, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithAndroidDeviceIDRequest, 0x0070);
		}

		// struct FClientLoginWithAppleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithAppleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, UnknownData_MKXS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, IdentityToken, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithAppleRequest, 0x0050);
		}

		// struct FClientLoginWithCustomIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithCustomIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, UnknownData_X0XR, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, CustomId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithCustomIDRequest, 0x0050);
		}

		// struct FClientLoginWithEmailAddressRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithEmailAddressRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithEmailAddressRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithEmailAddressRequest, Email, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithEmailAddressRequest, InfoRequestParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithEmailAddressRequest, Password, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithEmailAddressRequest, 0x0038);
		}

		// struct FClientLoginWithFacebookRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithFacebookRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, AccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, CreateAccount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, UnknownData_9WKM, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithFacebookRequest, 0x0050);
		}

		// struct FClientLoginWithFacebookInstantGamesIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithFacebookInstantGamesIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, UnknownData_ZTWT, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, FacebookInstantGamesSignature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithFacebookInstantGamesIdRequest, 0x0050);
		}

		// struct FClientLoginWithGameCenterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithGameCenterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, UnknownData_DEOC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, InfoRequestParameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, PlayerId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, PlayerSecret, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, PublicKeyUrl, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, Salt, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, Signature, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, Timestamp, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithGameCenterRequest, 0x0090);
		}

		// struct FClientLoginWithGoogleAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithGoogleAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, UnknownData_CZ44, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, InfoRequestParameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, PlayerSecret, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, ServerAuthCode, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithGoogleAccountRequest, 0x0050);
		}

		// struct FClientLoginWithIOSDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithIOSDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, UnknownData_L58X, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, DeviceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, DeviceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, EncryptedRequest, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, InfoRequestParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, OS, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, PlayerSecret, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithIOSDeviceIDRequest, 0x0070);
		}

		// struct FClientLoginWithKongregateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithKongregateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, AuthTicket, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, CreateAccount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, UnknownData_3Q75, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, KongregateId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, PlayerSecret, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithKongregateRequest, 0x0060);
		}

		// struct FClientLoginWithNintendoServiceAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithNintendoServiceAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, UnknownData_02K4, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, IdentityToken, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithNintendoServiceAccountRequest, 0x0050);
		}

		// struct FClientLoginWithNintendoSwitchDeviceIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithNintendoSwitchDeviceIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, UnknownData_GB38, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, InfoRequestParameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, NintendoSwitchDeviceId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, 0x0050);
		}

		// struct FClientLoginWithOpenIdConnectRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithOpenIdConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, ConnectionId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, CreateAccount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, UnknownData_KRMV, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, IdToken, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, InfoRequestParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, PlayerSecret, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithOpenIdConnectRequest, 0x0060);
		}

		// struct FClientLoginWithPlayFabRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPlayFabRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPlayFabRequest, InfoRequestParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPlayFabRequest, Password, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPlayFabRequest, Username, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithPlayFabRequest, 0x0038);
		}

		// struct FClientLoginWithPSNRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithPSNRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, AuthCode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, CreateAccount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, UnknownData_7ZDA, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, IssuerId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, UnknownData_BFO0, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, PlayerSecret, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, RedirectUri, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithPSNRequest, 0x0068);
		}

		// struct FClientLoginWithSteamRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithSteamRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, UnknownData_NEUJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, InfoRequestParameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, PlayerSecret, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, SteamTicket, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithSteamRequest, 0x0050);
		}

		// struct FClientLoginWithTwitchRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithTwitchRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, AccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, CreateAccount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, UnknownData_H0JS, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithTwitchRequest, 0x0050);
		}

		// struct FClientLoginWithXboxRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithXboxRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, UnknownData_GH83, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, InfoRequestParameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, PlayerSecret, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, XboxToken, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithXboxRequest, 0x0050);
		}

		// struct FClientMatchmakeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientMatchmakeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, BuildVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, GameMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, LobbyId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, Region, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, StartNewIfNoneFound, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, UnknownData_K03K, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, StatisticName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, TagFilter, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientMatchmakeRequest, 0x0070);
		}

		// struct FClientOpenTradeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientOpenTradeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientOpenTradeRequest, AllowedPlayerIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientOpenTradeRequest, OfferedInventoryInstanceIds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientOpenTradeRequest, RequestedCatalogItemIds, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientOpenTradeRequest, 0x0038);
		}

		// struct FClientPayForPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientPayForPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseRequest, Currency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseRequest, OrderId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseRequest, ProviderName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseRequest, ProviderTransactionId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientPayForPurchaseRequest, 0x0050);
		}

		// struct FClientPurchaseItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientPurchaseItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, ItemId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, Price, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, UnknownData_SJ9S, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, StoreId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, VirtualCurrency, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientPurchaseItemRequest, 0x0068);
		}

		// struct FClientRedeemCouponRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRedeemCouponRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRedeemCouponRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRedeemCouponRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRedeemCouponRequest, CouponCode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRedeemCouponRequest, CustomTags, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRedeemCouponRequest, 0x0040);
		}

		// struct FClientRefreshPSNAuthTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRefreshPSNAuthTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRefreshPSNAuthTokenRequest, AuthCode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRefreshPSNAuthTokenRequest, IssuerId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRefreshPSNAuthTokenRequest, UnknownData_29LV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRefreshPSNAuthTokenRequest, RedirectUri, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRefreshPSNAuthTokenRequest, 0x0030);
		}

		// struct FClientRegisterForIOSPushNotificationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRegisterForIOSPushNotificationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterForIOSPushNotificationRequest, ConfirmationMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterForIOSPushNotificationRequest, DeviceToken, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterForIOSPushNotificationRequest, SendPushNotificationConfirmation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterForIOSPushNotificationRequest, UnknownData_BX6G, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRegisterForIOSPushNotificationRequest, 0x0030);
		}

		// struct FClientRegisterPlayFabUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRegisterPlayFabUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, Email, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, EncryptedRequest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, InfoRequestParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, Password, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, PlayerSecret, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, RequireBothUsernameAndEmail, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, UnknownData_VYRY, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, Username, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRegisterPlayFabUserRequest, 0x0080);
		}

		// struct FClientRemoveContactEmailRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveContactEmailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRemoveContactEmailRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveContactEmailRequest, 0x0010);
		}

		// struct FClientRemoveFriendRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveFriendRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRemoveFriendRequest, FriendPlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveFriendRequest, 0x0018);
		}

		// struct FClientRemoveGenericIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveGenericIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRemoveGenericIDRequest, GenericId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveGenericIDRequest, 0x0010);
		}

		// struct FClientRemoveSharedGroupMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveSharedGroupMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRemoveSharedGroupMembersRequest, PlayFabIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRemoveSharedGroupMembersRequest, SharedGroupId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveSharedGroupMembersRequest, 0x0028);
		}

		// struct FClientReportAdActivityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientReportAdActivityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportAdActivityRequest, Activity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportAdActivityRequest, UnknownData_MYGJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportAdActivityRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportAdActivityRequest, PlacementId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportAdActivityRequest, RewardId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReportAdActivityRequest, 0x0038);
		}

		// struct FClientDeviceInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientDeviceInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientDeviceInfoRequest, Info, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientDeviceInfoRequest, 0x0010);
		}

		// struct FClientReportPlayerClientRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientReportPlayerClientRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportPlayerClientRequest, Comment, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportPlayerClientRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportPlayerClientRequest, ReporteeId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReportPlayerClientRequest, 0x0030);
		}

		// struct FClientRestoreIOSPurchasesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRestoreIOSPurchasesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRestoreIOSPurchasesRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRestoreIOSPurchasesRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRestoreIOSPurchasesRequest, ReceiptData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRestoreIOSPurchasesRequest, 0x0030);
		}

		// struct FClientRewardAdActivityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRewardAdActivityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityRequest, PlacementId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityRequest, RewardId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRewardAdActivityRequest, 0x0030);
		}

		// struct FClientSendAccountRecoveryEmailRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSendAccountRecoveryEmailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSendAccountRecoveryEmailRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSendAccountRecoveryEmailRequest, Email, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSendAccountRecoveryEmailRequest, EmailTemplateId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSendAccountRecoveryEmailRequest, 0x0030);
		}

		// struct FClientSetFriendTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSetFriendTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSetFriendTagsRequest, FriendPlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSetFriendTagsRequest, Tags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSetFriendTagsRequest, 0x0028);
		}

		// struct FClientSetPlayerSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSetPlayerSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSetPlayerSecretRequest, EncryptedRequest, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSetPlayerSecretRequest, PlayerSecret, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSetPlayerSecretRequest, 0x0028);
		}

		// struct FClientStartGameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientStartGameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, BuildVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, CustomCommandLineData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, GameMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, Region, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, UnknownData_ZEGI, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, StatisticName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientStartGameRequest, 0x0068);
		}

		// struct FClientStartPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientStartPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseRequest, Items, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseRequest, StoreId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientStartPurchaseRequest, 0x0040);
		}

		// struct FClientSubtractUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSubtractUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSubtractUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSubtractUserVirtualCurrencyRequest, UnknownData_AP14, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSubtractUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSubtractUserVirtualCurrencyRequest, VirtualCurrency, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSubtractUserVirtualCurrencyRequest, 0x0028);
		}

		// struct FClientUnlinkAndroidDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkAndroidDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkAndroidDeviceIDRequest, AndroidDeviceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkAndroidDeviceIDRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkAndroidDeviceIDRequest, 0x0020);
		}

		// struct FClientUnlinkAppleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkAppleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkAppleRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkAppleRequest, 0x0010);
		}

		// struct FClientUnlinkCustomIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkCustomIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkCustomIDRequest, CustomId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkCustomIDRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkCustomIDRequest, 0x0020);
		}

		// struct FClientUnlinkFacebookAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkFacebookAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkFacebookAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkFacebookAccountRequest, 0x0010);
		}

		// struct FClientUnlinkFacebookInstantGamesIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkFacebookInstantGamesIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkFacebookInstantGamesIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkFacebookInstantGamesIdRequest, FacebookInstantGamesId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkFacebookInstantGamesIdRequest, 0x0020);
		}

		// struct FClientUnlinkGameCenterAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkGameCenterAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkGameCenterAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkGameCenterAccountRequest, 0x0010);
		}

		// struct FClientUnlinkGoogleAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkGoogleAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkGoogleAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkGoogleAccountRequest, 0x0010);
		}

		// struct FClientUnlinkIOSDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkIOSDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkIOSDeviceIDRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkIOSDeviceIDRequest, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkIOSDeviceIDRequest, 0x0020);
		}

		// struct FClientUnlinkKongregateAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkKongregateAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkKongregateAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkKongregateAccountRequest, 0x0010);
		}

		// struct FClientUnlinkNintendoServiceAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkNintendoServiceAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkNintendoServiceAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkNintendoServiceAccountRequest, 0x0010);
		}

		// struct FClientUnlinkNintendoSwitchDeviceIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkNintendoSwitchDeviceIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkNintendoSwitchDeviceIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkNintendoSwitchDeviceIdRequest, NintendoSwitchDeviceId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkNintendoSwitchDeviceIdRequest, 0x0020);
		}

		// struct FClientUnlinkOpenIdConnectRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkOpenIdConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkOpenIdConnectRequest, ConnectionId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkOpenIdConnectRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkOpenIdConnectRequest, 0x0020);
		}

		// struct FClientUnlinkPSNAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkPSNAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkPSNAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkPSNAccountRequest, 0x0010);
		}

		// struct FClientUnlinkSteamAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkSteamAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkSteamAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkSteamAccountRequest, 0x0010);
		}

		// struct FClientUnlinkTwitchAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkTwitchAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkTwitchAccountRequest, AccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkTwitchAccountRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkTwitchAccountRequest, 0x0020);
		}

		// struct FClientUnlinkXboxAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkXboxAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkXboxAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkXboxAccountRequest, 0x0010);
		}

		// struct FClientUnlockContainerInstanceRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlockContainerInstanceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerInstanceRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerInstanceRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerInstanceRequest, ContainerItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerInstanceRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerInstanceRequest, KeyItemInstanceId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlockContainerInstanceRequest, 0x0050);
		}

		// struct FClientUnlockContainerItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlockContainerItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemRequest, ContainerItemId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemRequest, CustomTags, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlockContainerItemRequest, 0x0040);
		}

		// struct FClientUpdateAvatarUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateAvatarUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateAvatarUrlRequest, ImageUrl, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateAvatarUrlRequest, 0x0018);
		}

		// struct FClientUpdateCharacterDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateCharacterDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, Data, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, KeysToRemove, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, Permission, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, UnknownData_KRTE, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateCharacterDataRequest, 0x0040);
		}

		// struct FClientUpdateCharacterStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateCharacterStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterStatisticsRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterStatisticsRequest, CharacterStatistics, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterStatisticsRequest, CustomTags, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateCharacterStatisticsRequest, 0x0028);
		}

		// struct FClientUpdatePlayerStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdatePlayerStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdatePlayerStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdatePlayerStatisticsRequest, Statistics, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdatePlayerStatisticsRequest, 0x0020);
		}

		// struct FClientUpdateSharedGroupDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateSharedGroupDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, Permission, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, UnknownData_HXB6, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, SharedGroupId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateSharedGroupDataRequest, 0x0040);
		}

		// struct FClientUpdateUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataRequest, Permission, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataRequest, UnknownData_N00E, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateUserDataRequest, 0x0030);
		}

		// struct FClientUpdateUserTitleDisplayNameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateUserTitleDisplayNameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserTitleDisplayNameRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserTitleDisplayNameRequest, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateUserTitleDisplayNameRequest, 0x0020);
		}

		// struct FClientValidateAmazonReceiptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateAmazonReceiptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, CurrencyCode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, PurchasePrice, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, UnknownData_GJEQ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, ReceiptId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, UserId, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateAmazonReceiptRequest, 0x0058);
		}

		// struct FClientValidateGooglePlayPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateGooglePlayPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, CurrencyCode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, PurchasePrice, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, UnknownData_EHHX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, ReceiptJson, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, Signature, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateGooglePlayPurchaseRequest, 0x0058);
		}

		// struct FClientValidateIOSReceiptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateIOSReceiptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, CurrencyCode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, PurchasePrice, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, UnknownData_QGOV, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, ReceiptData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateIOSReceiptRequest, 0x0048);
		}

		// struct FClientValidateWindowsReceiptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateWindowsReceiptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, CurrencyCode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, PurchasePrice, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, UnknownData_3J5I, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, Receipt, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateWindowsReceiptRequest, 0x0048);
		}

		// struct FClientWriteClientCharacterEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientWriteClientCharacterEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientCharacterEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientCharacterEventRequest, CharacterId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientCharacterEventRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientCharacterEventRequest, EventName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientCharacterEventRequest, Timestamp, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientWriteClientCharacterEventRequest, 0x0048);
		}

		// struct FClientWriteClientPlayerEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientWriteClientPlayerEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientPlayerEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientPlayerEventRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientPlayerEventRequest, EventName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientPlayerEventRequest, Timestamp, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientWriteClientPlayerEventRequest, 0x0038);
		}

		// struct FClientWriteTitleEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientWriteTitleEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteTitleEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteTitleEventRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteTitleEventRequest, EventName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteTitleEventRequest, Timestamp, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientWriteTitleEventRequest, 0x0038);
		}

		// struct FCloudScriptExecuteCloudScriptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptExecuteCloudScriptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, APIRequestsIssued, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, UnknownData_OU5K, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, Error, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, ExecutionTimeSeconds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, UnknownData_PFY0, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, FunctionName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, FunctionResult, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, FunctionResultTooLarge, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, UnknownData_JDSZ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, HttpRequestsIssued, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, Logs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, LogsTooLarge, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, UnknownData_3NUF, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, MemoryConsumedBytes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, ProcessorTimeSeconds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, Revision, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptExecuteCloudScriptResult, 0x0060);
		}

		// struct FCloudScriptExecuteFunctionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptExecuteFunctionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, Error, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, ExecutionTimeMilliseconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, UnknownData_7567, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, FunctionResult, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, FunctionResultTooLarge, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, UnknownData_P6CL, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptExecuteFunctionResult, 0x0038);
		}

		// struct FCloudScriptListFunctionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptListFunctionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptListFunctionsResult, Functions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptListFunctionsResult, 0x0018);
		}

		// struct FCloudScriptListHttpFunctionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptListHttpFunctionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptListHttpFunctionsResult, Functions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptListHttpFunctionsResult, 0x0018);
		}

		// struct FCloudScriptListQueuedFunctionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptListQueuedFunctionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptListQueuedFunctionsResult, Functions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptListQueuedFunctionsResult, 0x0018);
		}

		// struct FCloudScriptEmptyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptEmptyResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptEmptyResult, 0x0008);
		}

		// struct FCloudScriptExecuteEntityCloudScriptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptExecuteEntityCloudScriptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, FunctionParameter, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, GeneratePlayStreamEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, RevisionSelection, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, UnknownData_KSDH, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, SpecificRevision, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptExecuteEntityCloudScriptRequest, 0x0038);
		}

		// struct FCloudScriptExecuteFunctionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptExecuteFunctionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, FunctionParameter, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, GeneratePlayStreamEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, UnknownData_42B6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptExecuteFunctionRequest, 0x0038);
		}

		// struct FCloudScriptListFunctionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptListFunctionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptListFunctionsRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptListFunctionsRequest, 0x0010);
		}

		// struct FCloudScriptPostFunctionResultForEntityTriggeredActionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptPostFunctionResultForEntityTriggeredActionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForEntityTriggeredActionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForEntityTriggeredActionRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForEntityTriggeredActionRequest, FunctionResult, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptPostFunctionResultForEntityTriggeredActionRequest, 0x0020);
		}

		// struct FCloudScriptPostFunctionResultForFunctionExecutionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptPostFunctionResultForFunctionExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForFunctionExecutionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForFunctionExecutionRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForFunctionExecutionRequest, FunctionResult, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptPostFunctionResultForFunctionExecutionRequest, 0x0020);
		}

		// struct FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptPostFunctionResultForPlayerTriggeredActionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, FunctionResult, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, PlayerProfile, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, PlayStreamEventEnvelope, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, 0x0030);
		}

		// struct FCloudScriptPostFunctionResultForScheduledTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptPostFunctionResultForScheduledTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForScheduledTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForScheduledTaskRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForScheduledTaskRequest, FunctionResult, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForScheduledTaskRequest, ScheduledTaskId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptPostFunctionResultForScheduledTaskRequest, 0x0028);
		}

		// struct FCloudScriptRegisterHttpFunctionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptRegisterHttpFunctionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterHttpFunctionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterHttpFunctionRequest, FunctionName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterHttpFunctionRequest, FunctionUrl, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptRegisterHttpFunctionRequest, 0x0030);
		}

		// struct FCloudScriptRegisterQueuedFunctionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptRegisterQueuedFunctionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterQueuedFunctionRequest, ConnectionString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterQueuedFunctionRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterQueuedFunctionRequest, FunctionName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterQueuedFunctionRequest, QueueName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptRegisterQueuedFunctionRequest, 0x0040);
		}

		// struct FCloudScriptUnregisterFunctionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptUnregisterFunctionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptUnregisterFunctionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptUnregisterFunctionRequest, FunctionName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptUnregisterFunctionRequest, 0x0020);
		}

		// struct FDataAbortFileUploadsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataAbortFileUploadsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsResponse, ProfileVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsResponse, UnknownData_MI13, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataAbortFileUploadsResponse, 0x0018);
		}

		// struct FDataAbortFileUploadsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataAbortFileUploadsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsRequest, FileNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsRequest, ProfileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsRequest, UnknownData_L4SN, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataAbortFileUploadsRequest, 0x0030);
		}

		// struct FDataDeleteFilesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataDeleteFilesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesResponse, ProfileVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesResponse, UnknownData_F4CJ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataDeleteFilesResponse, 0x0018);
		}

		// struct FDataFinalizeFileUploadsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataFinalizeFileUploadsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsResponse, MetaData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsResponse, ProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsResponse, UnknownData_1NZI, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataFinalizeFileUploadsResponse, 0x0020);
		}

		// struct FDataGetFilesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataGetFilesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesResponse, MetaData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesResponse, ProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesResponse, UnknownData_8F4H, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataGetFilesResponse, 0x0020);
		}

		// struct FDataGetObjectsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataGetObjectsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsResponse, Objects, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsResponse, ProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsResponse, UnknownData_6RFL, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataGetObjectsResponse, 0x0020);
		}

		// struct FDataInitiateFileUploadsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataInitiateFileUploadsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsResponse, ProfileVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsResponse, UnknownData_CAQR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsResponse, UploadDetails, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataInitiateFileUploadsResponse, 0x0028);
		}

		// struct FDataSetObjectsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataSetObjectsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsResponse, ProfileVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsResponse, UnknownData_GSE2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsResponse, SetResults, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataSetObjectsResponse, 0x0020);
		}

		// struct FDataDeleteFilesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataDeleteFilesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesRequest, FileNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesRequest, ProfileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesRequest, UnknownData_EUDV, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataDeleteFilesRequest, 0x0030);
		}

		// struct FDataFinalizeFileUploadsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataFinalizeFileUploadsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsRequest, FileNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsRequest, ProfileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsRequest, UnknownData_MXIQ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataFinalizeFileUploadsRequest, 0x0030);
		}

		// struct FDataGetFilesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataGetFilesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesRequest, Entity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataGetFilesRequest, 0x0018);
		}

		// struct FDataGetObjectsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataGetObjectsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsRequest, EscapeObject, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsRequest, UnknownData_3P8Q, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataGetObjectsRequest, 0x0020);
		}

		// struct FDataInitiateFileUploadsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataInitiateFileUploadsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsRequest, FileNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsRequest, ProfileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsRequest, UnknownData_O9QM, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataInitiateFileUploadsRequest, 0x0030);
		}

		// struct FDataSetObjectsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataSetObjectsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsRequest, ExpectedProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsRequest, UnknownData_LZE0, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsRequest, Objects, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataSetObjectsRequest, 0x0030);
		}

		// struct FEventsWriteEventsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__EventsWriteEventsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsWriteEventsResponse, AssignedEventIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventsWriteEventsResponse, 0x0018);
		}

		// struct FEventsWriteEventsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__EventsWriteEventsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsWriteEventsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsWriteEventsRequest, Events, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventsWriteEventsRequest, 0x0020);
		}

		// struct FExperimentationCreateExclusionGroupResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationCreateExclusionGroupResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExclusionGroupResult, ExclusionGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationCreateExclusionGroupResult, 0x0018);
		}

		// struct FExperimentationCreateExclusionGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationCreateExclusionGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExclusionGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExclusionGroupRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExclusionGroupRequest, Name, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationCreateExclusionGroupRequest, 0x0030);
		}

		// struct FExperimentationCreateExperimentResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationCreateExperimentResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentResult, ExperimentId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationCreateExperimentResult, 0x0018);
		}

		// struct FExperimentationCreateExperimentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationCreateExperimentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, EndDate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, ExclusionGroupId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, ExclusionGroupTrafficAllocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, ExperimentType, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, UnknownData_DGQH, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, Name, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, SegmentId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, StartDate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, TitlePlayerAccountTestIds, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, Variants, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationCreateExperimentRequest, 0x0098);
		}

		// struct FExperimentationEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationEmptyResponse, 0x0008);
		}

		// struct FExperimentationGetExclusionGroupsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExclusionGroupsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExclusionGroupsResult, ExclusionGroups, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExclusionGroupsResult, 0x0018);
		}

		// struct FExperimentationGetExclusionGroupTrafficResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExclusionGroupTrafficResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExclusionGroupTrafficResult, TrafficAllocations, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExclusionGroupTrafficResult, 0x0018);
		}

		// struct FExperimentationGetExperimentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExperimentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExperimentsResult, Experiments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExperimentsResult, 0x0018);
		}

		// struct FExperimentationGetLatestScorecardResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetLatestScorecardResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetLatestScorecardResult, Scorecard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetLatestScorecardResult, 0x0010);
		}

		// struct FExperimentationGetTreatmentAssignmentResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetTreatmentAssignmentResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetTreatmentAssignmentResult, TreatmentAssignment, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetTreatmentAssignmentResult, 0x0010);
		}

		// struct FExperimentationDeleteExclusionGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationDeleteExclusionGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationDeleteExclusionGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationDeleteExclusionGroupRequest, ExclusionGroupId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationDeleteExclusionGroupRequest, 0x0020);
		}

		// struct FExperimentationDeleteExperimentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationDeleteExperimentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationDeleteExperimentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationDeleteExperimentRequest, ExperimentId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationDeleteExperimentRequest, 0x0020);
		}

		// struct FExperimentationGetExclusionGroupsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExclusionGroupsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExclusionGroupsRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExclusionGroupsRequest, 0x0010);
		}

		// struct FExperimentationGetExclusionGroupTrafficRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExclusionGroupTrafficRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExclusionGroupTrafficRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExclusionGroupTrafficRequest, ExclusionGroupId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExclusionGroupTrafficRequest, 0x0020);
		}

		// struct FExperimentationGetExperimentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExperimentsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExperimentsRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExperimentsRequest, 0x0010);
		}

		// struct FExperimentationGetLatestScorecardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetLatestScorecardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetLatestScorecardRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetLatestScorecardRequest, ExperimentId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetLatestScorecardRequest, 0x0020);
		}

		// struct FExperimentationGetTreatmentAssignmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetTreatmentAssignmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetTreatmentAssignmentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetTreatmentAssignmentRequest, Entity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetTreatmentAssignmentRequest, 0x0018);
		}

		// struct FExperimentationStartExperimentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationStartExperimentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationStartExperimentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationStartExperimentRequest, ExperimentId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationStartExperimentRequest, 0x0020);
		}

		// struct FExperimentationStopExperimentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationStopExperimentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationStopExperimentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationStopExperimentRequest, ExperimentId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationStopExperimentRequest, 0x0020);
		}

		// struct FExperimentationUpdateExclusionGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationUpdateExclusionGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExclusionGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExclusionGroupRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExclusionGroupRequest, ExclusionGroupId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExclusionGroupRequest, Name, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationUpdateExclusionGroupRequest, 0x0040);
		}

		// struct FExperimentationUpdateExperimentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationUpdateExperimentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, EndDate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, ExclusionGroupId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, ExclusionGroupTrafficAllocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, ExperimentType, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, UnknownData_CULE, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, ID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, Name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, SegmentId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, StartDate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, TitlePlayerAccountTestIds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, Variants, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationUpdateExperimentRequest, 0x00A8);
		}

		// struct FGroupsEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsEmptyResponse, 0x0008);
		}

		// struct FGroupsAcceptGroupApplicationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsAcceptGroupApplicationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupApplicationRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupApplicationRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupApplicationRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsAcceptGroupApplicationRequest, 0x0020);
		}

		// struct FGroupsAcceptGroupInvitationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsAcceptGroupInvitationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupInvitationRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupInvitationRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupInvitationRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsAcceptGroupInvitationRequest, 0x0020);
		}

		// struct FGroupsAddMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsAddMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAddMembersRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAddMembersRequest, Group, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAddMembersRequest, Members, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAddMembersRequest, RoleId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsAddMembersRequest, 0x0038);
		}

		// struct FGroupsApplyToGroupResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsApplyToGroupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupResponse, Expires, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupResponse, Group, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsApplyToGroupResponse, 0x0028);
		}

		// struct FGroupsApplyToGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsApplyToGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupRequest, AutoAcceptOutstandingInvite, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupRequest, UnknownData_PTDA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupRequest, Entity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupRequest, Group, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsApplyToGroupRequest, 0x0028);
		}

		// struct FGroupsBlockEntityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsBlockEntityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsBlockEntityRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsBlockEntityRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsBlockEntityRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsBlockEntityRequest, 0x0020);
		}

		// struct FGroupsChangeMemberRoleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsChangeMemberRoleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsChangeMemberRoleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsChangeMemberRoleRequest, DestinationRoleId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsChangeMemberRoleRequest, Group, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsChangeMemberRoleRequest, Members, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsChangeMemberRoleRequest, OriginRoleId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsChangeMemberRoleRequest, 0x0048);
		}

		// struct FGroupsCreateGroupResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsCreateGroupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, AdminRoleId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, Created, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, GroupName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, MemberRoleId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, ProfileVersion, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, UnknownData_1ODC, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, Roles, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsCreateGroupResponse, 0x0060);
		}

		// struct FGroupsCreateGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsCreateGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRequest, GroupName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsCreateGroupRequest, 0x0028);
		}

		// struct FGroupsCreateGroupRoleResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsCreateGroupRoleResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleResponse, ProfileVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleResponse, UnknownData_I8JV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleResponse, RoleId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleResponse, RoleName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsCreateGroupRoleResponse, 0x0030);
		}

		// struct FGroupsCreateGroupRoleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsCreateGroupRoleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleRequest, Group, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleRequest, RoleId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleRequest, RoleName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsCreateGroupRoleRequest, 0x0038);
		}

		// struct FGroupsGetGroupResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsGetGroupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, AdminRoleId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, Created, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, GroupName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, MemberRoleId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, ProfileVersion, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, UnknownData_BKFH, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, Roles, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsGetGroupResponse, 0x0060);
		}

		// struct FGroupsInviteToGroupResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsInviteToGroupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupResponse, Expires, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupResponse, Group, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupResponse, InvitedByEntity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupResponse, InvitedEntity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupResponse, RoleId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsInviteToGroupResponse, 0x0040);
		}

		// struct FGroupsIsMemberResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsIsMemberResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberResponse, IsMember, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberResponse, UnknownData_QYCI, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsIsMemberResponse, 0x0010);
		}

		// struct FGroupsListGroupApplicationsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupApplicationsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupApplicationsResponse, Applications, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupApplicationsResponse, 0x0018);
		}

		// struct FGroupsListGroupBlocksResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupBlocksResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupBlocksResponse, BlockedEntities, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupBlocksResponse, 0x0018);
		}

		// struct FGroupsListGroupInvitationsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupInvitationsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupInvitationsResponse, Invitations, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupInvitationsResponse, 0x0018);
		}

		// struct FGroupsListGroupMembersResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupMembersResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupMembersResponse, Members, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupMembersResponse, 0x0018);
		}

		// struct FGroupsListMembershipResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListMembershipResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipResponse, Groups, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListMembershipResponse, 0x0018);
		}

		// struct FGroupsListMembershipOpportunitiesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListMembershipOpportunitiesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipOpportunitiesResponse, Applications, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipOpportunitiesResponse, Invitations, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListMembershipOpportunitiesResponse, 0x0028);
		}

		// struct FGroupsUpdateGroupResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsUpdateGroupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupResponse, OperationReason, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupResponse, ProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupResponse, SetResult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupResponse, UnknownData_X856, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsUpdateGroupResponse, 0x0020);
		}

		// struct FGroupsUpdateGroupRoleResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsUpdateGroupRoleResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleResponse, OperationReason, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleResponse, ProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleResponse, SetResult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleResponse, UnknownData_9ARQ, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsUpdateGroupRoleResponse, 0x0020);
		}

		// struct FGroupsDeleteGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsDeleteGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsDeleteGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsDeleteGroupRequest, Group, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsDeleteGroupRequest, 0x0018);
		}

		// struct FGroupsDeleteRoleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsDeleteRoleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsDeleteRoleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsDeleteRoleRequest, Group, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsDeleteRoleRequest, RoleId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsDeleteRoleRequest, 0x0028);
		}

		// struct FGroupsGetGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsGetGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupRequest, Group, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupRequest, GroupName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsGetGroupRequest, 0x0028);
		}

		// struct FGroupsInviteToGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsInviteToGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, AutoAcceptOutstandingApplication, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, UnknownData_9OUY, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, Entity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, Group, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, RoleId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsInviteToGroupRequest, 0x0038);
		}

		// struct FGroupsIsMemberRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsIsMemberRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberRequest, Group, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberRequest, RoleId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsIsMemberRequest, 0x0030);
		}

		// struct FGroupsListGroupApplicationsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupApplicationsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupApplicationsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupApplicationsRequest, Group, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupApplicationsRequest, 0x0018);
		}

		// struct FGroupsListGroupBlocksRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupBlocksRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupBlocksRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupBlocksRequest, Group, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupBlocksRequest, 0x0018);
		}

		// struct FGroupsListGroupInvitationsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupInvitationsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupInvitationsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupInvitationsRequest, Group, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupInvitationsRequest, 0x0018);
		}

		// struct FGroupsListGroupMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupMembersRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupMembersRequest, Group, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupMembersRequest, 0x0018);
		}

		// struct FGroupsListMembershipRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListMembershipRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipRequest, Entity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListMembershipRequest, 0x0018);
		}

		// struct FGroupsListMembershipOpportunitiesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListMembershipOpportunitiesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipOpportunitiesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipOpportunitiesRequest, Entity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListMembershipOpportunitiesRequest, 0x0018);
		}

		// struct FGroupsRemoveGroupApplicationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsRemoveGroupApplicationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupApplicationRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupApplicationRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupApplicationRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsRemoveGroupApplicationRequest, 0x0020);
		}

		// struct FGroupsRemoveGroupInvitationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsRemoveGroupInvitationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupInvitationRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupInvitationRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupInvitationRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsRemoveGroupInvitationRequest, 0x0020);
		}

		// struct FGroupsRemoveMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsRemoveMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveMembersRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveMembersRequest, Group, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveMembersRequest, Members, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveMembersRequest, RoleId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsRemoveMembersRequest, 0x0038);
		}

		// struct FGroupsUnblockEntityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsUnblockEntityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUnblockEntityRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUnblockEntityRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUnblockEntityRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsUnblockEntityRequest, 0x0020);
		}

		// struct FGroupsUpdateGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsUpdateGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, AdminRoleId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, ExpectedProfileVersion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, UnknownData_H863, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, GroupName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, MemberRoleId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsUpdateGroupRequest, 0x0050);
		}

		// struct FGroupsUpdateGroupRoleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsUpdateGroupRoleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, ExpectedProfileVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, UnknownData_PDMC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, Group, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, RoleId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, RoleName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsUpdateGroupRoleRequest, 0x0040);
		}

		// struct FInsightsInsightsGetDetailsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetDetailsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, DataUsageMb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, UnknownData_Z68J, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, ErrorMessage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, Limits, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, PendingOperations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, PerformanceLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, RetentionDays, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetDetailsResponse, 0x0040);
		}

		// struct FInsightsInsightsGetLimitsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetLimitsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetLimitsResponse, DefaultPerformanceLevel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetLimitsResponse, DefaultStorageRetentionDays, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetLimitsResponse, StorageMaxRetentionDays, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetLimitsResponse, StorageMinRetentionDays, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetLimitsResponse, SubMeters, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetLimitsResponse, 0x0028);
		}

		// struct FInsightsInsightsGetOperationStatusResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetOperationStatusResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationCompletedTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationLastUpdated, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationStartedTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, UnknownData_V82Z, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, Status, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetOperationStatusResponse, 0x0080);
		}

		// struct FInsightsInsightsGetPendingOperationsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetPendingOperationsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetPendingOperationsResponse, PendingOperations, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetPendingOperationsResponse, 0x0018);
		}

		// struct FInsightsInsightsOperationResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsOperationResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsOperationResponse, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsOperationResponse, OperationId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsOperationResponse, OperationType, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsOperationResponse, 0x0038);
		}

		// struct FInsightsInsightsEmptyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsEmptyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsEmptyRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsEmptyRequest, 0x0010);
		}

		// struct FInsightsInsightsGetOperationStatusRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetOperationStatusRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusRequest, OperationId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetOperationStatusRequest, 0x0020);
		}

		// struct FInsightsInsightsGetPendingOperationsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetPendingOperationsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetPendingOperationsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetPendingOperationsRequest, OperationType, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetPendingOperationsRequest, 0x0020);
		}

		// struct FInsightsInsightsSetPerformanceRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsSetPerformanceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetPerformanceRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetPerformanceRequest, PerformanceLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetPerformanceRequest, UnknownData_TVWJ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsSetPerformanceRequest, 0x0018);
		}

		// struct FInsightsInsightsSetStorageRetentionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsSetStorageRetentionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetStorageRetentionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetStorageRetentionRequest, RetentionDays, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetStorageRetentionRequest, UnknownData_DYMX, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsSetStorageRetentionRequest, 0x0018);
		}

		// struct FLocalizationGetLanguageListResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__LocalizationGetLanguageListResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationGetLanguageListResponse, LanguageList, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizationGetLanguageListResponse, 0x0018);
		}

		// struct FLocalizationGetLanguageListRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__LocalizationGetLanguageListRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationGetLanguageListRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizationGetLanguageListRequest, 0x0010);
		}

		// struct FMatchmakerAuthUserResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerAuthUserResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerAuthUserResponse, Authorized, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerAuthUserResponse, UnknownData_GCPP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerAuthUserResponse, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerAuthUserResponse, 0x0020);
		}

		// struct FMatchmakerAuthUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerAuthUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerAuthUserRequest, AuthorizationTicket, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerAuthUserRequest, 0x0018);
		}

		// struct FMatchmakerPlayerJoinedResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerPlayerJoinedResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerPlayerJoinedResponse, 0x0008);
		}

		// struct FMatchmakerPlayerLeftResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerPlayerLeftResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerPlayerLeftResponse, 0x0008);
		}

		// struct FMatchmakerStartGameResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerStartGameResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, GameId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, ServerIPV4Address, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, ServerIPV6Address, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, ServerPort, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, UnknownData_D7N9, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, ServerPublicDNSName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerStartGameResponse, 0x0050);
		}

		// struct FMatchmakerUserInfoResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerUserInfoResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, Inventory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, IsDeveloper, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, UnknownData_5D7A, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, SteamId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, TitleDisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, Username, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, VirtualCurrency, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, VirtualCurrencyRechargeTimes, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerUserInfoResponse, 0x0070);
		}

		// struct FMatchmakerPlayerJoinedRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerPlayerJoinedRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerJoinedRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerJoinedRequest, LobbyId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerJoinedRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerPlayerJoinedRequest, 0x0030);
		}

		// struct FMatchmakerPlayerLeftRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerPlayerLeftRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerLeftRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerLeftRequest, LobbyId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerLeftRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerPlayerLeftRequest, 0x0030);
		}

		// struct FMatchmakerStartGameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerStartGameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, Build, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, CustomCommandLineData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, ExternalMatchmakerEventEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, GameMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, Region, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, UnknownData_QZ4X, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerStartGameRequest, 0x0058);
		}

		// struct FMatchmakerUserInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerUserInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoRequest, MinCatalogVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoRequest, UnknownData_87TA, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerUserInfoRequest, 0x0028);
		}

		// struct FMultiplayerCancelAllMatchmakingTicketsForPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelAllMatchmakingTicketsForPlayerResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelAllMatchmakingTicketsForPlayerResult, 0x0008);
		}

		// struct FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelAllMatchmakingTicketsForPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest, QueueName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest, 0x0028);
		}

		// struct FMultiplayerCancelAllServerBackfillTicketsForPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelAllServerBackfillTicketsForPlayerResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelAllServerBackfillTicketsForPlayerResult, 0x0008);
		}

		// struct FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelAllServerBackfillTicketsForPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest, QueueName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest, 0x0028);
		}

		// struct FMultiplayerCancelMatchmakingTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelMatchmakingTicketResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelMatchmakingTicketResult, 0x0008);
		}

		// struct FMultiplayerCancelMatchmakingTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelMatchmakingTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelMatchmakingTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelMatchmakingTicketRequest, QueueName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelMatchmakingTicketRequest, TicketId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelMatchmakingTicketRequest, 0x0030);
		}

		// struct FMultiplayerCancelServerBackfillTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelServerBackfillTicketResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelServerBackfillTicketResult, 0x0008);
		}

		// struct FMultiplayerCancelServerBackfillTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelServerBackfillTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelServerBackfillTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelServerBackfillTicketRequest, QueueName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelServerBackfillTicketRequest, TicketId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelServerBackfillTicketRequest, 0x0030);
		}

		// struct FMultiplayerBuildAliasDetailsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerBuildAliasDetailsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerBuildAliasDetailsResponse, AliasId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerBuildAliasDetailsResponse, AliasName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerBuildAliasDetailsResponse, BuildSelectionCriteria, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerBuildAliasDetailsResponse, 0x0038);
		}

		// struct FMultiplayerCreateBuildAliasRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildAliasRequest, AliasName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildAliasRequest, BuildSelectionCriteria, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildAliasRequest, CustomTags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildAliasRequest, 0x0030);
		}

		// struct FMultiplayerCreateBuildWithCustomContainerResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithCustomContainerResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, UnknownData_8L4C, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, BuildId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, BuildName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, ContainerFlavor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, UnknownData_HZX5, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, ContainerRunCommand, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, CreationTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, CustomGameContainerImage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, GameAssetReferences, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, GameCertificateReferences, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, LinuxInstrumentationConfiguration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, MetaData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, MultiplayerServerCountPerVm, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, UnknownData_QGDN, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, OsPlatform, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, Ports, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, RegionConfigurations, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, ServerType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, UseStreamingForAssetDownloads, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, VmSize, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, UnknownData_1M2Z, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithCustomContainerResponse, 0x00E0);
		}

		// struct FMultiplayerCreateBuildWithCustomContainerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithCustomContainerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, UnknownData_WRPN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, BuildName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, ContainerFlavor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, UnknownData_7GPV, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, ContainerImageReference, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, ContainerRunCommand, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, CustomTags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, GameAssetReferences, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, GameCertificateReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, LinuxInstrumentationConfiguration, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, MetaData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, MultiplayerServerCountPerVm, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, UnknownData_UXFR, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, Ports, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, RegionConfigurations, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, UseStreamingForAssetDownloads, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, VmSize, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, UnknownData_FMSJ, 0x00A2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithCustomContainerRequest, 0x00A8);
		}

		// struct FMultiplayerCreateBuildWithManagedContainerResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithManagedContainerResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, UnknownData_K9FS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, BuildId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, BuildName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, ContainerFlavor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, UnknownData_YRHF, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, CreationTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, GameAssetReferences, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, GameCertificateReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, GameWorkingDirectory, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, InstrumentationConfiguration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, MetaData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, MultiplayerServerCountPerVm, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, UnknownData_6HO2, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, OsPlatform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, Ports, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, RegionConfigurations, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, ServerType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, StartMultiplayerServerCommand, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, UseStreamingForAssetDownloads, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, VmSize, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, UnknownData_6JRU, 0x00E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithManagedContainerResponse, 0x00E8);
		}

		// struct FMultiplayerCreateBuildWithManagedContainerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithManagedContainerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, UnknownData_UF0D, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, BuildName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, ContainerFlavor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, UnknownData_Y3I5, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, GameAssetReferences, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, GameCertificateReferences, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, GameWorkingDirectory, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, InstrumentationConfiguration, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, MetaData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, MultiplayerServerCountPerVm, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, UnknownData_OQRL, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, Ports, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, RegionConfigurations, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, StartMultiplayerServerCommand, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, UseStreamingForAssetDownloads, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, VmSize, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, UnknownData_8X7C, 0x00AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithManagedContainerRequest, 0x00B0);
		}

		// struct FMultiplayerCreateBuildWithProcessBasedServerResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithProcessBasedServerResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UnknownData_KM3S, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, BuildId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, BuildName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, ContainerFlavor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UnknownData_87C7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, CreationTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, GameAssetReferences, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, GameCertificateReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, GameWorkingDirectory, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, InstrumentationConfiguration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, IsOSPreview, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UnknownData_MC8L, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, MetaData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, MultiplayerServerCountPerVm, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UnknownData_QKPI, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, OsPlatform, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, Ports, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, RegionConfigurations, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, ServerType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, StartMultiplayerServerCommand, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UseStreamingForAssetDownloads, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, VmSize, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UnknownData_ATS9, 0x00EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, 0x00F0);
		}

		// struct FMultiplayerCreateBuildWithProcessBasedServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithProcessBasedServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, UnknownData_PW64, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, BuildName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, GameAssetReferences, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, GameCertificateReferences, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, GameWorkingDirectory, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, InstrumentationConfiguration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, IsOSPreview, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, UnknownData_B42I, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, MetaData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, MultiplayerServerCountPerVm, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, UnknownData_TUXJ, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, OsPlatform, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, Ports, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, RegionConfigurations, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, StartMultiplayerServerCommand, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, UseStreamingForAssetDownloads, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, VmSize, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, UnknownData_FDXD, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, 0x00C0);
		}

		// struct FMultiplayerCreateMatchmakingTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateMatchmakingTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketResult, TicketId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateMatchmakingTicketResult, 0x0018);
		}

		// struct FMultiplayerCreateMatchmakingTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateMatchmakingTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, Creator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, GiveUpAfterSeconds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, UnknownData_6K8D, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, MembersToMatchWith, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, QueueName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateMatchmakingTicketRequest, 0x0040);
		}

		// struct FMultiplayerCreateRemoteUserResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateRemoteUserResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserResponse, ExpirationTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserResponse, Password, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserResponse, Username, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateRemoteUserResponse, 0x0038);
		}

		// struct FMultiplayerCreateRemoteUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateRemoteUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, ExpirationTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, Region, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, Username, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, VmId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateRemoteUserRequest, 0x0060);
		}

		// struct FMultiplayerCreateServerBackfillTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateServerBackfillTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketResult, TicketId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateServerBackfillTicketResult, 0x0018);
		}

		// struct FMultiplayerCreateServerBackfillTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateServerBackfillTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, GiveUpAfterSeconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, UnknownData_F4N1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, Members, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, QueueName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, ServerDetails, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateServerBackfillTicketRequest, 0x0040);
		}

		// struct FMultiplayerCreateServerMatchmakingTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateServerMatchmakingTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerMatchmakingTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerMatchmakingTicketRequest, GiveUpAfterSeconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerMatchmakingTicketRequest, UnknownData_PZGN, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerMatchmakingTicketRequest, Members, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerMatchmakingTicketRequest, QueueName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateServerMatchmakingTicketRequest, 0x0038);
		}

		// struct FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateTitleMultiplayerServersQuotaChangeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse, RequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse, WasApproved, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse, UnknownData_TXDE, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse, 0x0020);
		}

		// struct FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateTitleMultiplayerServersQuotaChangeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, ChangeDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, Changes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, ContactEmail, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, Notes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, StartDate, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, 0x0060);
		}

		// struct FMultiplayerEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerEmptyResponse, 0x0008);
		}

		// struct FMultiplayerEnableMultiplayerServersForTitleResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerEnableMultiplayerServersForTitleResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerEnableMultiplayerServersForTitleResponse, Status, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerEnableMultiplayerServersForTitleResponse, UnknownData_4KNX, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerEnableMultiplayerServersForTitleResponse, 0x0010);
		}

		// struct FMultiplayerGetAssetDownloadUrlResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetAssetDownloadUrlResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetDownloadUrlResponse, AssetDownloadUrl, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetDownloadUrlResponse, Filename, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetAssetDownloadUrlResponse, 0x0028);
		}

		// struct FMultiplayerGetAssetUploadUrlResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetAssetUploadUrlResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetUploadUrlResponse, AssetUploadUrl, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetUploadUrlResponse, Filename, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetAssetUploadUrlResponse, 0x0028);
		}

		// struct FMultiplayerGetBuildResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetBuildResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, UnknownData_4W4S, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, BuildId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, BuildName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, BuildStatus, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, ContainerFlavor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, UnknownData_8F80, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, ContainerRunCommand, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, CreationTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, CustomGameContainerImage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, GameAssetReferences, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, GameCertificateReferences, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, InstrumentationConfiguration, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, MetaData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, MultiplayerServerCountPerVm, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, UnknownData_IRJ4, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, OsPlatform, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, Ports, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, RegionConfigurations, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, ServerType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, StartMultiplayerServerCommand, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, UseStreamingForAssetDownloads, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, VmSize, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, UnknownData_QZOJ, 0x00FA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetBuildResponse, 0x0100);
		}

		// struct FMultiplayerGetContainerRegistryCredentialsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetContainerRegistryCredentialsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetContainerRegistryCredentialsResponse, DnsName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetContainerRegistryCredentialsResponse, Password, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetContainerRegistryCredentialsResponse, Username, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetContainerRegistryCredentialsResponse, 0x0038);
		}

		// struct FMultiplayerGetMatchResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMatchResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchResult, MatchId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchResult, Members, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchResult, RegionPreferences, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchResult, ServerDetails, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMatchResult, 0x0040);
		}

		// struct FMultiplayerGetMatchmakingTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMatchmakingTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, CancellationReasonString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, Created, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, Creator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, GiveUpAfterSeconds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, UnknownData_6AHR, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, MatchId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, Members, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, MembersToMatchWith, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, QueueName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, Status, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, TicketId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMatchmakingTicketResult, 0x0098);
		}

		// struct FMultiplayerGetMultiplayerServerDetailsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMultiplayerServerDetailsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, ConnectedPlayers, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, FQDN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, IPV4Address, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, LastStateTransitionTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, Ports, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, Region, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, ServerId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, SessionId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, State, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, VmId, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMultiplayerServerDetailsResponse, 0x00B8);
		}

		// struct FMultiplayerGetMultiplayerServerLogsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMultiplayerServerLogsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerLogsResponse, LogDownloadUrl, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMultiplayerServerLogsResponse, 0x0018);
		}

		// struct FMultiplayerGetQueueStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetQueueStatisticsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetQueueStatisticsResult, NumberOfPlayersMatching, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetQueueStatisticsResult, UnknownData_Q4ZI, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetQueueStatisticsResult, TimeToMatchStatisticsInSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetQueueStatisticsResult, 0x0018);
		}

		// struct FMultiplayerGetRemoteLoginEndpointResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetRemoteLoginEndpointResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointResponse, IPV4Address, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointResponse, Port, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointResponse, UnknownData_HF3S, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetRemoteLoginEndpointResponse, 0x0020);
		}

		// struct FMultiplayerGetServerBackfillTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetServerBackfillTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, CancellationReasonString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, Created, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, GiveUpAfterSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, UnknownData_ABE9, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, MatchId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, Members, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, QueueName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, ServerDetails, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, Status, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, TicketId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetServerBackfillTicketResult, 0x0088);
		}

		// struct FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleEnabledForMultiplayerServersStatusResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse, Status, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse, UnknownData_QH5P, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse, 0x0010);
		}

		// struct FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleMultiplayerServersQuotaChangeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse, Change, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse, 0x0010);
		}

		// struct FMultiplayerGetTitleMultiplayerServersQuotasResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleMultiplayerServersQuotasResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleMultiplayerServersQuotasResponse, Quotas, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleMultiplayerServersQuotasResponse, 0x0010);
		}

		// struct FMultiplayerJoinMatchmakingTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerJoinMatchmakingTicketResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerJoinMatchmakingTicketResult, 0x0008);
		}

		// struct FMultiplayerListMultiplayerServersResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListMultiplayerServersResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersResponse, MultiplayerServerSummaries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersResponse, UnknownData_LANV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListMultiplayerServersResponse, 0x0030);
		}

		// struct FMultiplayerListAssetSummariesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListAssetSummariesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesResponse, AssetSummaries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesResponse, UnknownData_OAY1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListAssetSummariesResponse, 0x0030);
		}

		// struct FMultiplayerListBuildAliasesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListBuildAliasesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesResponse, BuildAliases, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesResponse, UnknownData_WT1I, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListBuildAliasesResponse, 0x0030);
		}

		// struct FMultiplayerListBuildSummariesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListBuildSummariesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesResponse, BuildSummaries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesResponse, UnknownData_9JZ6, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListBuildSummariesResponse, 0x0030);
		}

		// struct FMultiplayerListCertificateSummariesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListCertificateSummariesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesResponse, CertificateSummaries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesResponse, UnknownData_M09S, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListCertificateSummariesResponse, 0x0030);
		}

		// struct FMultiplayerListContainerImagesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListContainerImagesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesResponse, Images, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesResponse, UnknownData_VFXW, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListContainerImagesResponse, 0x0030);
		}

		// struct FMultiplayerListContainerImageTagsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListContainerImageTagsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImageTagsResponse, Tags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListContainerImageTagsResponse, 0x0018);
		}

		// struct FMultiplayerListMatchmakingTicketsForPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListMatchmakingTicketsForPlayerResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMatchmakingTicketsForPlayerResult, TicketIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListMatchmakingTicketsForPlayerResult, 0x0018);
		}

		// struct FMultiplayerListPartyQosServersResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListPartyQosServersResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListPartyQosServersResponse, PageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListPartyQosServersResponse, UnknownData_SAGW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListPartyQosServersResponse, QosServers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListPartyQosServersResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListPartyQosServersResponse, 0x0030);
		}

		// struct FMultiplayerListQosServersForTitleResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListQosServersForTitleResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleResponse, PageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleResponse, UnknownData_IFV1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleResponse, QosServers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListQosServersForTitleResponse, 0x0030);
		}

		// struct FMultiplayerListServerBackfillTicketsForPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListServerBackfillTicketsForPlayerResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListServerBackfillTicketsForPlayerResult, TicketIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListServerBackfillTicketsForPlayerResult, 0x0018);
		}

		// struct FMultiplayerListTitleMultiplayerServersQuotaChangesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListTitleMultiplayerServersQuotaChangesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListTitleMultiplayerServersQuotaChangesResponse, Changes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListTitleMultiplayerServersQuotaChangesResponse, 0x0018);
		}

		// struct FMultiplayerListVirtualMachineSummariesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListVirtualMachineSummariesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesResponse, PageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesResponse, UnknownData_QEKY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesResponse, SkipToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesResponse, VirtualMachines, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListVirtualMachineSummariesResponse, 0x0030);
		}

		// struct FMultiplayerRequestMultiplayerServerResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerRequestMultiplayerServerResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, ConnectedPlayers, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, FQDN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, IPV4Address, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, LastStateTransitionTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, Ports, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, Region, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, ServerId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, SessionId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, State, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, VmId, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerRequestMultiplayerServerResponse, 0x00B8);
		}

		// struct FMultiplayerRolloverContainerRegistryCredentialsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerRolloverContainerRegistryCredentialsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRolloverContainerRegistryCredentialsResponse, DnsName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRolloverContainerRegistryCredentialsResponse, Password, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRolloverContainerRegistryCredentialsResponse, Username, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerRolloverContainerRegistryCredentialsResponse, 0x0038);
		}

		// struct FMultiplayerDeleteAssetRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteAssetRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteAssetRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteAssetRequest, Filename, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteAssetRequest, 0x0020);
		}

		// struct FMultiplayerDeleteBuildRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteBuildRequest, 0x0020);
		}

		// struct FMultiplayerDeleteBuildAliasRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteBuildAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildAliasRequest, AliasId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildAliasRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteBuildAliasRequest, 0x0020);
		}

		// struct FMultiplayerDeleteBuildRegionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteBuildRegionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildRegionRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildRegionRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildRegionRequest, Region, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteBuildRegionRequest, 0x0030);
		}

		// struct FMultiplayerDeleteCertificateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteCertificateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteCertificateRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteCertificateRequest, Name, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteCertificateRequest, 0x0020);
		}

		// struct FMultiplayerDeleteContainerImageRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteContainerImageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteContainerImageRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteContainerImageRequest, ImageName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteContainerImageRequest, 0x0020);
		}

		// struct FMultiplayerDeleteRemoteUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteRemoteUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteRemoteUserRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteRemoteUserRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteRemoteUserRequest, Region, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteRemoteUserRequest, Username, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteRemoteUserRequest, VmId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteRemoteUserRequest, 0x0050);
		}

		// struct FMultiplayerEnableMultiplayerServersForTitleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerEnableMultiplayerServersForTitleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerEnableMultiplayerServersForTitleRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerEnableMultiplayerServersForTitleRequest, 0x0010);
		}

		// struct FMultiplayerGetAssetDownloadUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetAssetDownloadUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetDownloadUrlRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetDownloadUrlRequest, Filename, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetAssetDownloadUrlRequest, 0x0020);
		}

		// struct FMultiplayerGetAssetUploadUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetAssetUploadUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetUploadUrlRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetUploadUrlRequest, Filename, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetAssetUploadUrlRequest, 0x0020);
		}

		// struct FMultiplayerGetBuildRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetBuildRequest, 0x0020);
		}

		// struct FMultiplayerGetBuildAliasRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetBuildAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildAliasRequest, AliasId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildAliasRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetBuildAliasRequest, 0x0020);
		}

		// struct FMultiplayerGetContainerRegistryCredentialsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetContainerRegistryCredentialsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetContainerRegistryCredentialsRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetContainerRegistryCredentialsRequest, 0x0010);
		}

		// struct FMultiplayerGetMatchRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMatchRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, EscapeObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, UnknownData_BQY7, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, MatchId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, QueueName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, ReturnMemberAttributes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, UnknownData_35NN, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMatchRequest, 0x0040);
		}

		// struct FMultiplayerGetMatchmakingTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMatchmakingTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketRequest, EscapeObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketRequest, UnknownData_OPFH, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketRequest, QueueName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketRequest, TicketId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMatchmakingTicketRequest, 0x0038);
		}

		// struct FMultiplayerGetMultiplayerServerDetailsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMultiplayerServerDetailsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsRequest, Region, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsRequest, SessionId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMultiplayerServerDetailsRequest, 0x0040);
		}

		// struct FMultiplayerGetMultiplayerServerLogsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMultiplayerServerLogsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerLogsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerLogsRequest, ServerId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMultiplayerServerLogsRequest, 0x0020);
		}

		// struct FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMultiplayerSessionLogsBySessionIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest, SessionId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest, 0x0020);
		}

		// struct FMultiplayerGetQueueStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetQueueStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetQueueStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetQueueStatisticsRequest, QueueName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetQueueStatisticsRequest, 0x0020);
		}

		// struct FMultiplayerGetRemoteLoginEndpointRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetRemoteLoginEndpointRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointRequest, Region, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointRequest, VmId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetRemoteLoginEndpointRequest, 0x0040);
		}

		// struct FMultiplayerGetServerBackfillTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetServerBackfillTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketRequest, EscapeObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketRequest, UnknownData_KKZ1, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketRequest, QueueName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketRequest, TicketId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetServerBackfillTicketRequest, 0x0038);
		}

		// struct FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleEnabledForMultiplayerServersStatusRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest, 0x0010);
		}

		// struct FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleMultiplayerServersQuotaChangeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest, RequestId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest, 0x0020);
		}

		// struct FMultiplayerGetTitleMultiplayerServersQuotasRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleMultiplayerServersQuotasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleMultiplayerServersQuotasRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleMultiplayerServersQuotasRequest, 0x0010);
		}

		// struct FMultiplayerJoinMatchmakingTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerJoinMatchmakingTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerJoinMatchmakingTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerJoinMatchmakingTicketRequest, Member, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerJoinMatchmakingTicketRequest, QueueName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerJoinMatchmakingTicketRequest, TicketId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerJoinMatchmakingTicketRequest, 0x0038);
		}

		// struct FMultiplayerListMultiplayerServersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListMultiplayerServersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, PageSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, UnknownData_JZOK, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, Region, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, SkipToken, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListMultiplayerServersRequest, 0x0048);
		}

		// struct FMultiplayerListAssetSummariesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListAssetSummariesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesRequest, PageSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesRequest, UnknownData_Q7UX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesRequest, SkipToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListAssetSummariesRequest, 0x0028);
		}

		// struct FMultiplayerListBuildAliasesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListBuildAliasesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesRequest, PageSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesRequest, UnknownData_S0XH, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesRequest, SkipToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListBuildAliasesRequest, 0x0028);
		}

		// struct FMultiplayerListBuildSummariesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListBuildSummariesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesRequest, PageSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesRequest, UnknownData_60I0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesRequest, SkipToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListBuildSummariesRequest, 0x0028);
		}

		// struct FMultiplayerListCertificateSummariesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListCertificateSummariesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesRequest, PageSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesRequest, UnknownData_17XE, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesRequest, SkipToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListCertificateSummariesRequest, 0x0028);
		}

		// struct FMultiplayerListContainerImagesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListContainerImagesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesRequest, PageSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesRequest, UnknownData_RD6R, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesRequest, SkipToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListContainerImagesRequest, 0x0028);
		}

		// struct FMultiplayerListContainerImageTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListContainerImageTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImageTagsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImageTagsRequest, ImageName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListContainerImageTagsRequest, 0x0020);
		}

		// struct FMultiplayerListMatchmakingTicketsForPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListMatchmakingTicketsForPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMatchmakingTicketsForPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMatchmakingTicketsForPlayerRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMatchmakingTicketsForPlayerRequest, QueueName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListMatchmakingTicketsForPlayerRequest, 0x0028);
		}

		// struct FMultiplayerListPartyQosServersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListPartyQosServersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListPartyQosServersRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListPartyQosServersRequest, 0x0010);
		}

		// struct FMultiplayerListQosServersForTitleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListQosServersForTitleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleRequest, IncludeAllRegions, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleRequest, UnknownData_489I, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListQosServersForTitleRequest, 0x0018);
		}

		// struct FMultiplayerListServerBackfillTicketsForPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListServerBackfillTicketsForPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListServerBackfillTicketsForPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListServerBackfillTicketsForPlayerRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListServerBackfillTicketsForPlayerRequest, QueueName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListServerBackfillTicketsForPlayerRequest, 0x0028);
		}

		// struct FMultiplayerListTitleMultiplayerServersQuotaChangesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListTitleMultiplayerServersQuotaChangesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListTitleMultiplayerServersQuotaChangesRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListTitleMultiplayerServersQuotaChangesRequest, 0x0010);
		}

		// struct FMultiplayerListVirtualMachineSummariesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListVirtualMachineSummariesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, PageSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, UnknownData_P35G, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, Region, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, SkipToken, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListVirtualMachineSummariesRequest, 0x0048);
		}

		// struct FMultiplayerRequestMultiplayerServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerRequestMultiplayerServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, BuildAliasParams, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, BuildId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, InitialPlayers, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, PreferredRegions, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, SessionCookie, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, SessionId, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerRequestMultiplayerServerRequest, 0x0068);
		}

		// struct FMultiplayerRolloverContainerRegistryCredentialsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerRolloverContainerRegistryCredentialsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRolloverContainerRegistryCredentialsRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerRolloverContainerRegistryCredentialsRequest, 0x0010);
		}

		// struct FMultiplayerShutdownMultiplayerServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerShutdownMultiplayerServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerShutdownMultiplayerServerRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerShutdownMultiplayerServerRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerShutdownMultiplayerServerRequest, Region, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerShutdownMultiplayerServerRequest, SessionId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerShutdownMultiplayerServerRequest, 0x0040);
		}

		// struct FMultiplayerUntagContainerImageRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUntagContainerImageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUntagContainerImageRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUntagContainerImageRequest, ImageName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUntagContainerImageRequest, Tag, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUntagContainerImageRequest, 0x0030);
		}

		// struct FMultiplayerUpdateBuildAliasRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUpdateBuildAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildAliasRequest, AliasId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildAliasRequest, AliasName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildAliasRequest, BuildSelectionCriteria, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildAliasRequest, CustomTags, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUpdateBuildAliasRequest, 0x0040);
		}

		// struct FMultiplayerUpdateBuildNameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUpdateBuildNameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildNameRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildNameRequest, BuildName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildNameRequest, CustomTags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUpdateBuildNameRequest, 0x0030);
		}

		// struct FMultiplayerUpdateBuildRegionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUpdateBuildRegionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionRequest, BuildRegion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionRequest, CustomTags, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUpdateBuildRegionRequest, 0x0028);
		}

		// struct FMultiplayerUpdateBuildRegionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUpdateBuildRegionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionsRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionsRequest, BuildRegions, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionsRequest, CustomTags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUpdateBuildRegionsRequest, 0x0030);
		}

		// struct FMultiplayerUploadCertificateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUploadCertificateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUploadCertificateRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUploadCertificateRequest, GameCertificate, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUploadCertificateRequest, 0x0018);
		}

		// struct FProfilesGetGlobalPolicyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetGlobalPolicyResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetGlobalPolicyResponse, Permissions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetGlobalPolicyResponse, 0x0018);
		}

		// struct FProfilesGetEntityProfileResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetEntityProfileResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfileResponse, Profile, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetEntityProfileResponse, 0x0010);
		}

		// struct FProfilesGetEntityProfilesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetEntityProfilesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfilesResponse, Profiles, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetEntityProfilesResponse, 0x0018);
		}

		// struct FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse, TitleId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse, TitlePlayerAccounts, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse, 0x0020);
		}

		// struct FProfilesSetGlobalPolicyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetGlobalPolicyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetGlobalPolicyResponse, 0x0008);
		}

		// struct FProfilesSetProfileLanguageResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetProfileLanguageResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageResponse, OperationResult, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageResponse, UnknownData_8BPS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageResponse, VersionNumber, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetProfileLanguageResponse, 0x0010);
		}

		// struct FProfilesSetEntityProfilePolicyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetEntityProfilePolicyResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetEntityProfilePolicyResponse, Permissions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetEntityProfilePolicyResponse, 0x0018);
		}

		// struct FProfilesGetGlobalPolicyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetGlobalPolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetGlobalPolicyRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetGlobalPolicyRequest, 0x0010);
		}

		// struct FProfilesGetEntityProfileRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetEntityProfileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfileRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfileRequest, DataAsObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfileRequest, UnknownData_BAHV, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfileRequest, Entity, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetEntityProfileRequest, 0x0020);
		}

		// struct FProfilesGetEntityProfilesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetEntityProfilesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfilesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfilesRequest, DataAsObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfilesRequest, UnknownData_PGBR, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfilesRequest, Entities, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetEntityProfilesRequest, 0x0028);
		}

		// struct FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest, MasterPlayerAccountIds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest, 0x0020);
		}

		// struct FProfilesSetGlobalPolicyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetGlobalPolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetGlobalPolicyRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetGlobalPolicyRequest, Permissions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetGlobalPolicyRequest, 0x0020);
		}

		// struct FProfilesSetProfileLanguageRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetProfileLanguageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageRequest, ExpectedVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageRequest, UnknownData_3CK7, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageRequest, Language, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetProfileLanguageRequest, 0x0030);
		}

		// struct FProfilesSetEntityProfilePolicyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetEntityProfilePolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetEntityProfilePolicyRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetEntityProfilePolicyRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetEntityProfilePolicyRequest, Statements, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetEntityProfilePolicyRequest, 0x0028);
		}

		// struct FServerModifyCharacterVirtualCurrencyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerModifyCharacterVirtualCurrencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyCharacterVirtualCurrencyResult, Balance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyCharacterVirtualCurrencyResult, UnknownData_H44E, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyCharacterVirtualCurrencyResult, VirtualCurrency, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerModifyCharacterVirtualCurrencyResult, 0x0020);
		}

		// struct FServerAddCharacterVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddCharacterVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, UnknownData_S7J6, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, CharacterId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, VirtualCurrency, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddCharacterVirtualCurrencyRequest, 0x0048);
		}

		// struct FServerEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerEmptyResponse, 0x0008);
		}

		// struct FServerAddFriendRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddFriendRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddFriendRequest, FriendEmail, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddFriendRequest, FriendPlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddFriendRequest, FriendTitleDisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddFriendRequest, FriendUsername, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddFriendRequest, PlayFabId, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddFriendRequest, 0x0058);
		}

		// struct FServerEmptyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerEmptyResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerEmptyResult, 0x0008);
		}

		// struct FServerAddGenericIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddGenericIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddGenericIDRequest, GenericId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddGenericIDRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddGenericIDRequest, 0x0020);
		}

		// struct FServerAddPlayerTagResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddPlayerTagResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddPlayerTagResult, 0x0008);
		}

		// struct FServerAddPlayerTagRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddPlayerTagRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddPlayerTagRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddPlayerTagRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddPlayerTagRequest, TagName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddPlayerTagRequest, 0x0030);
		}

		// struct FServerAddSharedGroupMembersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddSharedGroupMembersResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddSharedGroupMembersResult, 0x0008);
		}

		// struct FServerAddSharedGroupMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddSharedGroupMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddSharedGroupMembersRequest, PlayFabIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddSharedGroupMembersRequest, SharedGroupId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddSharedGroupMembersRequest, 0x0028);
		}

		// struct FServerModifyUserVirtualCurrencyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerModifyUserVirtualCurrencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyUserVirtualCurrencyResult, Balance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyUserVirtualCurrencyResult, BalanceChange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyUserVirtualCurrencyResult, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyUserVirtualCurrencyResult, VirtualCurrency, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerModifyUserVirtualCurrencyResult, 0x0030);
		}

		// struct FServerAddUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddUserVirtualCurrencyRequest, UnknownData_TNOG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddUserVirtualCurrencyRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddUserVirtualCurrencyRequest, VirtualCurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddUserVirtualCurrencyRequest, 0x0038);
		}

		// struct FServerAuthenticateSessionTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAuthenticateSessionTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAuthenticateSessionTicketResult, IsSessionTicketExpired, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAuthenticateSessionTicketResult, UnknownData_O06T, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAuthenticateSessionTicketResult, UserInfo, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAuthenticateSessionTicketResult, 0x0018);
		}

		// struct FServerAuthenticateSessionTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAuthenticateSessionTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAuthenticateSessionTicketRequest, SessionTicket, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAuthenticateSessionTicketRequest, 0x0018);
		}

		// struct FServerAwardSteamAchievementResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAwardSteamAchievementResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAwardSteamAchievementResult, AchievementResults, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAwardSteamAchievementResult, 0x0018);
		}

		// struct FServerAwardSteamAchievementRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAwardSteamAchievementRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAwardSteamAchievementRequest, Achievements, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAwardSteamAchievementRequest, 0x0018);
		}

		// struct FServerBanUsersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerBanUsersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerBanUsersResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerBanUsersResult, 0x0018);
		}

		// struct FServerBanUsersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerBanUsersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerBanUsersRequest, Bans, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerBanUsersRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerBanUsersRequest, 0x0020);
		}

		// struct FServerConsumeItemResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerConsumeItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemResult, ItemInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemResult, RemainingUses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemResult, UnknownData_FLPT, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerConsumeItemResult, 0x0020);
		}

		// struct FServerConsumeItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerConsumeItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, ConsumeCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, UnknownData_M0YG, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, ItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, PlayFabId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerConsumeItemRequest, 0x0048);
		}

		// struct FServerCreateSharedGroupResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerCreateSharedGroupResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCreateSharedGroupResult, SharedGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerCreateSharedGroupResult, 0x0018);
		}

		// struct FServerCreateSharedGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerCreateSharedGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCreateSharedGroupRequest, SharedGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerCreateSharedGroupRequest, 0x0018);
		}

		// struct FServerDeleteCharacterFromUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeleteCharacterFromUserResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeleteCharacterFromUserResult, 0x0008);
		}

		// struct FServerDeletePlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeletePlayerResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeletePlayerResult, 0x0008);
		}

		// struct FServerDeletePushNotificationTemplateResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeletePushNotificationTemplateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeletePushNotificationTemplateResult, 0x0008);
		}

		// struct FServerDeregisterGameResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeregisterGameResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeregisterGameResponse, 0x0008);
		}

		// struct FServerEvaluateRandomResultTableResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerEvaluateRandomResultTableResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerEvaluateRandomResultTableResult, ResultItemId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerEvaluateRandomResultTableResult, 0x0018);
		}

		// struct FServerExecuteCloudScriptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerExecuteCloudScriptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, APIRequestsIssued, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, UnknownData_3HI4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, Error, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, ExecutionTimeSeconds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, UnknownData_RZE2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, FunctionName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, FunctionResult, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, FunctionResultTooLarge, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, UnknownData_AZEI, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, HttpRequestsIssued, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, Logs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, LogsTooLarge, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, UnknownData_13LY, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, MemoryConsumedBytes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, ProcessorTimeSeconds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, Revision, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerExecuteCloudScriptResult, 0x0060);
		}

		// struct FServerGetAllSegmentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetAllSegmentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetAllSegmentsResult, Segments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetAllSegmentsResult, 0x0018);
		}

		// struct FServerListUsersCharactersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerListUsersCharactersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerListUsersCharactersResult, Characters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerListUsersCharactersResult, 0x0018);
		}

		// struct FServerGetCatalogItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCatalogItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCatalogItemsResult, Catalog, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCatalogItemsResult, 0x0018);
		}

		// struct FServerGetCharacterDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataResult, Data, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataResult, DataVersion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataResult, UnknownData_YC0U, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataResult, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterDataResult, 0x0038);
		}

		// struct FServerGetCharacterInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryResult, Inventory, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryResult, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryResult, VirtualCurrency, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryResult, VirtualCurrencyRechargeTimes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterInventoryResult, 0x0048);
		}

		// struct FServerGetCharacterLeaderboardResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterLeaderboardResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterLeaderboardResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterLeaderboardResult, 0x0018);
		}

		// struct FServerGetCharacterStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterStatisticsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterStatisticsResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterStatisticsResult, CharacterStatistics, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterStatisticsResult, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterStatisticsResult, 0x0030);
		}

		// struct FServerGetContentDownloadUrlResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetContentDownloadUrlResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetContentDownloadUrlResult, URL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetContentDownloadUrlResult, 0x0018);
		}

		// struct FServerGetLeaderboardResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardResult, Leaderboard, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardResult, NextReset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardResult, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardResult, UnknownData_HNQL, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardResult, 0x0030);
		}

		// struct FServerGetFriendsListResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetFriendsListResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListResult, Friends, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetFriendsListResult, 0x0018);
		}

		// struct FServerGetLeaderboardAroundCharacterResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardAroundCharacterResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardAroundCharacterResult, 0x0018);
		}

		// struct FServerGetLeaderboardAroundUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardAroundUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserResult, Leaderboard, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserResult, NextReset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserResult, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserResult, UnknownData_KA6T, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardAroundUserResult, 0x0030);
		}

		// struct FServerGetLeaderboardForUsersCharactersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardForUsersCharactersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardForUsersCharactersResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardForUsersCharactersResult, 0x0018);
		}

		// struct FServerGetPlayerCombinedInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerCombinedInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerCombinedInfoResult, InfoResultPayload, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerCombinedInfoResult, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerCombinedInfoResult, 0x0020);
		}

		// struct FServerGetPlayerProfileResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerProfileResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerProfileResult, PlayerProfile, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerProfileResult, 0x0010);
		}

		// struct FServerGetPlayerSegmentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerSegmentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerSegmentsResult, Segments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerSegmentsResult, 0x0018);
		}

		// struct FServerGetPlayersInSegmentResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayersInSegmentResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentResult, ContinuationToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentResult, PlayerProfiles, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentResult, ProfilesInSegment, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentResult, UnknownData_3C7I, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayersInSegmentResult, 0x0030);
		}

		// struct FServerGetPlayerStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerStatisticsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsResult, PlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsResult, Statistics, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerStatisticsResult, 0x0028);
		}

		// struct FServerGetPlayerStatisticVersionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerStatisticVersionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticVersionsResult, StatisticVersions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerStatisticVersionsResult, 0x0018);
		}

		// struct FServerGetPlayerTagsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerTagsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerTagsResult, PlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerTagsResult, Tags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerTagsResult, 0x0028);
		}

		// struct FServerGetPlayFabIDsFromFacebookIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromFacebookIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromFacebookIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromFacebookIDsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromFacebookInstantGamesIdsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromGenericIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromGenericIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromGenericIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromGenericIDsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromPSNAccountIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromPSNAccountIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromPSNAccountIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromPSNAccountIDsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromSteamIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromSteamIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromSteamIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromSteamIDsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromXboxLiveIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromXboxLiveIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromXboxLiveIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromXboxLiveIDsResult, 0x0018);
		}

		// struct FServerGetPublisherDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPublisherDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPublisherDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPublisherDataResult, 0x0010);
		}

		// struct FServerGetRandomResultTablesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetRandomResultTablesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetRandomResultTablesResult, Tables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetRandomResultTablesResult, 0x0010);
		}

		// struct FServerGetServerCustomIDsFromPlayFabIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetServerCustomIDsFromPlayFabIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetServerCustomIDsFromPlayFabIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetServerCustomIDsFromPlayFabIDsResult, 0x0018);
		}

		// struct FServerGetSharedGroupDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetSharedGroupDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataResult, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataResult, Members, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetSharedGroupDataResult, 0x0020);
		}

		// struct FServerGetStoreItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetStoreItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, MarketingData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, Source, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, UnknownData_QIK3, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, Store, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, StoreId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetStoreItemsResult, 0x0048);
		}

		// struct FServerGetTimeResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTimeResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTimeResult, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTimeResult, 0x0018);
		}

		// struct FServerGetTitleDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTitleDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTitleDataResult, 0x0010);
		}

		// struct FServerGetTitleNewsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTitleNewsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleNewsResult, News, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTitleNewsResult, 0x0018);
		}

		// struct FServerGetUserAccountInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserAccountInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserAccountInfoResult, UserInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserAccountInfoResult, 0x0010);
		}

		// struct FServerGetUserBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserBansResult, 0x0018);
		}

		// struct FServerGetUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataResult, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataResult, DataVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataResult, UnknownData_KE6D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataResult, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserDataResult, 0x0028);
		}

		// struct FServerGetUserInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryResult, Inventory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryResult, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryResult, VirtualCurrency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryResult, VirtualCurrencyRechargeTimes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserInventoryResult, 0x0038);
		}

		// struct FServerGrantCharacterToUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantCharacterToUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantCharacterToUserResult, CharacterId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantCharacterToUserResult, 0x0018);
		}

		// struct FServerGrantItemsToCharacterResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToCharacterResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterResult, ItemGrantResults, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToCharacterResult, 0x0018);
		}

		// struct FServerGrantItemsToUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserResult, ItemGrantResults, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToUserResult, 0x0018);
		}

		// struct FServerGrantItemsToUsersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToUsersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUsersResult, ItemGrantResults, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToUsersResult, 0x0018);
		}

		// struct FServerLinkPSNAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkPSNAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkPSNAccountResult, 0x0008);
		}

		// struct FServerLinkServerCustomIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkServerCustomIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkServerCustomIdResult, 0x0008);
		}

		// struct FServerLinkXboxAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkXboxAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkXboxAccountResult, 0x0008);
		}

		// struct FServerServerLoginResult : public FPlayFabLoginResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerServerLoginResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, EntityToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, InfoResultPayload, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, LastLoginTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, NewlyCreated, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, UnknownData_WPBT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, PlayFabId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, SessionTicket, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, SettingsForUser, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, TreatmentAssignment, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerServerLoginResult, 0x0068);
		}

		// struct FServerModifyItemUsesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerModifyItemUsesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesResult, ItemInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesResult, RemainingUses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesResult, UnknownData_VC12, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerModifyItemUsesResult, 0x0020);
		}

		// struct FServerMoveItemToCharacterFromCharacterResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToCharacterFromCharacterResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToCharacterFromCharacterResult, 0x0008);
		}

		// struct FServerMoveItemToCharacterFromUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToCharacterFromUserResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToCharacterFromUserResult, 0x0008);
		}

		// struct FServerMoveItemToUserFromCharacterResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToUserFromCharacterResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToUserFromCharacterResult, 0x0008);
		}

		// struct FServerNotifyMatchmakerPlayerLeftResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerNotifyMatchmakerPlayerLeftResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerNotifyMatchmakerPlayerLeftResult, PlayerState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerNotifyMatchmakerPlayerLeftResult, UnknownData_T7MV, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerNotifyMatchmakerPlayerLeftResult, 0x0010);
		}

		// struct FServerRedeemCouponResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRedeemCouponResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponResult, GrantedItems, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRedeemCouponResult, 0x0018);
		}

		// struct FServerRedeemMatchmakerTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRedeemMatchmakerTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketResult, Error, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketResult, TicketIsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketResult, UnknownData_V2P0, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketResult, UserInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRedeemMatchmakerTicketResult, 0x0028);
		}

		// struct FServerRefreshGameServerInstanceHeartbeatResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRefreshGameServerInstanceHeartbeatResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRefreshGameServerInstanceHeartbeatResult, 0x0008);
		}

		// struct FServerRegisterGameResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRegisterGameResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameResponse, LobbyId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRegisterGameResponse, 0x0018);
		}

		// struct FServerRemovePlayerTagResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemovePlayerTagResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemovePlayerTagResult, 0x0008);
		}

		// struct FServerRemoveSharedGroupMembersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemoveSharedGroupMembersResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemoveSharedGroupMembersResult, 0x0008);
		}

		// struct FServerReportPlayerServerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerReportPlayerServerResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerResult, SubmissionsRemaining, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerResult, UnknownData_UQSA, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerReportPlayerServerResult, 0x0010);
		}

		// struct FServerRevokeAllBansForUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeAllBansForUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeAllBansForUserResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeAllBansForUserResult, 0x0018);
		}

		// struct FServerRevokeBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeBansResult, 0x0018);
		}

		// struct FServerRevokeInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeInventoryResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeInventoryResult, 0x0008);
		}

		// struct FServerRevokeInventoryItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeInventoryItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeInventoryItemsResult, Errors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeInventoryItemsResult, 0x0018);
		}

		// struct FServerSavePushNotificationTemplateResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSavePushNotificationTemplateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateResult, PushNotificationTemplateId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSavePushNotificationTemplateResult, 0x0018);
		}

		// struct FServerSendCustomAccountRecoveryEmailResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendCustomAccountRecoveryEmailResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendCustomAccountRecoveryEmailResult, 0x0008);
		}

		// struct FServerSendEmailFromTemplateResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendEmailFromTemplateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendEmailFromTemplateResult, 0x0008);
		}

		// struct FServerSendPushNotificationResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendPushNotificationResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendPushNotificationResult, 0x0008);
		}

		// struct FServerSetGameServerInstanceDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceDataResult, 0x0008);
		}

		// struct FServerSetGameServerInstanceStateResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceStateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceStateResult, 0x0008);
		}

		// struct FServerSetGameServerInstanceTagsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceTagsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceTagsResult, 0x0008);
		}

		// struct FServerSetPlayerSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetPlayerSecretResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetPlayerSecretResult, 0x0008);
		}

		// struct FServerSetPublisherDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetPublisherDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetPublisherDataResult, 0x0008);
		}

		// struct FServerSetTitleDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetTitleDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetTitleDataResult, 0x0008);
		}

		// struct FServerUnlinkPSNAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkPSNAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkPSNAccountResult, 0x0008);
		}

		// struct FServerUnlinkServerCustomIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkServerCustomIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkServerCustomIdResult, 0x0008);
		}

		// struct FServerUnlinkXboxAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkXboxAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkXboxAccountResult, 0x0008);
		}

		// struct FServerUnlockContainerItemResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlockContainerItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemResult, GrantedItems, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemResult, UnlockedItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemResult, UnlockedWithItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemResult, VirtualCurrency, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlockContainerItemResult, 0x0040);
		}

		// struct FServerUpdateBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateBansResult, 0x0018);
		}

		// struct FServerUpdateCharacterDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateCharacterDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataResult, DataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataResult, UnknownData_5NCM, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateCharacterDataResult, 0x0010);
		}

		// struct FServerUpdateCharacterStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateCharacterStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateCharacterStatisticsResult, 0x0008);
		}

		// struct FServerUpdatePlayerStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdatePlayerStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdatePlayerStatisticsResult, 0x0008);
		}

		// struct FServerUpdateSharedGroupDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateSharedGroupDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateSharedGroupDataResult, 0x0008);
		}

		// struct FServerUpdateUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataResult, DataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataResult, UnknownData_79O4, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateUserDataResult, 0x0010);
		}

		// struct FServerWriteEventResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerWriteEventResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteEventResponse, EventId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerWriteEventResponse, 0x0018);
		}

		// struct FServerDeleteCharacterFromUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeleteCharacterFromUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteCharacterFromUserRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteCharacterFromUserRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteCharacterFromUserRequest, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteCharacterFromUserRequest, SaveCharacterInventory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteCharacterFromUserRequest, UnknownData_H972, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeleteCharacterFromUserRequest, 0x0038);
		}

		// struct FServerDeletePlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeletePlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeletePlayerRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeletePlayerRequest, 0x0018);
		}

		// struct FServerDeletePushNotificationTemplateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeletePushNotificationTemplateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeletePushNotificationTemplateRequest, PushNotificationTemplateId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeletePushNotificationTemplateRequest, 0x0018);
		}

		// struct FServerDeleteSharedGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeleteSharedGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteSharedGroupRequest, SharedGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeleteSharedGroupRequest, 0x0018);
		}

		// struct FServerDeregisterGameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeregisterGameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeregisterGameRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeregisterGameRequest, LobbyId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeregisterGameRequest, 0x0020);
		}

		// struct FServerEvaluateRandomResultTableRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerEvaluateRandomResultTableRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerEvaluateRandomResultTableRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerEvaluateRandomResultTableRequest, TableId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerEvaluateRandomResultTableRequest, 0x0028);
		}

		// struct FServerExecuteCloudScriptServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerExecuteCloudScriptServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, FunctionName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, FunctionParameter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, GeneratePlayStreamEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, UnknownData_KQ2I, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, PlayFabId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, RevisionSelection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, UnknownData_05O9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, SpecificRevision, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerExecuteCloudScriptServerRequest, 0x0048);
		}

		// struct FServerGetAllSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetAllSegmentsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetAllSegmentsRequest, 0x0008);
		}

		// struct FServerListUsersCharactersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerListUsersCharactersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerListUsersCharactersRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerListUsersCharactersRequest, 0x0018);
		}

		// struct FServerGetCatalogItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCatalogItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCatalogItemsRequest, CatalogVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCatalogItemsRequest, 0x0018);
		}

		// struct FServerGetCharacterDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataRequest, IfChangedFromDataVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataRequest, UnknownData_LY3G, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataRequest, Keys, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterDataRequest, 0x0040);
		}

		// struct FServerGetCharacterInventoryRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterInventoryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterInventoryRequest, 0x0040);
		}

		// struct FServerGetCharacterLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterLeaderboardRequest, CharacterType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterLeaderboardRequest, MaxResultsCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterLeaderboardRequest, StartPosition, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterLeaderboardRequest, StatisticName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterLeaderboardRequest, 0x0030);
		}

		// struct FServerGetCharacterStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterStatisticsRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterStatisticsRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterStatisticsRequest, 0x0028);
		}

		// struct FServerGetContentDownloadUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetContentDownloadUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetContentDownloadUrlRequest, HttpMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetContentDownloadUrlRequest, Key, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetContentDownloadUrlRequest, ThruCDN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetContentDownloadUrlRequest, UnknownData_3XFI, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetContentDownloadUrlRequest, 0x0030);
		}

		// struct FServerGetFriendLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetFriendLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, IncludeFacebookFriends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, IncludeSteamFriends, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, UnknownData_ZXRG, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, MaxResultsCount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, ProfileConstraints, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, StartPosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, UnknownData_FA2N, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, StatisticName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, UseSpecificVersion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, UnknownData_A9U2, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, Version, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, XboxToken, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetFriendLeaderboardRequest, 0x0060);
		}

		// struct FServerGetFriendsListRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetFriendsListRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, IncludeFacebookFriends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, IncludeSteamFriends, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, UnknownData_CXCC, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, ProfileConstraints, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, XboxToken, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetFriendsListRequest, 0x0040);
		}

		// struct FServerGetLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, MaxResultsCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, UnknownData_ZB97, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, ProfileConstraints, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, StartPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, UnknownData_TYP0, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, StatisticName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, UseSpecificVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, UnknownData_IM6C, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, Version, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardRequest, 0x0040);
		}

		// struct FServerGetLeaderboardAroundCharacterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardAroundCharacterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, CharacterType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, MaxResultsCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, UnknownData_VRRG, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, PlayFabId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, StatisticName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardAroundCharacterRequest, 0x0050);
		}

		// struct FServerGetLeaderboardAroundUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardAroundUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, MaxResultsCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, UnknownData_7DUR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, ProfileConstraints, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, StatisticName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, UseSpecificVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, UnknownData_A3CJ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, Version, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardAroundUserRequest, 0x0048);
		}

		// struct FServerGetLeaderboardForUsersCharactersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardForUsersCharactersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardForUsersCharactersRequest, MaxResultsCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardForUsersCharactersRequest, UnknownData_UTC3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardForUsersCharactersRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardForUsersCharactersRequest, StatisticName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardForUsersCharactersRequest, 0x0030);
		}

		// struct FServerGetPlayerCombinedInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerCombinedInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerCombinedInfoRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerCombinedInfoRequest, InfoRequestParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerCombinedInfoRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerCombinedInfoRequest, 0x0028);
		}

		// struct FServerGetPlayerProfileRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerProfileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerProfileRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerProfileRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerProfileRequest, ProfileConstraints, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerProfileRequest, 0x0028);
		}

		// struct FServerGetPlayersSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayersSegmentsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersSegmentsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersSegmentsRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayersSegmentsRequest, 0x0020);
		}

		// struct FServerGetPlayersInSegmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayersInSegmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentRequest, ContinuationToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentRequest, MaxBatchSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentRequest, SecondsToLive, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentRequest, SegmentId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayersInSegmentRequest, 0x0038);
		}

		// struct FServerGetPlayerStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsRequest, StatisticNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsRequest, StatisticNameVersions, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerStatisticsRequest, 0x0040);
		}

		// struct FServerGetPlayerStatisticVersionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerStatisticVersionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticVersionsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticVersionsRequest, StatisticName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerStatisticVersionsRequest, 0x0020);
		}

		// struct FServerGetPlayerTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerTagsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerTagsRequest, Namespace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerTagsRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerTagsRequest, 0x0030);
		}

		// struct FServerGetPlayFabIDsFromFacebookIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromFacebookIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromFacebookIDsRequest, FacebookIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromFacebookIDsRequest, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest, FacebookInstantGamesIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromGenericIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromGenericIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromGenericIDsRequest, GenericIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromGenericIDsRequest, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest, NintendoSwitchDeviceIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromPSNAccountIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromPSNAccountIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromPSNAccountIDsRequest, IssuerId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromPSNAccountIDsRequest, UnknownData_P48P, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromPSNAccountIDsRequest, PSNAccountIDs, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromPSNAccountIDsRequest, 0x0020);
		}

		// struct FServerGetPlayFabIDsFromSteamIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromSteamIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromSteamIDsRequest, SteamStringIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromSteamIDsRequest, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromXboxLiveIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromXboxLiveIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromXboxLiveIDsRequest, Sandbox, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromXboxLiveIDsRequest, XboxLiveAccountIDs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromXboxLiveIDsRequest, 0x0028);
		}

		// struct FServerGetPublisherDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPublisherDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPublisherDataRequest, Keys, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPublisherDataRequest, 0x0018);
		}

		// struct FServerGetRandomResultTablesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetRandomResultTablesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetRandomResultTablesRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetRandomResultTablesRequest, TableIDs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetRandomResultTablesRequest, 0x0028);
		}

		// struct FServerGetServerCustomIDsFromPlayFabIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetServerCustomIDsFromPlayFabIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetServerCustomIDsFromPlayFabIDsRequest, PlayFabIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetServerCustomIDsFromPlayFabIDsRequest, 0x0018);
		}

		// struct FServerGetSharedGroupDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetSharedGroupDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataRequest, GetMembers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataRequest, UnknownData_HAWX, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataRequest, Keys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataRequest, SharedGroupId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetSharedGroupDataRequest, 0x0030);
		}

		// struct FServerGetStoreItemsServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetStoreItemsServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsServerRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsServerRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsServerRequest, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsServerRequest, StoreId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetStoreItemsServerRequest, 0x0040);
		}

		// struct FServerGetTimeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTimeRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTimeRequest, 0x0008);
		}

		// struct FServerGetTitleDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTitleDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleDataRequest, Keys, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleDataRequest, OverrideLabel, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTitleDataRequest, 0x0028);
		}

		// struct FServerGetTitleNewsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTitleNewsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleNewsRequest, Count, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleNewsRequest, UnknownData_XUXU, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTitleNewsRequest, 0x0010);
		}

		// struct FServerGetUserAccountInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserAccountInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserAccountInfoRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserAccountInfoRequest, 0x0018);
		}

		// struct FServerGetUserBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserBansRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserBansRequest, 0x0018);
		}

		// struct FServerGetUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataRequest, IfChangedFromDataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataRequest, UnknownData_67D2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataRequest, Keys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserDataRequest, 0x0030);
		}

		// struct FServerGetUserInventoryRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserInventoryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserInventoryRequest, 0x0020);
		}

		// struct FServerGrantCharacterToUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantCharacterToUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantCharacterToUserRequest, CharacterName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantCharacterToUserRequest, CharacterType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantCharacterToUserRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantCharacterToUserRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantCharacterToUserRequest, 0x0040);
		}

		// struct FServerGrantItemsToCharacterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToCharacterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, Annotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, CatalogVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, CharacterId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, ItemIds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, PlayFabId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToCharacterRequest, 0x0060);
		}

		// struct FServerGrantItemsToUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserRequest, Annotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserRequest, CatalogVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserRequest, ItemIds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserRequest, PlayFabId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToUserRequest, 0x0050);
		}

		// struct FServerGrantItemsToUsersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToUsersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUsersRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUsersRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUsersRequest, ItemGrants, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToUsersRequest, 0x0030);
		}

		// struct FServerLinkPSNAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkPSNAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, AuthCode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, UnknownData_9ZM9, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, IssuerId, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, RedirectUri, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkPSNAccountRequest, 0x0048);
		}

		// struct FServerLinkServerCustomIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkServerCustomIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkServerCustomIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkServerCustomIdRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkServerCustomIdRequest, UnknownData_NR4V, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkServerCustomIdRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkServerCustomIdRequest, ServerCustomId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkServerCustomIdRequest, 0x0038);
		}

		// struct FServerLinkXboxAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkXboxAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkXboxAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkXboxAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkXboxAccountRequest, UnknownData_43SM, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkXboxAccountRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkXboxAccountRequest, XboxToken, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkXboxAccountRequest, 0x0038);
		}

		// struct FServerLoginWithServerCustomIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLoginWithServerCustomIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, UnknownData_PAUC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, InfoRequestParameters, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, PlayerSecret, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, ServerCustomId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLoginWithServerCustomIdRequest, 0x0040);
		}

		// struct FServerLoginWithSteamIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLoginWithSteamIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithSteamIdRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithSteamIdRequest, UnknownData_ZJG3, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithSteamIdRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithSteamIdRequest, InfoRequestParameters, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithSteamIdRequest, SteamId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLoginWithSteamIdRequest, 0x0030);
		}

		// struct FServerLoginWithXboxRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLoginWithXboxRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxRequest, UnknownData_89LW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxRequest, InfoRequestParameters, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxRequest, XboxToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLoginWithXboxRequest, 0x0030);
		}

		// struct FServerLoginWithXboxIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLoginWithXboxIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, UnknownData_HX8K, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, InfoRequestParameters, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, Sandbox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, XboxId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLoginWithXboxIdRequest, 0x0040);
		}

		// struct FServerModifyItemUsesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerModifyItemUsesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesRequest, ItemInstanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesRequest, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesRequest, UsesToAdd, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesRequest, UnknownData_6GYY, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerModifyItemUsesRequest, 0x0038);
		}

		// struct FServerMoveItemToCharacterFromCharacterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToCharacterFromCharacterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromCharacterRequest, GivingCharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromCharacterRequest, ItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromCharacterRequest, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromCharacterRequest, ReceivingCharacterId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToCharacterFromCharacterRequest, 0x0048);
		}

		// struct FServerMoveItemToCharacterFromUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToCharacterFromUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromUserRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromUserRequest, ItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromUserRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToCharacterFromUserRequest, 0x0038);
		}

		// struct FServerMoveItemToUserFromCharacterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToUserFromCharacterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToUserFromCharacterRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToUserFromCharacterRequest, ItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToUserFromCharacterRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToUserFromCharacterRequest, 0x0038);
		}

		// struct FServerNotifyMatchmakerPlayerLeftRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerNotifyMatchmakerPlayerLeftRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerNotifyMatchmakerPlayerLeftRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerNotifyMatchmakerPlayerLeftRequest, LobbyId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerNotifyMatchmakerPlayerLeftRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerNotifyMatchmakerPlayerLeftRequest, 0x0030);
		}

		// struct FServerRedeemCouponRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRedeemCouponRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponRequest, CouponCode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponRequest, PlayFabId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRedeemCouponRequest, 0x0050);
		}

		// struct FServerRedeemMatchmakerTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRedeemMatchmakerTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketRequest, LobbyId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketRequest, Ticket, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRedeemMatchmakerTicketRequest, 0x0030);
		}

		// struct FServerRefreshGameServerInstanceHeartbeatRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRefreshGameServerInstanceHeartbeatRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRefreshGameServerInstanceHeartbeatRequest, LobbyId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRefreshGameServerInstanceHeartbeatRequest, 0x0018);
		}

		// struct FServerRegisterGameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRegisterGameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, Build, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, GameMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, LobbyId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, Region, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, UnknownData_BJRA, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, ServerIPV4Address, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, ServerIPV6Address, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, ServerPort, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, ServerPublicDNSName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, Tags, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRegisterGameRequest, 0x0090);
		}

		// struct FServerRemoveFriendRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemoveFriendRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveFriendRequest, FriendPlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveFriendRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemoveFriendRequest, 0x0028);
		}

		// struct FServerRemoveGenericIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemoveGenericIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveGenericIDRequest, GenericId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveGenericIDRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemoveGenericIDRequest, 0x0020);
		}

		// struct FServerRemovePlayerTagRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemovePlayerTagRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemovePlayerTagRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemovePlayerTagRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemovePlayerTagRequest, TagName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemovePlayerTagRequest, 0x0030);
		}

		// struct FServerRemoveSharedGroupMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemoveSharedGroupMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveSharedGroupMembersRequest, PlayFabIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveSharedGroupMembersRequest, SharedGroupId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemoveSharedGroupMembersRequest, 0x0028);
		}

		// struct FServerReportPlayerServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerReportPlayerServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerRequest, Comment, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerRequest, ReporteeId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerRequest, ReporterId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerReportPlayerServerRequest, 0x0040);
		}

		// struct FServerRevokeAllBansForUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeAllBansForUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeAllBansForUserRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeAllBansForUserRequest, 0x0018);
		}

		// struct FServerRevokeBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeBansRequest, BanIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeBansRequest, 0x0018);
		}

		// struct FServerRevokeInventoryItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeInventoryItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeInventoryItemRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeInventoryItemRequest, ItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeInventoryItemRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeInventoryItemRequest, 0x0038);
		}

		// struct FServerRevokeInventoryItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeInventoryItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeInventoryItemsRequest, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeInventoryItemsRequest, 0x0018);
		}

		// struct FServerSavePushNotificationTemplateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSavePushNotificationTemplateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateRequest, AndroidPayload, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateRequest, ID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateRequest, IOSPayload, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateRequest, LocalizedPushNotificationTemplates, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateRequest, Name, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSavePushNotificationTemplateRequest, 0x0050);
		}

		// struct FServerSendCustomAccountRecoveryEmailRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendCustomAccountRecoveryEmailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendCustomAccountRecoveryEmailRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendCustomAccountRecoveryEmailRequest, Email, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendCustomAccountRecoveryEmailRequest, EmailTemplateId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendCustomAccountRecoveryEmailRequest, Username, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendCustomAccountRecoveryEmailRequest, 0x0040);
		}

		// struct FServerSendEmailFromTemplateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendEmailFromTemplateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendEmailFromTemplateRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendEmailFromTemplateRequest, EmailTemplateId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendEmailFromTemplateRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendEmailFromTemplateRequest, 0x0030);
		}

		// struct FServerSendPushNotificationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendPushNotificationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, AdvancedPlatformDelivery, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, Message, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, Package, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, Recipient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, Subject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, TargetPlatforms, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendPushNotificationRequest, 0x0068);
		}

		// struct FServerSendPushNotificationFromTemplateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendPushNotificationFromTemplateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationFromTemplateRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationFromTemplateRequest, PushNotificationTemplateId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationFromTemplateRequest, Recipient, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendPushNotificationFromTemplateRequest, 0x0030);
		}

		// struct FServerSetFriendTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetFriendTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetFriendTagsRequest, FriendPlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetFriendTagsRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetFriendTagsRequest, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetFriendTagsRequest, 0x0038);
		}

		// struct FServerSetGameServerInstanceDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceDataRequest, GameServerData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceDataRequest, LobbyId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceDataRequest, 0x0028);
		}

		// struct FServerSetGameServerInstanceStateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceStateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceStateRequest, LobbyId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceStateRequest, State, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceStateRequest, UnknownData_N1B0, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceStateRequest, 0x0020);
		}

		// struct FServerSetGameServerInstanceTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceTagsRequest, LobbyId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceTagsRequest, Tags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceTagsRequest, 0x0020);
		}

		// struct FServerSetPlayerSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetPlayerSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetPlayerSecretRequest, PlayerSecret, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetPlayerSecretRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetPlayerSecretRequest, 0x0028);
		}

		// struct FServerSetPublisherDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetPublisherDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetPublisherDataRequest, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetPublisherDataRequest, Value, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetPublisherDataRequest, 0x0028);
		}

		// struct FServerSetTitleDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetTitleDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetTitleDataRequest, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetTitleDataRequest, Value, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetTitleDataRequest, 0x0028);
		}

		// struct FServerSubtractCharacterVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSubtractCharacterVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, UnknownData_KE04, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, CharacterId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, VirtualCurrency, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSubtractCharacterVirtualCurrencyRequest, 0x0048);
		}

		// struct FServerSubtractUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSubtractUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractUserVirtualCurrencyRequest, UnknownData_DICL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractUserVirtualCurrencyRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractUserVirtualCurrencyRequest, VirtualCurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSubtractUserVirtualCurrencyRequest, 0x0038);
		}

		// struct FServerUnlinkPSNAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkPSNAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkPSNAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkPSNAccountRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkPSNAccountRequest, 0x0020);
		}

		// struct FServerUnlinkServerCustomIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkServerCustomIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkServerCustomIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkServerCustomIdRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkServerCustomIdRequest, ServerCustomId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkServerCustomIdRequest, 0x0030);
		}

		// struct FServerUnlinkXboxAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkXboxAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkXboxAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkXboxAccountRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkXboxAccountRequest, 0x0020);
		}

		// struct FServerUnlockContainerInstanceRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlockContainerInstanceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, ContainerItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, KeyItemInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, PlayFabId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlockContainerInstanceRequest, 0x0060);
		}

		// struct FServerUnlockContainerItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlockContainerItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemRequest, ContainerItemId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemRequest, PlayFabId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlockContainerItemRequest, 0x0050);
		}

		// struct FServerUpdateAvatarUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateAvatarUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateAvatarUrlRequest, ImageUrl, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateAvatarUrlRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateAvatarUrlRequest, 0x0028);
		}

		// struct FServerUpdateBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateBansRequest, Bans, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateBansRequest, 0x0018);
		}

		// struct FServerUpdateCharacterDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateCharacterDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, Data, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, KeysToRemove, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, Permission, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, UnknownData_FNC3, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, PlayFabId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateCharacterDataRequest, 0x0050);
		}

		// struct FServerUpdateCharacterStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateCharacterStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterStatisticsRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterStatisticsRequest, CharacterStatistics, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterStatisticsRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterStatisticsRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateCharacterStatisticsRequest, 0x0038);
		}

		// struct FServerUpdatePlayerStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdatePlayerStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdatePlayerStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdatePlayerStatisticsRequest, ForceUpdate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdatePlayerStatisticsRequest, UnknownData_YLJK, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdatePlayerStatisticsRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdatePlayerStatisticsRequest, Statistics, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdatePlayerStatisticsRequest, 0x0038);
		}

		// struct FServerUpdateSharedGroupDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateSharedGroupDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, Permission, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, UnknownData_DTD4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, SharedGroupId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateSharedGroupDataRequest, 0x0040);
		}

		// struct FServerUpdateUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, Permission, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, UnknownData_7OC6, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateUserDataRequest, 0x0040);
		}

		// struct FServerUpdateUserInternalDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateUserInternalDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInternalDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInternalDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInternalDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInternalDataRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateUserInternalDataRequest, 0x0038);
		}

		// struct FServerUpdateUserInventoryItemDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateUserInventoryItemDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, Data, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, ItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, KeysToRemove, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, PlayFabId, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateUserInventoryItemDataRequest, 0x0058);
		}

		// struct FServerWriteServerCharacterEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerWriteServerCharacterEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, CharacterId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, EventName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, PlayFabId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, Timestamp, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerWriteServerCharacterEventRequest, 0x0058);
		}

		// struct FServerWriteServerPlayerEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerWriteServerPlayerEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerPlayerEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerPlayerEventRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerPlayerEventRequest, EventName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerPlayerEventRequest, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerPlayerEventRequest, Timestamp, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerWriteServerPlayerEventRequest, 0x0048);
		}

		// struct FServerWriteTitleEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerWriteTitleEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteTitleEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteTitleEventRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteTitleEventRequest, EventName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteTitleEventRequest, Timestamp, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerWriteTitleEventRequest, 0x0038);
		}

		// struct FPaperFlipbookKeyFrame
		TEST_METHOD(ScriptStruct__Paper2D__PaperFlipbookKeyFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, Sprite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, FrameRun, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, UnknownData_DOKS, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperFlipbookKeyFrame, 0x0010);
		}

		// struct FSpriteInstanceData
		TEST_METHOD(ScriptStruct__Paper2D__SpriteInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, SourceSprite, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, VertexColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, MaterialIndex, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteInstanceData, 0x0050);
		}

		// struct FPaperSpriteSocket
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, LocalTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, UnknownData_MEUO, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteSocket, 0x0040);
		}

		// struct FPaperTerrainMaterialRule
		TEST_METHOD(ScriptStruct__Paper2D__PaperTerrainMaterialRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, StartCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, EndCap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MinimumAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MaximumAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, bEnableCollision, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_SR6S, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, CollisionOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, DrawOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_DSSP, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTerrainMaterialRule, 0x0038);
		}

		// struct FPaperTileInfo
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, TileSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, PackedTileIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, UnknownData_0JW1, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileInfo, 0x0010);
		}

		// struct FIntMargin
		TEST_METHOD(ScriptStruct__Paper2D__IntMargin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntMargin, 0x0010);
		}

		// struct FSpriteGeometryShape
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, ShapeType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_13L0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Vertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, bNegativeWinding, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_4KG8, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryShape, 0x0030);
		}

		// struct FSpriteGeometryCollection
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, Shapes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, GeometryType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_S5M1, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, bAvoidVertexMerging, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_O53R, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, AlphaThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, DetailAmount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, SimplifyEpsilon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_X3IS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryCollection, 0x0030);
		}

		// struct FPaperTileSetTerrain
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileSetTerrain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, TerrainName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, CenterTileIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, UnknownData_VC0E, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileSetTerrain, 0x0018);
		}

		// struct FPaperSpriteAtlasSlot
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteAtlasSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, SpriteRef, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, AtlasIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, X, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Width, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, UnknownData_1TIF, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteAtlasSlot, 0x0040);
		}

		// struct FSpriteDrawCallRecord
		TEST_METHOD(ScriptStruct__Paper2D__SpriteDrawCallRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Destination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_SJCX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, BaseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_7YPF, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_0AMU, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteDrawCallRecord, 0x00D0);
		}

		// struct FSpriteAssetInitParameters
		TEST_METHOD(ScriptStruct__Paper2D__SpriteAssetInitParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteAssetInitParameters, UnknownData_0LE4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteAssetInitParameters, 0x0040);
		}

		// struct FPaperTileMetadata
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UserDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, CollisionData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, TerrainMembership, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UnknownData_0DMW, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileMetadata, 0x0040);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_8EI4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_0NTG, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_2QNO, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_IW85, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_Q94P, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0048);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_UM2H, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FLandscapeMaterialTextureStreamingInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeMaterialTextureStreamingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TextureName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeMaterialTextureStreamingInfo, 0x000C);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_91MT, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerLeft, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerRight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffLeft, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffRight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0070);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_DB87, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_02WN, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_FUKF, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_BR0A, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_Q9NL, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0048);
		}

		// struct FLandscapeLayerBrush
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerBrush, UnknownData_PFOM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerBrush, 0x0001);
		}

		// struct FLandscapeLayer
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bVisible, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bLocked, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_LJJT, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, HeightmapAlpha, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapAlpha, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, BlendMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_WZXU, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Brushes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapLayerAllocationBlend, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayer, 0x0088);
		}

		// struct FHeightmapData
		TEST_METHOD(ScriptStruct__Landscape__HeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightmapData, Texture, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeightmapData, 0x0008);
		}

		// struct FWeightmapData
		TEST_METHOD(ScriptStruct__Landscape__WeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, Textures, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, LayerAllocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, TextureUsages, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapData, 0x0030);
		}

		// struct FLandscapeLayerComponentData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, HeightmapData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, WeightmapData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerComponentData, 0x0038);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, LayerContributionTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DirtyTexture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0038);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_JHXW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_X91H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_H5B9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_AW15, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_05R7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_FGE5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_FVNM, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_22XS, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_TB8Y, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_DQFV, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, MovieExtension, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_5GGT, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseCustomFrameRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_T053, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, CustomFrameRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUsePathTracer, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, PathTracerSamplePerPixel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_A9N5, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0070);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_DDGU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FCapturedPixelsID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixelsID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixelsID, Identifiers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixelsID, 0x0050);
		}

		// struct FMagicLeapHandMeshBlock
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMeshBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, IndexCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, VertexCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, Vertex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, Index, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMeshBlock, 0x0028);
		}

		// struct FMagicLeapHandMesh
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, Version, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, DataCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMesh, 0x0018);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisablePreintegratedGF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileCSMQuality, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0009);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_I6BJ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FArmorModInfo
		TEST_METHOD(UserDefinedStruct__ArmorModInfo__ArmorModInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArmorModInfo, OriginalWearableClass_12_AD90F8AD4754C4E6B9BA689CF06C37B8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArmorModInfo, ModdedWearableClass_13_72A32AA846E4EA49923DFEBC0B6AC7CF, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArmorModInfo, 0x0010);
		}

		// struct FSTRUCT_VoteKickInfo
		TEST_METHOD(UserDefinedStruct__STRUCT_VoteKickInfo__STRUCT_VoteKickInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTRUCT_VoteKickInfo, Target_17_17FF977E4C40F157A0FEC18A7933F7AD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTRUCT_VoteKickInfo, Initiator_19_6B8C38034236451E9947B38150AA1481, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTRUCT_VoteKickInfo, Result_22_793F21B84D1C1DC4274A43BE515C4562, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTRUCT_VoteKickInfo, TeamDamage_25_1416EB964890815CB4EBC99FA8891E3B, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSTRUCT_VoteKickInfo, 0x0012);
		}

		// struct FMagicLeapARPinState
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, Confidence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, ValidRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, RotationError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, TranslationError, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinState, 0x0010);
		}
	};
}
